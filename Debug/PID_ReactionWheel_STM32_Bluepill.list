
PID_ReactionWheel_STM32_Bluepill.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009ee4  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000514  08009ff8  08009ff8  00019ff8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a50c  0800a50c  00020210  2**0
                  CONTENTS
  4 .ARM          00000000  0800a50c  0800a50c  00020210  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a50c  0800a50c  00020210  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a50c  0800a50c  0001a50c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a510  0800a510  0001a510  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000210  20000000  0800a514  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000218  20000210  0800a724  00020210  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000428  0800a724  00020428  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e2fd  00000000  00000000  00020239  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020b8  00000000  00000000  0002e536  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f68  00000000  00000000  000305f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000eb8  00000000  00000000  00031558  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018dfb  00000000  00000000  00032410  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001065f  00000000  00000000  0004b20b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008e97a  00000000  00000000  0005b86a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ea1e4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005718  00000000  00000000  000ea234  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000210 	.word	0x20000210
 800012c:	00000000 	.word	0x00000000
 8000130:	08009fdc 	.word	0x08009fdc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000214 	.word	0x20000214
 800014c:	08009fdc 	.word	0x08009fdc

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	; 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dd6:	2afd      	cmp	r2, #253	; 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	; 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	; 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	; 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__aeabi_d2lz>:
 8001024:	b538      	push	{r3, r4, r5, lr}
 8001026:	4605      	mov	r5, r0
 8001028:	460c      	mov	r4, r1
 800102a:	2200      	movs	r2, #0
 800102c:	2300      	movs	r3, #0
 800102e:	4628      	mov	r0, r5
 8001030:	4621      	mov	r1, r4
 8001032:	f7ff fcc3 	bl	80009bc <__aeabi_dcmplt>
 8001036:	b928      	cbnz	r0, 8001044 <__aeabi_d2lz+0x20>
 8001038:	4628      	mov	r0, r5
 800103a:	4621      	mov	r1, r4
 800103c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001040:	f000 b80a 	b.w	8001058 <__aeabi_d2ulz>
 8001044:	4628      	mov	r0, r5
 8001046:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 800104a:	f000 f805 	bl	8001058 <__aeabi_d2ulz>
 800104e:	4240      	negs	r0, r0
 8001050:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001054:	bd38      	pop	{r3, r4, r5, pc}
 8001056:	bf00      	nop

08001058 <__aeabi_d2ulz>:
 8001058:	b5d0      	push	{r4, r6, r7, lr}
 800105a:	2200      	movs	r2, #0
 800105c:	4b0b      	ldr	r3, [pc, #44]	; (800108c <__aeabi_d2ulz+0x34>)
 800105e:	4606      	mov	r6, r0
 8001060:	460f      	mov	r7, r1
 8001062:	f7ff fa39 	bl	80004d8 <__aeabi_dmul>
 8001066:	f7ff fd0f 	bl	8000a88 <__aeabi_d2uiz>
 800106a:	4604      	mov	r4, r0
 800106c:	f7ff f9ba 	bl	80003e4 <__aeabi_ui2d>
 8001070:	2200      	movs	r2, #0
 8001072:	4b07      	ldr	r3, [pc, #28]	; (8001090 <__aeabi_d2ulz+0x38>)
 8001074:	f7ff fa30 	bl	80004d8 <__aeabi_dmul>
 8001078:	4602      	mov	r2, r0
 800107a:	460b      	mov	r3, r1
 800107c:	4630      	mov	r0, r6
 800107e:	4639      	mov	r1, r7
 8001080:	f7ff f872 	bl	8000168 <__aeabi_dsub>
 8001084:	f7ff fd00 	bl	8000a88 <__aeabi_d2uiz>
 8001088:	4621      	mov	r1, r4
 800108a:	bdd0      	pop	{r4, r6, r7, pc}
 800108c:	3df00000 	.word	0x3df00000
 8001090:	41f00000 	.word	0x41f00000

08001094 <MPU_begin>:
/// @param aScale Set accelerometer full scale range: 0 for ±2g, 1 for ±4g, 2 for ±8g, and 3 for ±16g.
/// @param gScale Set gyroscope full scale range: 0 for ±250°/s, 1 for ±500°/s, 2 for ±1000°/s, and 3 for ±2000°/s.
/// @param tau Set tau value for the complementary filter (typically 0.98).
/// @param dt Set sampling rate in seconds determined by the timer interrupt.
uint8_t MPU_begin(I2C_HandleTypeDef *I2Cx, uint8_t addr, uint8_t aScale, uint8_t gScale, float tau, float dt)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b088      	sub	sp, #32
 8001098:	af04      	add	r7, sp, #16
 800109a:	6078      	str	r0, [r7, #4]
 800109c:	4608      	mov	r0, r1
 800109e:	4611      	mov	r1, r2
 80010a0:	461a      	mov	r2, r3
 80010a2:	4603      	mov	r3, r0
 80010a4:	70fb      	strb	r3, [r7, #3]
 80010a6:	460b      	mov	r3, r1
 80010a8:	70bb      	strb	r3, [r7, #2]
 80010aa:	4613      	mov	r3, r2
 80010ac:	707b      	strb	r3, [r7, #1]
    // Save values
    _addr = addr << 1;
 80010ae:	78fb      	ldrb	r3, [r7, #3]
 80010b0:	005b      	lsls	r3, r3, #1
 80010b2:	b2da      	uxtb	r2, r3
 80010b4:	4b20      	ldr	r3, [pc, #128]	; (8001138 <MPU_begin+0xa4>)
 80010b6:	701a      	strb	r2, [r3, #0]
    _tau = tau;
 80010b8:	4a20      	ldr	r2, [pc, #128]	; (800113c <MPU_begin+0xa8>)
 80010ba:	69bb      	ldr	r3, [r7, #24]
 80010bc:	6013      	str	r3, [r2, #0]
    _dt = dt;
 80010be:	4a20      	ldr	r2, [pc, #128]	; (8001140 <MPU_begin+0xac>)
 80010c0:	69fb      	ldr	r3, [r7, #28]
 80010c2:	6013      	str	r3, [r2, #0]
    // Initialize variables
    uint8_t check;
    uint8_t select;

    // Confirm device
    HAL_I2C_Mem_Read(I2Cx, _addr, WHO_AM_I, 1, &check, 1, I2C_TIMOUT_MS);
 80010c4:	4b1c      	ldr	r3, [pc, #112]	; (8001138 <MPU_begin+0xa4>)
 80010c6:	781b      	ldrb	r3, [r3, #0]
 80010c8:	b299      	uxth	r1, r3
 80010ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010ce:	9302      	str	r3, [sp, #8]
 80010d0:	2301      	movs	r3, #1
 80010d2:	9301      	str	r3, [sp, #4]
 80010d4:	f107 030f 	add.w	r3, r7, #15
 80010d8:	9300      	str	r3, [sp, #0]
 80010da:	2301      	movs	r3, #1
 80010dc:	2275      	movs	r2, #117	; 0x75
 80010de:	6878      	ldr	r0, [r7, #4]
 80010e0:	f001 ff90 	bl	8003004 <HAL_I2C_Mem_Read>

    // TODO: If 9250 or 6050 fails could it trigger the opposite check???
    if ((check == WHO_AM_I_9250_ANS) || (check == WHO_AM_I_6050_ANS))
 80010e4:	7bfb      	ldrb	r3, [r7, #15]
 80010e6:	2b71      	cmp	r3, #113	; 0x71
 80010e8:	d002      	beq.n	80010f0 <MPU_begin+0x5c>
 80010ea:	7bfb      	ldrb	r3, [r7, #15]
 80010ec:	2b68      	cmp	r3, #104	; 0x68
 80010ee:	d11d      	bne.n	800112c <MPU_begin+0x98>
    {
        // Startup / reset the sensor
        select = 0x00;
 80010f0:	2300      	movs	r3, #0
 80010f2:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, _addr, PWR_MGMT_1, 1, &select, 1, I2C_TIMOUT_MS);
 80010f4:	4b10      	ldr	r3, [pc, #64]	; (8001138 <MPU_begin+0xa4>)
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	b299      	uxth	r1, r3
 80010fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010fe:	9302      	str	r3, [sp, #8]
 8001100:	2301      	movs	r3, #1
 8001102:	9301      	str	r3, [sp, #4]
 8001104:	f107 030e 	add.w	r3, r7, #14
 8001108:	9300      	str	r3, [sp, #0]
 800110a:	2301      	movs	r3, #1
 800110c:	226b      	movs	r2, #107	; 0x6b
 800110e:	6878      	ldr	r0, [r7, #4]
 8001110:	f001 fe7e 	bl	8002e10 <HAL_I2C_Mem_Write>

        // Set the full scale ranges
        MPU_writeAccFullScaleRange(I2Cx, aScale);
 8001114:	78bb      	ldrb	r3, [r7, #2]
 8001116:	4619      	mov	r1, r3
 8001118:	6878      	ldr	r0, [r7, #4]
 800111a:	f000 f813 	bl	8001144 <MPU_writeAccFullScaleRange>
        MPU_writeGyroFullScaleRange(I2Cx, gScale);
 800111e:	787b      	ldrb	r3, [r7, #1]
 8001120:	4619      	mov	r1, r3
 8001122:	6878      	ldr	r0, [r7, #4]
 8001124:	f000 f89e 	bl	8001264 <MPU_writeGyroFullScaleRange>

        return 1;
 8001128:	2301      	movs	r3, #1
 800112a:	e000      	b.n	800112e <MPU_begin+0x9a>
    }
    else
    {
        return 0;
 800112c:	2300      	movs	r3, #0
    }
}
 800112e:	4618      	mov	r0, r3
 8001130:	3710      	adds	r7, #16
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	2000025c 	.word	0x2000025c
 800113c:	20000264 	.word	0x20000264
 8001140:	20000260 	.word	0x20000260

08001144 <MPU_writeAccFullScaleRange>:

/// @brief Set the accelerometer full scale range.
/// @param I2Cx Pointer to I2C structure config.
/// @param aScale Set 0 for ±2g, 1 for ±4g, 2 for ±8g, and 3 for ±16g.
void MPU_writeAccFullScaleRange(I2C_HandleTypeDef *I2Cx, uint8_t aScale)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b088      	sub	sp, #32
 8001148:	af04      	add	r7, sp, #16
 800114a:	6078      	str	r0, [r7, #4]
 800114c:	460b      	mov	r3, r1
 800114e:	70fb      	strb	r3, [r7, #3]
    // Variable init
    uint8_t select;

    // Set the value
    switch (aScale)
 8001150:	78fb      	ldrb	r3, [r7, #3]
 8001152:	2b03      	cmp	r3, #3
 8001154:	d866      	bhi.n	8001224 <MPU_writeAccFullScaleRange+0xe0>
 8001156:	a201      	add	r2, pc, #4	; (adr r2, 800115c <MPU_writeAccFullScaleRange+0x18>)
 8001158:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800115c:	0800116d 	.word	0x0800116d
 8001160:	0800119b 	.word	0x0800119b
 8001164:	080011c9 	.word	0x080011c9
 8001168:	080011f7 	.word	0x080011f7
    {
    case AFSR_2G:
        aScaleFactor = 16384.0;
 800116c:	4b3b      	ldr	r3, [pc, #236]	; (800125c <MPU_writeAccFullScaleRange+0x118>)
 800116e:	f04f 428d 	mov.w	r2, #1182793728	; 0x46800000
 8001172:	601a      	str	r2, [r3, #0]
        select = 0x00;
 8001174:	2300      	movs	r3, #0
 8001176:	73fb      	strb	r3, [r7, #15]
        HAL_I2C_Mem_Write(I2Cx, _addr, ACCEL_CONFIG, 1, &select, 1, I2C_TIMOUT_MS);
 8001178:	4b39      	ldr	r3, [pc, #228]	; (8001260 <MPU_writeAccFullScaleRange+0x11c>)
 800117a:	781b      	ldrb	r3, [r3, #0]
 800117c:	b299      	uxth	r1, r3
 800117e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001182:	9302      	str	r3, [sp, #8]
 8001184:	2301      	movs	r3, #1
 8001186:	9301      	str	r3, [sp, #4]
 8001188:	f107 030f 	add.w	r3, r7, #15
 800118c:	9300      	str	r3, [sp, #0]
 800118e:	2301      	movs	r3, #1
 8001190:	221c      	movs	r2, #28
 8001192:	6878      	ldr	r0, [r7, #4]
 8001194:	f001 fe3c 	bl	8002e10 <HAL_I2C_Mem_Write>
        break;
 8001198:	e05b      	b.n	8001252 <MPU_writeAccFullScaleRange+0x10e>
    case AFSR_4G:
        aScaleFactor = 8192.0;
 800119a:	4b30      	ldr	r3, [pc, #192]	; (800125c <MPU_writeAccFullScaleRange+0x118>)
 800119c:	f04f 428c 	mov.w	r2, #1174405120	; 0x46000000
 80011a0:	601a      	str	r2, [r3, #0]
        select = 0x08;
 80011a2:	2308      	movs	r3, #8
 80011a4:	73fb      	strb	r3, [r7, #15]
        HAL_I2C_Mem_Write(I2Cx, _addr, ACCEL_CONFIG, 1, &select, 1, I2C_TIMOUT_MS);
 80011a6:	4b2e      	ldr	r3, [pc, #184]	; (8001260 <MPU_writeAccFullScaleRange+0x11c>)
 80011a8:	781b      	ldrb	r3, [r3, #0]
 80011aa:	b299      	uxth	r1, r3
 80011ac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011b0:	9302      	str	r3, [sp, #8]
 80011b2:	2301      	movs	r3, #1
 80011b4:	9301      	str	r3, [sp, #4]
 80011b6:	f107 030f 	add.w	r3, r7, #15
 80011ba:	9300      	str	r3, [sp, #0]
 80011bc:	2301      	movs	r3, #1
 80011be:	221c      	movs	r2, #28
 80011c0:	6878      	ldr	r0, [r7, #4]
 80011c2:	f001 fe25 	bl	8002e10 <HAL_I2C_Mem_Write>
        break;
 80011c6:	e044      	b.n	8001252 <MPU_writeAccFullScaleRange+0x10e>
    case AFSR_8G:
        aScaleFactor = 4096.0;
 80011c8:	4b24      	ldr	r3, [pc, #144]	; (800125c <MPU_writeAccFullScaleRange+0x118>)
 80011ca:	f04f 428b 	mov.w	r2, #1166016512	; 0x45800000
 80011ce:	601a      	str	r2, [r3, #0]
        select = 0x10;
 80011d0:	2310      	movs	r3, #16
 80011d2:	73fb      	strb	r3, [r7, #15]
        HAL_I2C_Mem_Write(I2Cx, _addr, ACCEL_CONFIG, 1, &select, 1, I2C_TIMOUT_MS);
 80011d4:	4b22      	ldr	r3, [pc, #136]	; (8001260 <MPU_writeAccFullScaleRange+0x11c>)
 80011d6:	781b      	ldrb	r3, [r3, #0]
 80011d8:	b299      	uxth	r1, r3
 80011da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011de:	9302      	str	r3, [sp, #8]
 80011e0:	2301      	movs	r3, #1
 80011e2:	9301      	str	r3, [sp, #4]
 80011e4:	f107 030f 	add.w	r3, r7, #15
 80011e8:	9300      	str	r3, [sp, #0]
 80011ea:	2301      	movs	r3, #1
 80011ec:	221c      	movs	r2, #28
 80011ee:	6878      	ldr	r0, [r7, #4]
 80011f0:	f001 fe0e 	bl	8002e10 <HAL_I2C_Mem_Write>
        break;
 80011f4:	e02d      	b.n	8001252 <MPU_writeAccFullScaleRange+0x10e>
    case AFSR_16G:
        aScaleFactor = 2048.0;
 80011f6:	4b19      	ldr	r3, [pc, #100]	; (800125c <MPU_writeAccFullScaleRange+0x118>)
 80011f8:	f04f 428a 	mov.w	r2, #1157627904	; 0x45000000
 80011fc:	601a      	str	r2, [r3, #0]
        select = 0x18;
 80011fe:	2318      	movs	r3, #24
 8001200:	73fb      	strb	r3, [r7, #15]
        HAL_I2C_Mem_Write(I2Cx, _addr, ACCEL_CONFIG, 1, &select, 1, I2C_TIMOUT_MS);
 8001202:	4b17      	ldr	r3, [pc, #92]	; (8001260 <MPU_writeAccFullScaleRange+0x11c>)
 8001204:	781b      	ldrb	r3, [r3, #0]
 8001206:	b299      	uxth	r1, r3
 8001208:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800120c:	9302      	str	r3, [sp, #8]
 800120e:	2301      	movs	r3, #1
 8001210:	9301      	str	r3, [sp, #4]
 8001212:	f107 030f 	add.w	r3, r7, #15
 8001216:	9300      	str	r3, [sp, #0]
 8001218:	2301      	movs	r3, #1
 800121a:	221c      	movs	r2, #28
 800121c:	6878      	ldr	r0, [r7, #4]
 800121e:	f001 fdf7 	bl	8002e10 <HAL_I2C_Mem_Write>
        break;
 8001222:	e016      	b.n	8001252 <MPU_writeAccFullScaleRange+0x10e>
    default:
        aScaleFactor = 8192.0;
 8001224:	4b0d      	ldr	r3, [pc, #52]	; (800125c <MPU_writeAccFullScaleRange+0x118>)
 8001226:	f04f 428c 	mov.w	r2, #1174405120	; 0x46000000
 800122a:	601a      	str	r2, [r3, #0]
        select = 0x08;
 800122c:	2308      	movs	r3, #8
 800122e:	73fb      	strb	r3, [r7, #15]
        HAL_I2C_Mem_Write(I2Cx, _addr, ACCEL_CONFIG, 1, &select, 1, I2C_TIMOUT_MS);
 8001230:	4b0b      	ldr	r3, [pc, #44]	; (8001260 <MPU_writeAccFullScaleRange+0x11c>)
 8001232:	781b      	ldrb	r3, [r3, #0]
 8001234:	b299      	uxth	r1, r3
 8001236:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800123a:	9302      	str	r3, [sp, #8]
 800123c:	2301      	movs	r3, #1
 800123e:	9301      	str	r3, [sp, #4]
 8001240:	f107 030f 	add.w	r3, r7, #15
 8001244:	9300      	str	r3, [sp, #0]
 8001246:	2301      	movs	r3, #1
 8001248:	221c      	movs	r2, #28
 800124a:	6878      	ldr	r0, [r7, #4]
 800124c:	f001 fde0 	bl	8002e10 <HAL_I2C_Mem_Write>
        break;
 8001250:	bf00      	nop
    }
}
 8001252:	bf00      	nop
 8001254:	3710      	adds	r7, #16
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	20000268 	.word	0x20000268
 8001260:	2000025c 	.word	0x2000025c

08001264 <MPU_writeGyroFullScaleRange>:

/// @brief Set the gyroscope full scale range.
/// @param I2Cx Pointer to I2C structure config.
/// @param gScale Set 0 for ±250°/s, 1 for ±500°/s, 2 for ±1000°/s, and 3 for ±2000°/s.
void MPU_writeGyroFullScaleRange(I2C_HandleTypeDef *I2Cx, uint8_t gScale)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b088      	sub	sp, #32
 8001268:	af04      	add	r7, sp, #16
 800126a:	6078      	str	r0, [r7, #4]
 800126c:	460b      	mov	r3, r1
 800126e:	70fb      	strb	r3, [r7, #3]
    // Variable init
    uint8_t select;

    // Set the value
    switch (gScale)
 8001270:	78fb      	ldrb	r3, [r7, #3]
 8001272:	2b03      	cmp	r3, #3
 8001274:	d862      	bhi.n	800133c <MPU_writeGyroFullScaleRange+0xd8>
 8001276:	a201      	add	r2, pc, #4	; (adr r2, 800127c <MPU_writeGyroFullScaleRange+0x18>)
 8001278:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800127c:	0800128d 	.word	0x0800128d
 8001280:	080012b9 	.word	0x080012b9
 8001284:	080012e5 	.word	0x080012e5
 8001288:	08001311 	.word	0x08001311
    {
    case GFSR_250DPS:
        gScaleFactor = 131.0;
 800128c:	4b38      	ldr	r3, [pc, #224]	; (8001370 <MPU_writeGyroFullScaleRange+0x10c>)
 800128e:	4a39      	ldr	r2, [pc, #228]	; (8001374 <MPU_writeGyroFullScaleRange+0x110>)
 8001290:	601a      	str	r2, [r3, #0]
        select = 0x00;
 8001292:	2300      	movs	r3, #0
 8001294:	73fb      	strb	r3, [r7, #15]
        HAL_I2C_Mem_Write(I2Cx, _addr, GYRO_CONFIG, 1, &select, 1, I2C_TIMOUT_MS);
 8001296:	4b38      	ldr	r3, [pc, #224]	; (8001378 <MPU_writeGyroFullScaleRange+0x114>)
 8001298:	781b      	ldrb	r3, [r3, #0]
 800129a:	b299      	uxth	r1, r3
 800129c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012a0:	9302      	str	r3, [sp, #8]
 80012a2:	2301      	movs	r3, #1
 80012a4:	9301      	str	r3, [sp, #4]
 80012a6:	f107 030f 	add.w	r3, r7, #15
 80012aa:	9300      	str	r3, [sp, #0]
 80012ac:	2301      	movs	r3, #1
 80012ae:	221b      	movs	r2, #27
 80012b0:	6878      	ldr	r0, [r7, #4]
 80012b2:	f001 fdad 	bl	8002e10 <HAL_I2C_Mem_Write>
        break;
 80012b6:	e057      	b.n	8001368 <MPU_writeGyroFullScaleRange+0x104>
    case GFSR_500DPS:
        gScaleFactor = 65.5;
 80012b8:	4b2d      	ldr	r3, [pc, #180]	; (8001370 <MPU_writeGyroFullScaleRange+0x10c>)
 80012ba:	4a30      	ldr	r2, [pc, #192]	; (800137c <MPU_writeGyroFullScaleRange+0x118>)
 80012bc:	601a      	str	r2, [r3, #0]
        select = 0x08;
 80012be:	2308      	movs	r3, #8
 80012c0:	73fb      	strb	r3, [r7, #15]
        HAL_I2C_Mem_Write(I2Cx, _addr, GYRO_CONFIG, 1, &select, 1, I2C_TIMOUT_MS);
 80012c2:	4b2d      	ldr	r3, [pc, #180]	; (8001378 <MPU_writeGyroFullScaleRange+0x114>)
 80012c4:	781b      	ldrb	r3, [r3, #0]
 80012c6:	b299      	uxth	r1, r3
 80012c8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012cc:	9302      	str	r3, [sp, #8]
 80012ce:	2301      	movs	r3, #1
 80012d0:	9301      	str	r3, [sp, #4]
 80012d2:	f107 030f 	add.w	r3, r7, #15
 80012d6:	9300      	str	r3, [sp, #0]
 80012d8:	2301      	movs	r3, #1
 80012da:	221b      	movs	r2, #27
 80012dc:	6878      	ldr	r0, [r7, #4]
 80012de:	f001 fd97 	bl	8002e10 <HAL_I2C_Mem_Write>
        break;
 80012e2:	e041      	b.n	8001368 <MPU_writeGyroFullScaleRange+0x104>
    case GFSR_1000DPS:
        gScaleFactor = 32.8;
 80012e4:	4b22      	ldr	r3, [pc, #136]	; (8001370 <MPU_writeGyroFullScaleRange+0x10c>)
 80012e6:	4a26      	ldr	r2, [pc, #152]	; (8001380 <MPU_writeGyroFullScaleRange+0x11c>)
 80012e8:	601a      	str	r2, [r3, #0]
        select = 0x10;
 80012ea:	2310      	movs	r3, #16
 80012ec:	73fb      	strb	r3, [r7, #15]
        HAL_I2C_Mem_Write(I2Cx, _addr, GYRO_CONFIG, 1, &select, 1, I2C_TIMOUT_MS);
 80012ee:	4b22      	ldr	r3, [pc, #136]	; (8001378 <MPU_writeGyroFullScaleRange+0x114>)
 80012f0:	781b      	ldrb	r3, [r3, #0]
 80012f2:	b299      	uxth	r1, r3
 80012f4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012f8:	9302      	str	r3, [sp, #8]
 80012fa:	2301      	movs	r3, #1
 80012fc:	9301      	str	r3, [sp, #4]
 80012fe:	f107 030f 	add.w	r3, r7, #15
 8001302:	9300      	str	r3, [sp, #0]
 8001304:	2301      	movs	r3, #1
 8001306:	221b      	movs	r2, #27
 8001308:	6878      	ldr	r0, [r7, #4]
 800130a:	f001 fd81 	bl	8002e10 <HAL_I2C_Mem_Write>
        break;
 800130e:	e02b      	b.n	8001368 <MPU_writeGyroFullScaleRange+0x104>
    case GFSR_2000DPS:
        gScaleFactor = 16.4;
 8001310:	4b17      	ldr	r3, [pc, #92]	; (8001370 <MPU_writeGyroFullScaleRange+0x10c>)
 8001312:	4a1c      	ldr	r2, [pc, #112]	; (8001384 <MPU_writeGyroFullScaleRange+0x120>)
 8001314:	601a      	str	r2, [r3, #0]
        select = 0x18;
 8001316:	2318      	movs	r3, #24
 8001318:	73fb      	strb	r3, [r7, #15]
        HAL_I2C_Mem_Write(I2Cx, _addr, GYRO_CONFIG, 1, &select, 1, I2C_TIMOUT_MS);
 800131a:	4b17      	ldr	r3, [pc, #92]	; (8001378 <MPU_writeGyroFullScaleRange+0x114>)
 800131c:	781b      	ldrb	r3, [r3, #0]
 800131e:	b299      	uxth	r1, r3
 8001320:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001324:	9302      	str	r3, [sp, #8]
 8001326:	2301      	movs	r3, #1
 8001328:	9301      	str	r3, [sp, #4]
 800132a:	f107 030f 	add.w	r3, r7, #15
 800132e:	9300      	str	r3, [sp, #0]
 8001330:	2301      	movs	r3, #1
 8001332:	221b      	movs	r2, #27
 8001334:	6878      	ldr	r0, [r7, #4]
 8001336:	f001 fd6b 	bl	8002e10 <HAL_I2C_Mem_Write>
        break;
 800133a:	e015      	b.n	8001368 <MPU_writeGyroFullScaleRange+0x104>
    default:
        gScaleFactor = 65.5;
 800133c:	4b0c      	ldr	r3, [pc, #48]	; (8001370 <MPU_writeGyroFullScaleRange+0x10c>)
 800133e:	4a0f      	ldr	r2, [pc, #60]	; (800137c <MPU_writeGyroFullScaleRange+0x118>)
 8001340:	601a      	str	r2, [r3, #0]
        select = 0x08;
 8001342:	2308      	movs	r3, #8
 8001344:	73fb      	strb	r3, [r7, #15]
        HAL_I2C_Mem_Write(I2Cx, _addr, GYRO_CONFIG, 1, &select, 1, I2C_TIMOUT_MS);
 8001346:	4b0c      	ldr	r3, [pc, #48]	; (8001378 <MPU_writeGyroFullScaleRange+0x114>)
 8001348:	781b      	ldrb	r3, [r3, #0]
 800134a:	b299      	uxth	r1, r3
 800134c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001350:	9302      	str	r3, [sp, #8]
 8001352:	2301      	movs	r3, #1
 8001354:	9301      	str	r3, [sp, #4]
 8001356:	f107 030f 	add.w	r3, r7, #15
 800135a:	9300      	str	r3, [sp, #0]
 800135c:	2301      	movs	r3, #1
 800135e:	221b      	movs	r2, #27
 8001360:	6878      	ldr	r0, [r7, #4]
 8001362:	f001 fd55 	bl	8002e10 <HAL_I2C_Mem_Write>
        break;
 8001366:	bf00      	nop
    }
}
 8001368:	bf00      	nop
 800136a:	3710      	adds	r7, #16
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}
 8001370:	2000026c 	.word	0x2000026c
 8001374:	43030000 	.word	0x43030000
 8001378:	2000025c 	.word	0x2000025c
 800137c:	42830000 	.word	0x42830000
 8001380:	42033333 	.word	0x42033333
 8001384:	41833333 	.word	0x41833333

08001388 <MPU_readRawData>:

/// @brief Read raw data from IMU.
/// @param I2Cx Pointer to I2C structure config.
void MPU_readRawData(I2C_HandleTypeDef *I2Cx)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b08a      	sub	sp, #40	; 0x28
 800138c:	af04      	add	r7, sp, #16
 800138e:	6078      	str	r0, [r7, #4]
    // Init buffer
    uint8_t buf[14];

    // Subroutine for reading the raw data
    HAL_I2C_Mem_Read(I2Cx, _addr, ACCEL_XOUT_H, 1, buf, 14, I2C_TIMOUT_MS);
 8001390:	4b24      	ldr	r3, [pc, #144]	; (8001424 <MPU_readRawData+0x9c>)
 8001392:	781b      	ldrb	r3, [r3, #0]
 8001394:	b299      	uxth	r1, r3
 8001396:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800139a:	9302      	str	r3, [sp, #8]
 800139c:	230e      	movs	r3, #14
 800139e:	9301      	str	r3, [sp, #4]
 80013a0:	f107 0308 	add.w	r3, r7, #8
 80013a4:	9300      	str	r3, [sp, #0]
 80013a6:	2301      	movs	r3, #1
 80013a8:	223b      	movs	r2, #59	; 0x3b
 80013aa:	6878      	ldr	r0, [r7, #4]
 80013ac:	f001 fe2a 	bl	8003004 <HAL_I2C_Mem_Read>

    // Bit shift the data
    rawData.ax = buf[0] << 8 | buf[1];
 80013b0:	7a3b      	ldrb	r3, [r7, #8]
 80013b2:	021b      	lsls	r3, r3, #8
 80013b4:	b21a      	sxth	r2, r3
 80013b6:	7a7b      	ldrb	r3, [r7, #9]
 80013b8:	b21b      	sxth	r3, r3
 80013ba:	4313      	orrs	r3, r2
 80013bc:	b21a      	sxth	r2, r3
 80013be:	4b1a      	ldr	r3, [pc, #104]	; (8001428 <MPU_readRawData+0xa0>)
 80013c0:	801a      	strh	r2, [r3, #0]
    rawData.ay = buf[2] << 8 | buf[3];
 80013c2:	7abb      	ldrb	r3, [r7, #10]
 80013c4:	021b      	lsls	r3, r3, #8
 80013c6:	b21a      	sxth	r2, r3
 80013c8:	7afb      	ldrb	r3, [r7, #11]
 80013ca:	b21b      	sxth	r3, r3
 80013cc:	4313      	orrs	r3, r2
 80013ce:	b21a      	sxth	r2, r3
 80013d0:	4b15      	ldr	r3, [pc, #84]	; (8001428 <MPU_readRawData+0xa0>)
 80013d2:	805a      	strh	r2, [r3, #2]
    rawData.az = buf[4] << 8 | buf[5];
 80013d4:	7b3b      	ldrb	r3, [r7, #12]
 80013d6:	021b      	lsls	r3, r3, #8
 80013d8:	b21a      	sxth	r2, r3
 80013da:	7b7b      	ldrb	r3, [r7, #13]
 80013dc:	b21b      	sxth	r3, r3
 80013de:	4313      	orrs	r3, r2
 80013e0:	b21a      	sxth	r2, r3
 80013e2:	4b11      	ldr	r3, [pc, #68]	; (8001428 <MPU_readRawData+0xa0>)
 80013e4:	809a      	strh	r2, [r3, #4]
    // temperature = buf[6] << 8 | buf[7];
    rawData.gx = buf[8] << 8 | buf[9];
 80013e6:	7c3b      	ldrb	r3, [r7, #16]
 80013e8:	021b      	lsls	r3, r3, #8
 80013ea:	b21a      	sxth	r2, r3
 80013ec:	7c7b      	ldrb	r3, [r7, #17]
 80013ee:	b21b      	sxth	r3, r3
 80013f0:	4313      	orrs	r3, r2
 80013f2:	b21a      	sxth	r2, r3
 80013f4:	4b0c      	ldr	r3, [pc, #48]	; (8001428 <MPU_readRawData+0xa0>)
 80013f6:	80da      	strh	r2, [r3, #6]
    rawData.gy = buf[10] << 8 | buf[11];
 80013f8:	7cbb      	ldrb	r3, [r7, #18]
 80013fa:	021b      	lsls	r3, r3, #8
 80013fc:	b21a      	sxth	r2, r3
 80013fe:	7cfb      	ldrb	r3, [r7, #19]
 8001400:	b21b      	sxth	r3, r3
 8001402:	4313      	orrs	r3, r2
 8001404:	b21a      	sxth	r2, r3
 8001406:	4b08      	ldr	r3, [pc, #32]	; (8001428 <MPU_readRawData+0xa0>)
 8001408:	811a      	strh	r2, [r3, #8]
    rawData.gz = buf[12] << 8 | buf[13];
 800140a:	7d3b      	ldrb	r3, [r7, #20]
 800140c:	021b      	lsls	r3, r3, #8
 800140e:	b21a      	sxth	r2, r3
 8001410:	7d7b      	ldrb	r3, [r7, #21]
 8001412:	b21b      	sxth	r3, r3
 8001414:	4313      	orrs	r3, r2
 8001416:	b21a      	sxth	r2, r3
 8001418:	4b03      	ldr	r3, [pc, #12]	; (8001428 <MPU_readRawData+0xa0>)
 800141a:	815a      	strh	r2, [r3, #10]
}
 800141c:	bf00      	nop
 800141e:	3718      	adds	r7, #24
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}
 8001424:	2000025c 	.word	0x2000025c
 8001428:	2000022c 	.word	0x2000022c

0800142c <MPU_calibrateGyro>:

/// @brief Find offsets for each axis of gyroscope.
/// @param I2Cx Pointer to I2C structure config.
/// @param numCalPoints Number of data points to average.
void MPU_calibrateGyro(I2C_HandleTypeDef *I2Cx, uint16_t numCalPoints)
{
 800142c:	b590      	push	{r4, r7, lr}
 800142e:	b087      	sub	sp, #28
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
 8001434:	460b      	mov	r3, r1
 8001436:	807b      	strh	r3, [r7, #2]
    // Init
    int32_t x = 0;
 8001438:	2300      	movs	r3, #0
 800143a:	617b      	str	r3, [r7, #20]
    int32_t y = 0;
 800143c:	2300      	movs	r3, #0
 800143e:	613b      	str	r3, [r7, #16]
    int32_t z = 0;
 8001440:	2300      	movs	r3, #0
 8001442:	60fb      	str	r3, [r7, #12]

    // Zero guard
    if (numCalPoints == 0)
 8001444:	887b      	ldrh	r3, [r7, #2]
 8001446:	2b00      	cmp	r3, #0
 8001448:	d101      	bne.n	800144e <MPU_calibrateGyro+0x22>
    {
        numCalPoints = 1;
 800144a:	2301      	movs	r3, #1
 800144c:	807b      	strh	r3, [r7, #2]
    }

    // Save specified number of points
    for (uint16_t ii = 0; ii < numCalPoints; ii++)
 800144e:	2300      	movs	r3, #0
 8001450:	817b      	strh	r3, [r7, #10]
 8001452:	e01d      	b.n	8001490 <MPU_calibrateGyro+0x64>
    {
        MPU_readRawData(I2Cx);
 8001454:	6878      	ldr	r0, [r7, #4]
 8001456:	f7ff ff97 	bl	8001388 <MPU_readRawData>
        x += rawData.gx;
 800145a:	4b2b      	ldr	r3, [pc, #172]	; (8001508 <MPU_calibrateGyro+0xdc>)
 800145c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001460:	461a      	mov	r2, r3
 8001462:	697b      	ldr	r3, [r7, #20]
 8001464:	4413      	add	r3, r2
 8001466:	617b      	str	r3, [r7, #20]
        y += rawData.gy;
 8001468:	4b27      	ldr	r3, [pc, #156]	; (8001508 <MPU_calibrateGyro+0xdc>)
 800146a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800146e:	461a      	mov	r2, r3
 8001470:	693b      	ldr	r3, [r7, #16]
 8001472:	4413      	add	r3, r2
 8001474:	613b      	str	r3, [r7, #16]
        z += rawData.gz;
 8001476:	4b24      	ldr	r3, [pc, #144]	; (8001508 <MPU_calibrateGyro+0xdc>)
 8001478:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800147c:	461a      	mov	r2, r3
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	4413      	add	r3, r2
 8001482:	60fb      	str	r3, [r7, #12]
        HAL_Delay(3);
 8001484:	2003      	movs	r0, #3
 8001486:	f001 f87b 	bl	8002580 <HAL_Delay>
    for (uint16_t ii = 0; ii < numCalPoints; ii++)
 800148a:	897b      	ldrh	r3, [r7, #10]
 800148c:	3301      	adds	r3, #1
 800148e:	817b      	strh	r3, [r7, #10]
 8001490:	897a      	ldrh	r2, [r7, #10]
 8001492:	887b      	ldrh	r3, [r7, #2]
 8001494:	429a      	cmp	r2, r3
 8001496:	d3dd      	bcc.n	8001454 <MPU_calibrateGyro+0x28>
    }

    // Average the saved data points to find the gyroscope offset
    gyroCal.x = (float)x / (float)numCalPoints;
 8001498:	6978      	ldr	r0, [r7, #20]
 800149a:	f7ff fc1f 	bl	8000cdc <__aeabi_i2f>
 800149e:	4604      	mov	r4, r0
 80014a0:	887b      	ldrh	r3, [r7, #2]
 80014a2:	4618      	mov	r0, r3
 80014a4:	f7ff fc16 	bl	8000cd4 <__aeabi_ui2f>
 80014a8:	4603      	mov	r3, r0
 80014aa:	4619      	mov	r1, r3
 80014ac:	4620      	mov	r0, r4
 80014ae:	f7ff fd1d 	bl	8000eec <__aeabi_fdiv>
 80014b2:	4603      	mov	r3, r0
 80014b4:	461a      	mov	r2, r3
 80014b6:	4b15      	ldr	r3, [pc, #84]	; (800150c <MPU_calibrateGyro+0xe0>)
 80014b8:	601a      	str	r2, [r3, #0]
    gyroCal.y = (float)y / (float)numCalPoints;
 80014ba:	6938      	ldr	r0, [r7, #16]
 80014bc:	f7ff fc0e 	bl	8000cdc <__aeabi_i2f>
 80014c0:	4604      	mov	r4, r0
 80014c2:	887b      	ldrh	r3, [r7, #2]
 80014c4:	4618      	mov	r0, r3
 80014c6:	f7ff fc05 	bl	8000cd4 <__aeabi_ui2f>
 80014ca:	4603      	mov	r3, r0
 80014cc:	4619      	mov	r1, r3
 80014ce:	4620      	mov	r0, r4
 80014d0:	f7ff fd0c 	bl	8000eec <__aeabi_fdiv>
 80014d4:	4603      	mov	r3, r0
 80014d6:	461a      	mov	r2, r3
 80014d8:	4b0c      	ldr	r3, [pc, #48]	; (800150c <MPU_calibrateGyro+0xe0>)
 80014da:	605a      	str	r2, [r3, #4]
    gyroCal.z = (float)z / (float)numCalPoints;
 80014dc:	68f8      	ldr	r0, [r7, #12]
 80014de:	f7ff fbfd 	bl	8000cdc <__aeabi_i2f>
 80014e2:	4604      	mov	r4, r0
 80014e4:	887b      	ldrh	r3, [r7, #2]
 80014e6:	4618      	mov	r0, r3
 80014e8:	f7ff fbf4 	bl	8000cd4 <__aeabi_ui2f>
 80014ec:	4603      	mov	r3, r0
 80014ee:	4619      	mov	r1, r3
 80014f0:	4620      	mov	r0, r4
 80014f2:	f7ff fcfb 	bl	8000eec <__aeabi_fdiv>
 80014f6:	4603      	mov	r3, r0
 80014f8:	461a      	mov	r2, r3
 80014fa:	4b04      	ldr	r3, [pc, #16]	; (800150c <MPU_calibrateGyro+0xe0>)
 80014fc:	609a      	str	r2, [r3, #8]
}
 80014fe:	bf00      	nop
 8001500:	371c      	adds	r7, #28
 8001502:	46bd      	mov	sp, r7
 8001504:	bd90      	pop	{r4, r7, pc}
 8001506:	bf00      	nop
 8001508:	2000022c 	.word	0x2000022c
 800150c:	20000250 	.word	0x20000250

08001510 <MPU_readProcessedData>:

/// @brief Calculate the real world sensor values.
/// @param I2Cx Pointer to I2C structure config.
void MPU_readProcessedData(I2C_HandleTypeDef *I2Cx)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b082      	sub	sp, #8
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
    // Get raw values from the IMU
    MPU_readRawData(I2Cx);
 8001518:	6878      	ldr	r0, [r7, #4]
 800151a:	f7ff ff35 	bl	8001388 <MPU_readRawData>

    // Convert accelerometer values to g's
    sensorData.ax = rawData.ax / aScaleFactor;
 800151e:	4b47      	ldr	r3, [pc, #284]	; (800163c <MPU_readProcessedData+0x12c>)
 8001520:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001524:	4618      	mov	r0, r3
 8001526:	f7ff fbd9 	bl	8000cdc <__aeabi_i2f>
 800152a:	4602      	mov	r2, r0
 800152c:	4b44      	ldr	r3, [pc, #272]	; (8001640 <MPU_readProcessedData+0x130>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4619      	mov	r1, r3
 8001532:	4610      	mov	r0, r2
 8001534:	f7ff fcda 	bl	8000eec <__aeabi_fdiv>
 8001538:	4603      	mov	r3, r0
 800153a:	461a      	mov	r2, r3
 800153c:	4b41      	ldr	r3, [pc, #260]	; (8001644 <MPU_readProcessedData+0x134>)
 800153e:	601a      	str	r2, [r3, #0]
    sensorData.ay = rawData.ay / aScaleFactor;
 8001540:	4b3e      	ldr	r3, [pc, #248]	; (800163c <MPU_readProcessedData+0x12c>)
 8001542:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001546:	4618      	mov	r0, r3
 8001548:	f7ff fbc8 	bl	8000cdc <__aeabi_i2f>
 800154c:	4602      	mov	r2, r0
 800154e:	4b3c      	ldr	r3, [pc, #240]	; (8001640 <MPU_readProcessedData+0x130>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4619      	mov	r1, r3
 8001554:	4610      	mov	r0, r2
 8001556:	f7ff fcc9 	bl	8000eec <__aeabi_fdiv>
 800155a:	4603      	mov	r3, r0
 800155c:	461a      	mov	r2, r3
 800155e:	4b39      	ldr	r3, [pc, #228]	; (8001644 <MPU_readProcessedData+0x134>)
 8001560:	605a      	str	r2, [r3, #4]
    sensorData.az = rawData.az / aScaleFactor;
 8001562:	4b36      	ldr	r3, [pc, #216]	; (800163c <MPU_readProcessedData+0x12c>)
 8001564:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001568:	4618      	mov	r0, r3
 800156a:	f7ff fbb7 	bl	8000cdc <__aeabi_i2f>
 800156e:	4602      	mov	r2, r0
 8001570:	4b33      	ldr	r3, [pc, #204]	; (8001640 <MPU_readProcessedData+0x130>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4619      	mov	r1, r3
 8001576:	4610      	mov	r0, r2
 8001578:	f7ff fcb8 	bl	8000eec <__aeabi_fdiv>
 800157c:	4603      	mov	r3, r0
 800157e:	461a      	mov	r2, r3
 8001580:	4b30      	ldr	r3, [pc, #192]	; (8001644 <MPU_readProcessedData+0x134>)
 8001582:	609a      	str	r2, [r3, #8]

    // Compensate for gyro offset
    sensorData.gx = rawData.gx - gyroCal.x;
 8001584:	4b2d      	ldr	r3, [pc, #180]	; (800163c <MPU_readProcessedData+0x12c>)
 8001586:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800158a:	4618      	mov	r0, r3
 800158c:	f7ff fba6 	bl	8000cdc <__aeabi_i2f>
 8001590:	4602      	mov	r2, r0
 8001592:	4b2d      	ldr	r3, [pc, #180]	; (8001648 <MPU_readProcessedData+0x138>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4619      	mov	r1, r3
 8001598:	4610      	mov	r0, r2
 800159a:	f7ff fae9 	bl	8000b70 <__aeabi_fsub>
 800159e:	4603      	mov	r3, r0
 80015a0:	461a      	mov	r2, r3
 80015a2:	4b28      	ldr	r3, [pc, #160]	; (8001644 <MPU_readProcessedData+0x134>)
 80015a4:	60da      	str	r2, [r3, #12]
    sensorData.gy = rawData.gy - gyroCal.y;
 80015a6:	4b25      	ldr	r3, [pc, #148]	; (800163c <MPU_readProcessedData+0x12c>)
 80015a8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80015ac:	4618      	mov	r0, r3
 80015ae:	f7ff fb95 	bl	8000cdc <__aeabi_i2f>
 80015b2:	4602      	mov	r2, r0
 80015b4:	4b24      	ldr	r3, [pc, #144]	; (8001648 <MPU_readProcessedData+0x138>)
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	4619      	mov	r1, r3
 80015ba:	4610      	mov	r0, r2
 80015bc:	f7ff fad8 	bl	8000b70 <__aeabi_fsub>
 80015c0:	4603      	mov	r3, r0
 80015c2:	461a      	mov	r2, r3
 80015c4:	4b1f      	ldr	r3, [pc, #124]	; (8001644 <MPU_readProcessedData+0x134>)
 80015c6:	611a      	str	r2, [r3, #16]
    sensorData.gz = rawData.gz - gyroCal.z;
 80015c8:	4b1c      	ldr	r3, [pc, #112]	; (800163c <MPU_readProcessedData+0x12c>)
 80015ca:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80015ce:	4618      	mov	r0, r3
 80015d0:	f7ff fb84 	bl	8000cdc <__aeabi_i2f>
 80015d4:	4602      	mov	r2, r0
 80015d6:	4b1c      	ldr	r3, [pc, #112]	; (8001648 <MPU_readProcessedData+0x138>)
 80015d8:	689b      	ldr	r3, [r3, #8]
 80015da:	4619      	mov	r1, r3
 80015dc:	4610      	mov	r0, r2
 80015de:	f7ff fac7 	bl	8000b70 <__aeabi_fsub>
 80015e2:	4603      	mov	r3, r0
 80015e4:	461a      	mov	r2, r3
 80015e6:	4b17      	ldr	r3, [pc, #92]	; (8001644 <MPU_readProcessedData+0x134>)
 80015e8:	615a      	str	r2, [r3, #20]

    // Convert gyro values to deg/s
    sensorData.gx /= (gScaleFactor);
 80015ea:	4b16      	ldr	r3, [pc, #88]	; (8001644 <MPU_readProcessedData+0x134>)
 80015ec:	68db      	ldr	r3, [r3, #12]
 80015ee:	4a17      	ldr	r2, [pc, #92]	; (800164c <MPU_readProcessedData+0x13c>)
 80015f0:	6812      	ldr	r2, [r2, #0]
 80015f2:	4611      	mov	r1, r2
 80015f4:	4618      	mov	r0, r3
 80015f6:	f7ff fc79 	bl	8000eec <__aeabi_fdiv>
 80015fa:	4603      	mov	r3, r0
 80015fc:	461a      	mov	r2, r3
 80015fe:	4b11      	ldr	r3, [pc, #68]	; (8001644 <MPU_readProcessedData+0x134>)
 8001600:	60da      	str	r2, [r3, #12]
    sensorData.gy /= (gScaleFactor);
 8001602:	4b10      	ldr	r3, [pc, #64]	; (8001644 <MPU_readProcessedData+0x134>)
 8001604:	691b      	ldr	r3, [r3, #16]
 8001606:	4a11      	ldr	r2, [pc, #68]	; (800164c <MPU_readProcessedData+0x13c>)
 8001608:	6812      	ldr	r2, [r2, #0]
 800160a:	4611      	mov	r1, r2
 800160c:	4618      	mov	r0, r3
 800160e:	f7ff fc6d 	bl	8000eec <__aeabi_fdiv>
 8001612:	4603      	mov	r3, r0
 8001614:	461a      	mov	r2, r3
 8001616:	4b0b      	ldr	r3, [pc, #44]	; (8001644 <MPU_readProcessedData+0x134>)
 8001618:	611a      	str	r2, [r3, #16]
    sensorData.gz /= (gScaleFactor);
 800161a:	4b0a      	ldr	r3, [pc, #40]	; (8001644 <MPU_readProcessedData+0x134>)
 800161c:	695b      	ldr	r3, [r3, #20]
 800161e:	4a0b      	ldr	r2, [pc, #44]	; (800164c <MPU_readProcessedData+0x13c>)
 8001620:	6812      	ldr	r2, [r2, #0]
 8001622:	4611      	mov	r1, r2
 8001624:	4618      	mov	r0, r3
 8001626:	f7ff fc61 	bl	8000eec <__aeabi_fdiv>
 800162a:	4603      	mov	r3, r0
 800162c:	461a      	mov	r2, r3
 800162e:	4b05      	ldr	r3, [pc, #20]	; (8001644 <MPU_readProcessedData+0x134>)
 8001630:	615a      	str	r2, [r3, #20]
}
 8001632:	bf00      	nop
 8001634:	3708      	adds	r7, #8
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	2000022c 	.word	0x2000022c
 8001640:	20000268 	.word	0x20000268
 8001644:	20000238 	.word	0x20000238
 8001648:	20000250 	.word	0x20000250
 800164c:	2000026c 	.word	0x2000026c

08001650 <calcError>:
#include <PIDController.h>


double calcError(double setPoint, double current){
 8001650:	b580      	push	{r7, lr}
 8001652:	b084      	sub	sp, #16
 8001654:	af00      	add	r7, sp, #0
 8001656:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800165a:	e9c7 2300 	strd	r2, r3, [r7]
    return setPoint - current;
 800165e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001662:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001666:	f7fe fd7f 	bl	8000168 <__aeabi_dsub>
 800166a:	4602      	mov	r2, r0
 800166c:	460b      	mov	r3, r1
  }
 800166e:	4610      	mov	r0, r2
 8001670:	4619      	mov	r1, r3
 8001672:	3710      	adds	r7, #16
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}

08001678 <compute>:

double compute(PIDController *pid, double setPoint,double current, long detaT){
 8001678:	b5b0      	push	{r4, r5, r7, lr}
 800167a:	b088      	sub	sp, #32
 800167c:	af00      	add	r7, sp, #0
 800167e:	60f8      	str	r0, [r7, #12]
 8001680:	e9c7 2300 	strd	r2, r3, [r7]
     /*Compute all the working error variables*/
     double error = calcError(setPoint, current);
 8001684:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001688:	e9d7 0100 	ldrd	r0, r1, [r7]
 800168c:	f7ff ffe0 	bl	8001650 <calcError>
 8001690:	e9c7 0106 	strd	r0, r1, [r7, #24]
     double dErr = (detaT==0)?0:calcError(error, pid->lastErr) / detaT;
 8001694:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001696:	2b00      	cmp	r3, #0
 8001698:	d014      	beq.n	80016c4 <compute+0x4c>
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80016a0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80016a4:	f7ff ffd4 	bl	8001650 <calcError>
 80016a8:	4604      	mov	r4, r0
 80016aa:	460d      	mov	r5, r1
 80016ac:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80016ae:	f7fe fea9 	bl	8000404 <__aeabi_i2d>
 80016b2:	4602      	mov	r2, r0
 80016b4:	460b      	mov	r3, r1
 80016b6:	4620      	mov	r0, r4
 80016b8:	4629      	mov	r1, r5
 80016ba:	f7ff f837 	bl	800072c <__aeabi_ddiv>
 80016be:	4602      	mov	r2, r0
 80016c0:	460b      	mov	r3, r1
 80016c2:	e003      	b.n	80016cc <compute+0x54>
 80016c4:	f04f 0200 	mov.w	r2, #0
 80016c8:	f04f 0300 	mov.w	r3, #0
 80016cc:	e9c7 2304 	strd	r2, r3, [r7, #16]

     /*Remember some variables for next time*/
     pid->lastErr = error;
 80016d0:	68f9      	ldr	r1, [r7, #12]
 80016d2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80016d6:	e9c1 2306 	strd	r2, r3, [r1, #24]
     pid->cumulErr += error * detaT;
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 80016e0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80016e2:	f7fe fe8f 	bl	8000404 <__aeabi_i2d>
 80016e6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80016ea:	f7fe fef5 	bl	80004d8 <__aeabi_dmul>
 80016ee:	4602      	mov	r2, r0
 80016f0:	460b      	mov	r3, r1
 80016f2:	4620      	mov	r0, r4
 80016f4:	4629      	mov	r1, r5
 80016f6:	f7fe fd39 	bl	800016c <__adddf3>
 80016fa:	4602      	mov	r2, r0
 80016fc:	460b      	mov	r3, r1
 80016fe:	68f9      	ldr	r1, [r7, #12]
 8001700:	e9c1 2308 	strd	r2, r3, [r1, #32]

     /*Compute PID Output*/
     pid->out  = pid->kp * error + pid->ki * pid->cumulErr +  pid->kd * dErr;
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	e9d3 0100 	ldrd	r0, r1, [r3]
 800170a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800170e:	f7fe fee3 	bl	80004d8 <__aeabi_dmul>
 8001712:	4602      	mov	r2, r0
 8001714:	460b      	mov	r3, r1
 8001716:	4614      	mov	r4, r2
 8001718:	461d      	mov	r5, r3
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8001726:	f7fe fed7 	bl	80004d8 <__aeabi_dmul>
 800172a:	4602      	mov	r2, r0
 800172c:	460b      	mov	r3, r1
 800172e:	4620      	mov	r0, r4
 8001730:	4629      	mov	r1, r5
 8001732:	f7fe fd1b 	bl	800016c <__adddf3>
 8001736:	4602      	mov	r2, r0
 8001738:	460b      	mov	r3, r1
 800173a:	4614      	mov	r4, r2
 800173c:	461d      	mov	r5, r3
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001744:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001748:	f7fe fec6 	bl	80004d8 <__aeabi_dmul>
 800174c:	4602      	mov	r2, r0
 800174e:	460b      	mov	r3, r1
 8001750:	4620      	mov	r0, r4
 8001752:	4629      	mov	r1, r5
 8001754:	f7fe fd0a 	bl	800016c <__adddf3>
 8001758:	4602      	mov	r2, r0
 800175a:	460b      	mov	r3, r1
 800175c:	68f9      	ldr	r1, [r7, #12]
 800175e:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
 	 if(pid->out > MAX_PID) pid->out   = MAX_PID;
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8001768:	f04f 0200 	mov.w	r2, #0
 800176c:	4b12      	ldr	r3, [pc, #72]	; (80017b8 <compute+0x140>)
 800176e:	f7ff f943 	bl	80009f8 <__aeabi_dcmpgt>
 8001772:	4603      	mov	r3, r0
 8001774:	2b00      	cmp	r3, #0
 8001776:	d006      	beq.n	8001786 <compute+0x10e>
 8001778:	68f9      	ldr	r1, [r7, #12]
 800177a:	f04f 0200 	mov.w	r2, #0
 800177e:	4b0e      	ldr	r3, [pc, #56]	; (80017b8 <compute+0x140>)
 8001780:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
 8001784:	e010      	b.n	80017a8 <compute+0x130>
 	 else if (pid->out  < MIN_PID)  pid->out = MIN_PID;
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 800178c:	f04f 0200 	mov.w	r2, #0
 8001790:	4b0a      	ldr	r3, [pc, #40]	; (80017bc <compute+0x144>)
 8001792:	f7ff f913 	bl	80009bc <__aeabi_dcmplt>
 8001796:	4603      	mov	r3, r0
 8001798:	2b00      	cmp	r3, #0
 800179a:	d005      	beq.n	80017a8 <compute+0x130>
 800179c:	68f9      	ldr	r1, [r7, #12]
 800179e:	f04f 0200 	mov.w	r2, #0
 80017a2:	4b06      	ldr	r3, [pc, #24]	; (80017bc <compute+0x144>)
 80017a4:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
     return pid->out;
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
  }
 80017ae:	4610      	mov	r0, r2
 80017b0:	4619      	mov	r1, r3
 80017b2:	3720      	adds	r7, #32
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bdb0      	pop	{r4, r5, r7, pc}
 80017b8:	40440000 	.word	0x40440000
 80017bc:	c0440000 	.word	0xc0440000

080017c0 <reset>:
void reset(PIDController *pid){
 80017c0:	b480      	push	{r7}
 80017c2:	b083      	sub	sp, #12
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]

	pid->lastErr=0; pid->cumulErr=0;pid->out=0;
 80017c8:	6879      	ldr	r1, [r7, #4]
 80017ca:	f04f 0200 	mov.w	r2, #0
 80017ce:	f04f 0300 	mov.w	r3, #0
 80017d2:	e9c1 2306 	strd	r2, r3, [r1, #24]
 80017d6:	6879      	ldr	r1, [r7, #4]
 80017d8:	f04f 0200 	mov.w	r2, #0
 80017dc:	f04f 0300 	mov.w	r3, #0
 80017e0:	e9c1 2308 	strd	r2, r3, [r1, #32]
 80017e4:	6879      	ldr	r1, [r7, #4]
 80017e6:	f04f 0200 	mov.w	r2, #0
 80017ea:	f04f 0300 	mov.w	r3, #0
 80017ee:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
  }
 80017f2:	bf00      	nop
 80017f4:	370c      	adds	r7, #12
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bc80      	pop	{r7}
 80017fa:	4770      	bx	lr

080017fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80017fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001800:	b089      	sub	sp, #36	; 0x24
 8001802:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001804:	f000 fe5a 	bl	80024bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001808:	f000 f8c4 	bl	8001994 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800180c:	f000 fa4c 	bl	8001ca8 <MX_GPIO_Init>
  MX_TIM1_Init();
 8001810:	f000 f934 	bl	8001a7c <MX_TIM1_Init>
  MX_I2C1_Init();
 8001814:	f000 f904 	bl	8001a20 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8001818:	f000 fa1c 	bl	8001c54 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 800181c:	f000 f9ce 	bl	8001bbc <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

// Check if IMU configured properly and block if it didn't
  if (MPU_begin(&hi2c1, AD0_LOW, AFSR_4G, GFSR_2000DPS, 0.98, 0.004) == TRUE)
 8001820:	4b4c      	ldr	r3, [pc, #304]	; (8001954 <main+0x158>)
 8001822:	9301      	str	r3, [sp, #4]
 8001824:	4b4c      	ldr	r3, [pc, #304]	; (8001958 <main+0x15c>)
 8001826:	9300      	str	r3, [sp, #0]
 8001828:	2303      	movs	r3, #3
 800182a:	2201      	movs	r2, #1
 800182c:	2168      	movs	r1, #104	; 0x68
 800182e:	484b      	ldr	r0, [pc, #300]	; (800195c <main+0x160>)
 8001830:	f7ff fc30 	bl	8001094 <MPU_begin>
 8001834:	4603      	mov	r3, r0
 8001836:	2b01      	cmp	r3, #1
 8001838:	d13b      	bne.n	80018b2 <main+0xb6>
  {
	    sprintf((char *)serialBuf, "SUCCESS!\r\n");
 800183a:	4949      	ldr	r1, [pc, #292]	; (8001960 <main+0x164>)
 800183c:	4849      	ldr	r0, [pc, #292]	; (8001964 <main+0x168>)
 800183e:	f004 fe11 	bl	8006464 <siprintf>
	    HAL_UART_Transmit(&huart2, serialBuf, strlen((char *)serialBuf), HAL_MAX_DELAY);
 8001842:	4848      	ldr	r0, [pc, #288]	; (8001964 <main+0x168>)
 8001844:	f7fe fc84 	bl	8000150 <strlen>
 8001848:	4603      	mov	r3, r0
 800184a:	b29a      	uxth	r2, r3
 800184c:	f04f 33ff 	mov.w	r3, #4294967295
 8001850:	4944      	ldr	r1, [pc, #272]	; (8001964 <main+0x168>)
 8001852:	4845      	ldr	r0, [pc, #276]	; (8001968 <main+0x16c>)
 8001854:	f003 fdf8 	bl	8005448 <HAL_UART_Transmit>
      HAL_Delay(500);
    }
  }

  // Calibrate the IMU
  sprintf((char *)serialBuf, "CALIBRATING...\r\n");
 8001858:	4944      	ldr	r1, [pc, #272]	; (800196c <main+0x170>)
 800185a:	4842      	ldr	r0, [pc, #264]	; (8001964 <main+0x168>)
 800185c:	f004 fe02 	bl	8006464 <siprintf>
  HAL_UART_Transmit(&huart2, serialBuf, strlen((char *)serialBuf), HAL_MAX_DELAY);
 8001860:	4840      	ldr	r0, [pc, #256]	; (8001964 <main+0x168>)
 8001862:	f7fe fc75 	bl	8000150 <strlen>
 8001866:	4603      	mov	r3, r0
 8001868:	b29a      	uxth	r2, r3
 800186a:	f04f 33ff 	mov.w	r3, #4294967295
 800186e:	493d      	ldr	r1, [pc, #244]	; (8001964 <main+0x168>)
 8001870:	483d      	ldr	r0, [pc, #244]	; (8001968 <main+0x16c>)
 8001872:	f003 fde9 	bl	8005448 <HAL_UART_Transmit>
  MPU_calibrateGyro(&hi2c1, 1500);
 8001876:	f240 51dc 	movw	r1, #1500	; 0x5dc
 800187a:	4838      	ldr	r0, [pc, #224]	; (800195c <main+0x160>)
 800187c:	f7ff fdd6 	bl	800142c <MPU_calibrateGyro>

  HAL_TIM_Base_Start_IT(&htim2);
 8001880:	483b      	ldr	r0, [pc, #236]	; (8001970 <main+0x174>)
 8001882:	f002 fe35 	bl	80044f0 <HAL_TIM_Base_Start_IT>

  TIM1->ARR = TIM1_PWM_FREQ_1000;
 8001886:	4b3b      	ldr	r3, [pc, #236]	; (8001974 <main+0x178>)
 8001888:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800188c:	62da      	str	r2, [r3, #44]	; 0x2c
  TIM1->CCR1 = TIM1_PWM_FREQ_1000 / 2;
 800188e:	4b39      	ldr	r3, [pc, #228]	; (8001974 <main+0x178>)
 8001890:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8001894:	635a      	str	r2, [r3, #52]	; 0x34
  HAL_TIM_Base_Start(&htim1);
 8001896:	4838      	ldr	r0, [pc, #224]	; (8001978 <main+0x17c>)
 8001898:	f002 fde0 	bl	800445c <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800189c:	2100      	movs	r1, #0
 800189e:	4836      	ldr	r0, [pc, #216]	; (8001978 <main+0x17c>)
 80018a0:	f002 fed0 	bl	8004644 <HAL_TIM_PWM_Start>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 80018a4:	2201      	movs	r2, #1
 80018a6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80018aa:	4834      	ldr	r0, [pc, #208]	; (800197c <main+0x180>)
 80018ac:	f001 f93a 	bl	8002b24 <HAL_GPIO_WritePin>
 80018b0:	e017      	b.n	80018e2 <main+0xe6>
    sprintf((char *)serialBuf, "ERROR!\r\n");
 80018b2:	4933      	ldr	r1, [pc, #204]	; (8001980 <main+0x184>)
 80018b4:	482b      	ldr	r0, [pc, #172]	; (8001964 <main+0x168>)
 80018b6:	f004 fdd5 	bl	8006464 <siprintf>
    HAL_UART_Transmit(&huart2, serialBuf, strlen((char *)serialBuf), HAL_MAX_DELAY);
 80018ba:	482a      	ldr	r0, [pc, #168]	; (8001964 <main+0x168>)
 80018bc:	f7fe fc48 	bl	8000150 <strlen>
 80018c0:	4603      	mov	r3, r0
 80018c2:	b29a      	uxth	r2, r3
 80018c4:	f04f 33ff 	mov.w	r3, #4294967295
 80018c8:	4926      	ldr	r1, [pc, #152]	; (8001964 <main+0x168>)
 80018ca:	4827      	ldr	r0, [pc, #156]	; (8001968 <main+0x16c>)
 80018cc:	f003 fdbc 	bl	8005448 <HAL_UART_Transmit>
      HAL_GPIO_TogglePin(LED_PORT, LED_PIN);
 80018d0:	2102      	movs	r1, #2
 80018d2:	482a      	ldr	r0, [pc, #168]	; (800197c <main+0x180>)
 80018d4:	f001 f93e 	bl	8002b54 <HAL_GPIO_TogglePin>
      HAL_Delay(500);
 80018d8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80018dc:	f000 fe50 	bl	8002580 <HAL_Delay>
      HAL_GPIO_TogglePin(LED_PORT, LED_PIN);
 80018e0:	e7f6      	b.n	80018d0 <main+0xd4>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	    sprintf((char *)serialBuf, "%.1f,%.1f,%.1f,%.4f,%i\r\n", sensorData.gx, sensorData.gy, sensorData.gz, pidOut, j);
 80018e2:	4b28      	ldr	r3, [pc, #160]	; (8001984 <main+0x188>)
 80018e4:	68db      	ldr	r3, [r3, #12]
 80018e6:	4618      	mov	r0, r3
 80018e8:	f7fe fd9e 	bl	8000428 <__aeabi_f2d>
 80018ec:	4680      	mov	r8, r0
 80018ee:	4689      	mov	r9, r1
 80018f0:	4b24      	ldr	r3, [pc, #144]	; (8001984 <main+0x188>)
 80018f2:	691b      	ldr	r3, [r3, #16]
 80018f4:	4618      	mov	r0, r3
 80018f6:	f7fe fd97 	bl	8000428 <__aeabi_f2d>
 80018fa:	4604      	mov	r4, r0
 80018fc:	460d      	mov	r5, r1
 80018fe:	4b21      	ldr	r3, [pc, #132]	; (8001984 <main+0x188>)
 8001900:	695b      	ldr	r3, [r3, #20]
 8001902:	4618      	mov	r0, r3
 8001904:	f7fe fd90 	bl	8000428 <__aeabi_f2d>
 8001908:	4b1f      	ldr	r3, [pc, #124]	; (8001988 <main+0x18c>)
 800190a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800190e:	4e1f      	ldr	r6, [pc, #124]	; (800198c <main+0x190>)
 8001910:	6836      	ldr	r6, [r6, #0]
 8001912:	9606      	str	r6, [sp, #24]
 8001914:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001918:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800191c:	e9cd 4500 	strd	r4, r5, [sp]
 8001920:	4642      	mov	r2, r8
 8001922:	464b      	mov	r3, r9
 8001924:	491a      	ldr	r1, [pc, #104]	; (8001990 <main+0x194>)
 8001926:	480f      	ldr	r0, [pc, #60]	; (8001964 <main+0x168>)
 8001928:	f004 fd9c 	bl	8006464 <siprintf>
	    HAL_UART_Transmit(&huart2, serialBuf, strlen((char *)serialBuf), HAL_MAX_DELAY);
 800192c:	480d      	ldr	r0, [pc, #52]	; (8001964 <main+0x168>)
 800192e:	f7fe fc0f 	bl	8000150 <strlen>
 8001932:	4603      	mov	r3, r0
 8001934:	b29a      	uxth	r2, r3
 8001936:	f04f 33ff 	mov.w	r3, #4294967295
 800193a:	490a      	ldr	r1, [pc, #40]	; (8001964 <main+0x168>)
 800193c:	480a      	ldr	r0, [pc, #40]	; (8001968 <main+0x16c>)
 800193e:	f003 fd83 	bl	8005448 <HAL_UART_Transmit>
	    motorControl(pidOut);
 8001942:	4b11      	ldr	r3, [pc, #68]	; (8001988 <main+0x18c>)
 8001944:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001948:	4610      	mov	r0, r2
 800194a:	4619      	mov	r1, r3
 800194c:	f000 fa4c 	bl	8001de8 <motorControl>
	    sprintf((char *)serialBuf, "%.1f,%.1f,%.1f,%.4f,%i\r\n", sensorData.gx, sensorData.gy, sensorData.gz, pidOut, j);
 8001950:	e7c7      	b.n	80018e2 <main+0xe6>
 8001952:	bf00      	nop
 8001954:	3b83126f 	.word	0x3b83126f
 8001958:	3f7ae148 	.word	0x3f7ae148
 800195c:	20000270 	.word	0x20000270
 8001960:	08009ff8 	.word	0x08009ff8
 8001964:	20000398 	.word	0x20000398
 8001968:	20000354 	.word	0x20000354
 800196c:	0800a010 	.word	0x0800a010
 8001970:	2000030c 	.word	0x2000030c
 8001974:	40012c00 	.word	0x40012c00
 8001978:	200002c4 	.word	0x200002c4
 800197c:	40010800 	.word	0x40010800
 8001980:	0800a004 	.word	0x0800a004
 8001984:	20000238 	.word	0x20000238
 8001988:	20000408 	.word	0x20000408
 800198c:	20000400 	.word	0x20000400
 8001990:	0800a024 	.word	0x0800a024

08001994 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b090      	sub	sp, #64	; 0x40
 8001998:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800199a:	f107 0318 	add.w	r3, r7, #24
 800199e:	2228      	movs	r2, #40	; 0x28
 80019a0:	2100      	movs	r1, #0
 80019a2:	4618      	mov	r0, r3
 80019a4:	f003 fee4 	bl	8005770 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019a8:	1d3b      	adds	r3, r7, #4
 80019aa:	2200      	movs	r2, #0
 80019ac:	601a      	str	r2, [r3, #0]
 80019ae:	605a      	str	r2, [r3, #4]
 80019b0:	609a      	str	r2, [r3, #8]
 80019b2:	60da      	str	r2, [r3, #12]
 80019b4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80019b6:	2301      	movs	r3, #1
 80019b8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80019ba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80019be:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80019c0:	2300      	movs	r3, #0
 80019c2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80019c4:	2301      	movs	r3, #1
 80019c6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019c8:	2302      	movs	r3, #2
 80019ca:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80019cc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80019d0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80019d2:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80019d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019d8:	f107 0318 	add.w	r3, r7, #24
 80019dc:	4618      	mov	r0, r3
 80019de:	f002 f8d3 	bl	8003b88 <HAL_RCC_OscConfig>
 80019e2:	4603      	mov	r3, r0
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d001      	beq.n	80019ec <SystemClock_Config+0x58>
  {
    Error_Handler();
 80019e8:	f000 fb0c 	bl	8002004 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019ec:	230f      	movs	r3, #15
 80019ee:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80019f0:	2302      	movs	r3, #2
 80019f2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019f4:	2300      	movs	r3, #0
 80019f6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80019f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80019fc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80019fe:	2300      	movs	r3, #0
 8001a00:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001a02:	1d3b      	adds	r3, r7, #4
 8001a04:	2102      	movs	r1, #2
 8001a06:	4618      	mov	r0, r3
 8001a08:	f002 fb40 	bl	800408c <HAL_RCC_ClockConfig>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d001      	beq.n	8001a16 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001a12:	f000 faf7 	bl	8002004 <Error_Handler>
  }
}
 8001a16:	bf00      	nop
 8001a18:	3740      	adds	r7, #64	; 0x40
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}
	...

08001a20 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001a24:	4b12      	ldr	r3, [pc, #72]	; (8001a70 <MX_I2C1_Init+0x50>)
 8001a26:	4a13      	ldr	r2, [pc, #76]	; (8001a74 <MX_I2C1_Init+0x54>)
 8001a28:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001a2a:	4b11      	ldr	r3, [pc, #68]	; (8001a70 <MX_I2C1_Init+0x50>)
 8001a2c:	4a12      	ldr	r2, [pc, #72]	; (8001a78 <MX_I2C1_Init+0x58>)
 8001a2e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001a30:	4b0f      	ldr	r3, [pc, #60]	; (8001a70 <MX_I2C1_Init+0x50>)
 8001a32:	2200      	movs	r2, #0
 8001a34:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001a36:	4b0e      	ldr	r3, [pc, #56]	; (8001a70 <MX_I2C1_Init+0x50>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a3c:	4b0c      	ldr	r3, [pc, #48]	; (8001a70 <MX_I2C1_Init+0x50>)
 8001a3e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001a42:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a44:	4b0a      	ldr	r3, [pc, #40]	; (8001a70 <MX_I2C1_Init+0x50>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001a4a:	4b09      	ldr	r3, [pc, #36]	; (8001a70 <MX_I2C1_Init+0x50>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a50:	4b07      	ldr	r3, [pc, #28]	; (8001a70 <MX_I2C1_Init+0x50>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a56:	4b06      	ldr	r3, [pc, #24]	; (8001a70 <MX_I2C1_Init+0x50>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001a5c:	4804      	ldr	r0, [pc, #16]	; (8001a70 <MX_I2C1_Init+0x50>)
 8001a5e:	f001 f893 	bl	8002b88 <HAL_I2C_Init>
 8001a62:	4603      	mov	r3, r0
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d001      	beq.n	8001a6c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001a68:	f000 facc 	bl	8002004 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001a6c:	bf00      	nop
 8001a6e:	bd80      	pop	{r7, pc}
 8001a70:	20000270 	.word	0x20000270
 8001a74:	40005400 	.word	0x40005400
 8001a78:	000186a0 	.word	0x000186a0

08001a7c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b096      	sub	sp, #88	; 0x58
 8001a80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a82:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001a86:	2200      	movs	r2, #0
 8001a88:	601a      	str	r2, [r3, #0]
 8001a8a:	605a      	str	r2, [r3, #4]
 8001a8c:	609a      	str	r2, [r3, #8]
 8001a8e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a90:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001a94:	2200      	movs	r2, #0
 8001a96:	601a      	str	r2, [r3, #0]
 8001a98:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	601a      	str	r2, [r3, #0]
 8001aa2:	605a      	str	r2, [r3, #4]
 8001aa4:	609a      	str	r2, [r3, #8]
 8001aa6:	60da      	str	r2, [r3, #12]
 8001aa8:	611a      	str	r2, [r3, #16]
 8001aaa:	615a      	str	r2, [r3, #20]
 8001aac:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001aae:	1d3b      	adds	r3, r7, #4
 8001ab0:	2220      	movs	r2, #32
 8001ab2:	2100      	movs	r1, #0
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f003 fe5b 	bl	8005770 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001aba:	4b3e      	ldr	r3, [pc, #248]	; (8001bb4 <MX_TIM1_Init+0x138>)
 8001abc:	4a3e      	ldr	r2, [pc, #248]	; (8001bb8 <MX_TIM1_Init+0x13c>)
 8001abe:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 8001ac0:	4b3c      	ldr	r3, [pc, #240]	; (8001bb4 <MX_TIM1_Init+0x138>)
 8001ac2:	2247      	movs	r2, #71	; 0x47
 8001ac4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ac6:	4b3b      	ldr	r3, [pc, #236]	; (8001bb4 <MX_TIM1_Init+0x138>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 3001-1;
 8001acc:	4b39      	ldr	r3, [pc, #228]	; (8001bb4 <MX_TIM1_Init+0x138>)
 8001ace:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001ad2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ad4:	4b37      	ldr	r3, [pc, #220]	; (8001bb4 <MX_TIM1_Init+0x138>)
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001ada:	4b36      	ldr	r3, [pc, #216]	; (8001bb4 <MX_TIM1_Init+0x138>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ae0:	4b34      	ldr	r3, [pc, #208]	; (8001bb4 <MX_TIM1_Init+0x138>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001ae6:	4833      	ldr	r0, [pc, #204]	; (8001bb4 <MX_TIM1_Init+0x138>)
 8001ae8:	f002 fc68 	bl	80043bc <HAL_TIM_Base_Init>
 8001aec:	4603      	mov	r3, r0
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d001      	beq.n	8001af6 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001af2:	f000 fa87 	bl	8002004 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001af6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001afa:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001afc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001b00:	4619      	mov	r1, r3
 8001b02:	482c      	ldr	r0, [pc, #176]	; (8001bb4 <MX_TIM1_Init+0x138>)
 8001b04:	f003 f806 	bl	8004b14 <HAL_TIM_ConfigClockSource>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d001      	beq.n	8001b12 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001b0e:	f000 fa79 	bl	8002004 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001b12:	4828      	ldr	r0, [pc, #160]	; (8001bb4 <MX_TIM1_Init+0x138>)
 8001b14:	f002 fd3e 	bl	8004594 <HAL_TIM_PWM_Init>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d001      	beq.n	8001b22 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001b1e:	f000 fa71 	bl	8002004 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b22:	2300      	movs	r3, #0
 8001b24:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b26:	2300      	movs	r3, #0
 8001b28:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001b2a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001b2e:	4619      	mov	r1, r3
 8001b30:	4820      	ldr	r0, [pc, #128]	; (8001bb4 <MX_TIM1_Init+0x138>)
 8001b32:	f003 fb7b 	bl	800522c <HAL_TIMEx_MasterConfigSynchronization>
 8001b36:	4603      	mov	r3, r0
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d001      	beq.n	8001b40 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001b3c:	f000 fa62 	bl	8002004 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b40:	2360      	movs	r3, #96	; 0x60
 8001b42:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001b44:	2300      	movs	r3, #0
 8001b46:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b50:	2300      	movs	r3, #0
 8001b52:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001b54:	2300      	movs	r3, #0
 8001b56:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b60:	2200      	movs	r2, #0
 8001b62:	4619      	mov	r1, r3
 8001b64:	4813      	ldr	r0, [pc, #76]	; (8001bb4 <MX_TIM1_Init+0x138>)
 8001b66:	f002 ff17 	bl	8004998 <HAL_TIM_PWM_ConfigChannel>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d001      	beq.n	8001b74 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8001b70:	f000 fa48 	bl	8002004 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001b74:	2300      	movs	r3, #0
 8001b76:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001b80:	2300      	movs	r3, #0
 8001b82:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001b84:	2300      	movs	r3, #0
 8001b86:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001b88:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b8c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001b92:	1d3b      	adds	r3, r7, #4
 8001b94:	4619      	mov	r1, r3
 8001b96:	4807      	ldr	r0, [pc, #28]	; (8001bb4 <MX_TIM1_Init+0x138>)
 8001b98:	f003 fba6 	bl	80052e8 <HAL_TIMEx_ConfigBreakDeadTime>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d001      	beq.n	8001ba6 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8001ba2:	f000 fa2f 	bl	8002004 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001ba6:	4803      	ldr	r0, [pc, #12]	; (8001bb4 <MX_TIM1_Init+0x138>)
 8001ba8:	f000 fae2 	bl	8002170 <HAL_TIM_MspPostInit>

}
 8001bac:	bf00      	nop
 8001bae:	3758      	adds	r7, #88	; 0x58
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bd80      	pop	{r7, pc}
 8001bb4:	200002c4 	.word	0x200002c4
 8001bb8:	40012c00 	.word	0x40012c00

08001bbc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b086      	sub	sp, #24
 8001bc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001bc2:	f107 0308 	add.w	r3, r7, #8
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	601a      	str	r2, [r3, #0]
 8001bca:	605a      	str	r2, [r3, #4]
 8001bcc:	609a      	str	r2, [r3, #8]
 8001bce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bd0:	463b      	mov	r3, r7
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	601a      	str	r2, [r3, #0]
 8001bd6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001bd8:	4b1d      	ldr	r3, [pc, #116]	; (8001c50 <MX_TIM2_Init+0x94>)
 8001bda:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001bde:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7200-1;
 8001be0:	4b1b      	ldr	r3, [pc, #108]	; (8001c50 <MX_TIM2_Init+0x94>)
 8001be2:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8001be6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001be8:	4b19      	ldr	r3, [pc, #100]	; (8001c50 <MX_TIM2_Init+0x94>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 40-1;
 8001bee:	4b18      	ldr	r3, [pc, #96]	; (8001c50 <MX_TIM2_Init+0x94>)
 8001bf0:	2227      	movs	r2, #39	; 0x27
 8001bf2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bf4:	4b16      	ldr	r3, [pc, #88]	; (8001c50 <MX_TIM2_Init+0x94>)
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bfa:	4b15      	ldr	r3, [pc, #84]	; (8001c50 <MX_TIM2_Init+0x94>)
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001c00:	4813      	ldr	r0, [pc, #76]	; (8001c50 <MX_TIM2_Init+0x94>)
 8001c02:	f002 fbdb 	bl	80043bc <HAL_TIM_Base_Init>
 8001c06:	4603      	mov	r3, r0
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d001      	beq.n	8001c10 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001c0c:	f000 f9fa 	bl	8002004 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c10:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c14:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001c16:	f107 0308 	add.w	r3, r7, #8
 8001c1a:	4619      	mov	r1, r3
 8001c1c:	480c      	ldr	r0, [pc, #48]	; (8001c50 <MX_TIM2_Init+0x94>)
 8001c1e:	f002 ff79 	bl	8004b14 <HAL_TIM_ConfigClockSource>
 8001c22:	4603      	mov	r3, r0
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d001      	beq.n	8001c2c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001c28:	f000 f9ec 	bl	8002004 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c30:	2300      	movs	r3, #0
 8001c32:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001c34:	463b      	mov	r3, r7
 8001c36:	4619      	mov	r1, r3
 8001c38:	4805      	ldr	r0, [pc, #20]	; (8001c50 <MX_TIM2_Init+0x94>)
 8001c3a:	f003 faf7 	bl	800522c <HAL_TIMEx_MasterConfigSynchronization>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d001      	beq.n	8001c48 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001c44:	f000 f9de 	bl	8002004 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001c48:	bf00      	nop
 8001c4a:	3718      	adds	r7, #24
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bd80      	pop	{r7, pc}
 8001c50:	2000030c 	.word	0x2000030c

08001c54 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001c58:	4b11      	ldr	r3, [pc, #68]	; (8001ca0 <MX_USART2_UART_Init+0x4c>)
 8001c5a:	4a12      	ldr	r2, [pc, #72]	; (8001ca4 <MX_USART2_UART_Init+0x50>)
 8001c5c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001c5e:	4b10      	ldr	r3, [pc, #64]	; (8001ca0 <MX_USART2_UART_Init+0x4c>)
 8001c60:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001c64:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001c66:	4b0e      	ldr	r3, [pc, #56]	; (8001ca0 <MX_USART2_UART_Init+0x4c>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001c6c:	4b0c      	ldr	r3, [pc, #48]	; (8001ca0 <MX_USART2_UART_Init+0x4c>)
 8001c6e:	2200      	movs	r2, #0
 8001c70:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001c72:	4b0b      	ldr	r3, [pc, #44]	; (8001ca0 <MX_USART2_UART_Init+0x4c>)
 8001c74:	2200      	movs	r2, #0
 8001c76:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001c78:	4b09      	ldr	r3, [pc, #36]	; (8001ca0 <MX_USART2_UART_Init+0x4c>)
 8001c7a:	220c      	movs	r2, #12
 8001c7c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c7e:	4b08      	ldr	r3, [pc, #32]	; (8001ca0 <MX_USART2_UART_Init+0x4c>)
 8001c80:	2200      	movs	r2, #0
 8001c82:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c84:	4b06      	ldr	r3, [pc, #24]	; (8001ca0 <MX_USART2_UART_Init+0x4c>)
 8001c86:	2200      	movs	r2, #0
 8001c88:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001c8a:	4805      	ldr	r0, [pc, #20]	; (8001ca0 <MX_USART2_UART_Init+0x4c>)
 8001c8c:	f003 fb8f 	bl	80053ae <HAL_UART_Init>
 8001c90:	4603      	mov	r3, r0
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d001      	beq.n	8001c9a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001c96:	f000 f9b5 	bl	8002004 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001c9a:	bf00      	nop
 8001c9c:	bd80      	pop	{r7, pc}
 8001c9e:	bf00      	nop
 8001ca0:	20000354 	.word	0x20000354
 8001ca4:	40004400 	.word	0x40004400

08001ca8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b088      	sub	sp, #32
 8001cac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cae:	f107 0310 	add.w	r3, r7, #16
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	601a      	str	r2, [r3, #0]
 8001cb6:	605a      	str	r2, [r3, #4]
 8001cb8:	609a      	str	r2, [r3, #8]
 8001cba:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001cbc:	4b2b      	ldr	r3, [pc, #172]	; (8001d6c <MX_GPIO_Init+0xc4>)
 8001cbe:	699b      	ldr	r3, [r3, #24]
 8001cc0:	4a2a      	ldr	r2, [pc, #168]	; (8001d6c <MX_GPIO_Init+0xc4>)
 8001cc2:	f043 0320 	orr.w	r3, r3, #32
 8001cc6:	6193      	str	r3, [r2, #24]
 8001cc8:	4b28      	ldr	r3, [pc, #160]	; (8001d6c <MX_GPIO_Init+0xc4>)
 8001cca:	699b      	ldr	r3, [r3, #24]
 8001ccc:	f003 0320 	and.w	r3, r3, #32
 8001cd0:	60fb      	str	r3, [r7, #12]
 8001cd2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cd4:	4b25      	ldr	r3, [pc, #148]	; (8001d6c <MX_GPIO_Init+0xc4>)
 8001cd6:	699b      	ldr	r3, [r3, #24]
 8001cd8:	4a24      	ldr	r2, [pc, #144]	; (8001d6c <MX_GPIO_Init+0xc4>)
 8001cda:	f043 0304 	orr.w	r3, r3, #4
 8001cde:	6193      	str	r3, [r2, #24]
 8001ce0:	4b22      	ldr	r3, [pc, #136]	; (8001d6c <MX_GPIO_Init+0xc4>)
 8001ce2:	699b      	ldr	r3, [r3, #24]
 8001ce4:	f003 0304 	and.w	r3, r3, #4
 8001ce8:	60bb      	str	r3, [r7, #8]
 8001cea:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cec:	4b1f      	ldr	r3, [pc, #124]	; (8001d6c <MX_GPIO_Init+0xc4>)
 8001cee:	699b      	ldr	r3, [r3, #24]
 8001cf0:	4a1e      	ldr	r2, [pc, #120]	; (8001d6c <MX_GPIO_Init+0xc4>)
 8001cf2:	f043 0308 	orr.w	r3, r3, #8
 8001cf6:	6193      	str	r3, [r2, #24]
 8001cf8:	4b1c      	ldr	r3, [pc, #112]	; (8001d6c <MX_GPIO_Init+0xc4>)
 8001cfa:	699b      	ldr	r3, [r3, #24]
 8001cfc:	f003 0308 	and.w	r3, r3, #8
 8001d00:	607b      	str	r3, [r7, #4]
 8001d02:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 8001d04:	2200      	movs	r2, #0
 8001d06:	f240 6102 	movw	r1, #1538	; 0x602
 8001d0a:	4819      	ldr	r0, [pc, #100]	; (8001d70 <MX_GPIO_Init+0xc8>)
 8001d0c:	f000 ff0a 	bl	8002b24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001d10:	2302      	movs	r3, #2
 8001d12:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d14:	2301      	movs	r3, #1
 8001d16:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d1c:	2303      	movs	r3, #3
 8001d1e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d20:	f107 0310 	add.w	r3, r7, #16
 8001d24:	4619      	mov	r1, r3
 8001d26:	4812      	ldr	r0, [pc, #72]	; (8001d70 <MX_GPIO_Init+0xc8>)
 8001d28:	f000 fd78 	bl	800281c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001d2c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001d30:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d32:	2301      	movs	r3, #1
 8001d34:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d36:	2300      	movs	r3, #0
 8001d38:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d3a:	2302      	movs	r3, #2
 8001d3c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d3e:	f107 0310 	add.w	r3, r7, #16
 8001d42:	4619      	mov	r1, r3
 8001d44:	480a      	ldr	r0, [pc, #40]	; (8001d70 <MX_GPIO_Init+0xc8>)
 8001d46:	f000 fd69 	bl	800281c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001d4a:	2320      	movs	r3, #32
 8001d4c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001d4e:	4b09      	ldr	r3, [pc, #36]	; (8001d74 <MX_GPIO_Init+0xcc>)
 8001d50:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d52:	2300      	movs	r3, #0
 8001d54:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d56:	f107 0310 	add.w	r3, r7, #16
 8001d5a:	4619      	mov	r1, r3
 8001d5c:	4806      	ldr	r0, [pc, #24]	; (8001d78 <MX_GPIO_Init+0xd0>)
 8001d5e:	f000 fd5d 	bl	800281c <HAL_GPIO_Init>

}
 8001d62:	bf00      	nop
 8001d64:	3720      	adds	r7, #32
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	bf00      	nop
 8001d6c:	40021000 	.word	0x40021000
 8001d70:	40010800 	.word	0x40010800
 8001d74:	10110000 	.word	0x10110000
 8001d78:	40010c00 	.word	0x40010c00

08001d7c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b086      	sub	sp, #24
 8001d80:	af04      	add	r7, sp, #16
 8001d82:	6078      	str	r0, [r7, #4]
	// Check if timer has triggered and update attitude
  if (htim == &htim2)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	4a12      	ldr	r2, [pc, #72]	; (8001dd0 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8001d88:	4293      	cmp	r3, r2
 8001d8a:	d11d      	bne.n	8001dc8 <HAL_TIM_PeriodElapsedCallback+0x4c>
  {
      HAL_ResumeTick();
 8001d8c:	f000 fc2a 	bl	80025e4 <HAL_ResumeTick>
      MPU_readProcessedData(&hi2c1);
 8001d90:	4810      	ldr	r0, [pc, #64]	; (8001dd4 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8001d92:	f7ff fbbd 	bl	8001510 <MPU_readProcessedData>

	  pidOut=compute(&pid, 0,sensorData.gz,0.004);
 8001d96:	4b10      	ldr	r3, [pc, #64]	; (8001dd8 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8001d98:	695b      	ldr	r3, [r3, #20]
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f7fe fb44 	bl	8000428 <__aeabi_f2d>
 8001da0:	4602      	mov	r2, r0
 8001da2:	460b      	mov	r3, r1
 8001da4:	2100      	movs	r1, #0
 8001da6:	9102      	str	r1, [sp, #8]
 8001da8:	e9cd 2300 	strd	r2, r3, [sp]
 8001dac:	f04f 0200 	mov.w	r2, #0
 8001db0:	f04f 0300 	mov.w	r3, #0
 8001db4:	4809      	ldr	r0, [pc, #36]	; (8001ddc <HAL_TIM_PeriodElapsedCallback+0x60>)
 8001db6:	f7ff fc5f 	bl	8001678 <compute>
 8001dba:	4602      	mov	r2, r0
 8001dbc:	460b      	mov	r3, r1
 8001dbe:	4908      	ldr	r1, [pc, #32]	; (8001de0 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8001dc0:	e9c1 2300 	strd	r2, r3, [r1]
      HAL_SuspendTick();
 8001dc4:	f000 fc00 	bl	80025c8 <HAL_SuspendTick>
  }
}
 8001dc8:	bf00      	nop
 8001dca:	3708      	adds	r7, #8
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}
 8001dd0:	2000030c 	.word	0x2000030c
 8001dd4:	20000270 	.word	0x20000270
 8001dd8:	20000238 	.word	0x20000238
 8001ddc:	20000000 	.word	0x20000000
 8001de0:	20000408 	.word	0x20000408
 8001de4:	00000000 	.word	0x00000000

08001de8 <motorControl>:

void motorControl(double pidOut)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b084      	sub	sp, #16
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	e9c7 0100 	strd	r0, r1, [r7]
	double motorSpeed;

	j++;
 8001df2:	4b7b      	ldr	r3, [pc, #492]	; (8001fe0 <motorControl+0x1f8>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	3301      	adds	r3, #1
 8001df8:	4a79      	ldr	r2, [pc, #484]	; (8001fe0 <motorControl+0x1f8>)
 8001dfa:	6013      	str	r3, [r2, #0]
	if (pidOut > 0.05){
 8001dfc:	a372      	add	r3, pc, #456	; (adr r3, 8001fc8 <motorControl+0x1e0>)
 8001dfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e02:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001e06:	f7fe fdf7 	bl	80009f8 <__aeabi_dcmpgt>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d056      	beq.n	8001ebe <motorControl+0xd6>
		motorSpeed = pidOut * 100;
 8001e10:	f04f 0200 	mov.w	r2, #0
 8001e14:	4b73      	ldr	r3, [pc, #460]	; (8001fe4 <motorControl+0x1fc>)
 8001e16:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001e1a:	f7fe fb5d 	bl	80004d8 <__aeabi_dmul>
 8001e1e:	4602      	mov	r2, r0
 8001e20:	460b      	mov	r3, r1
 8001e22:	e9c7 2302 	strd	r2, r3, [r7, #8]
		if(motorSpeed > MAX_SPEED) motorSpeed = MAX_SPEED;
 8001e26:	f04f 0200 	mov.w	r2, #0
 8001e2a:	4b6f      	ldr	r3, [pc, #444]	; (8001fe8 <motorControl+0x200>)
 8001e2c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001e30:	f7fe fde2 	bl	80009f8 <__aeabi_dcmpgt>
 8001e34:	4603      	mov	r3, r0
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d005      	beq.n	8001e46 <motorControl+0x5e>
 8001e3a:	f04f 0200 	mov.w	r2, #0
 8001e3e:	4b6a      	ldr	r3, [pc, #424]	; (8001fe8 <motorControl+0x200>)
 8001e40:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8001e44:	e00e      	b.n	8001e64 <motorControl+0x7c>
		else if (motorSpeed < MIN_SPEED) motorSpeed = MIN_SPEED;
 8001e46:	f04f 0200 	mov.w	r2, #0
 8001e4a:	4b68      	ldr	r3, [pc, #416]	; (8001fec <motorControl+0x204>)
 8001e4c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001e50:	f7fe fdb4 	bl	80009bc <__aeabi_dcmplt>
 8001e54:	4603      	mov	r3, r0
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d004      	beq.n	8001e64 <motorControl+0x7c>
 8001e5a:	f04f 0200 	mov.w	r2, #0
 8001e5e:	4b63      	ldr	r3, [pc, #396]	; (8001fec <motorControl+0x204>)
 8001e60:	e9c7 2302 	strd	r2, r3, [r7, #8]

		TIM1->ARR = (uint16_t)((1e06 / motorSpeed) * 3) ;
 8001e64:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001e68:	a159      	add	r1, pc, #356	; (adr r1, 8001fd0 <motorControl+0x1e8>)
 8001e6a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001e6e:	f7fe fc5d 	bl	800072c <__aeabi_ddiv>
 8001e72:	4602      	mov	r2, r0
 8001e74:	460b      	mov	r3, r1
 8001e76:	4610      	mov	r0, r2
 8001e78:	4619      	mov	r1, r3
 8001e7a:	f04f 0200 	mov.w	r2, #0
 8001e7e:	4b5c      	ldr	r3, [pc, #368]	; (8001ff0 <motorControl+0x208>)
 8001e80:	f7fe fb2a 	bl	80004d8 <__aeabi_dmul>
 8001e84:	4602      	mov	r2, r0
 8001e86:	460b      	mov	r3, r1
 8001e88:	4610      	mov	r0, r2
 8001e8a:	4619      	mov	r1, r3
 8001e8c:	f7fe fdfc 	bl	8000a88 <__aeabi_d2uiz>
 8001e90:	4603      	mov	r3, r0
 8001e92:	b29a      	uxth	r2, r3
 8001e94:	4b57      	ldr	r3, [pc, #348]	; (8001ff4 <motorControl+0x20c>)
 8001e96:	62da      	str	r2, [r3, #44]	; 0x2c
		TIM1->CCR1 =(uint16_t) (TIM1->ARR/2);
 8001e98:	4b56      	ldr	r3, [pc, #344]	; (8001ff4 <motorControl+0x20c>)
 8001e9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e9c:	085b      	lsrs	r3, r3, #1
 8001e9e:	b29a      	uxth	r2, r3
 8001ea0:	4b54      	ldr	r3, [pc, #336]	; (8001ff4 <motorControl+0x20c>)
 8001ea2:	635a      	str	r2, [r3, #52]	; 0x34

		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001eaa:	4853      	ldr	r0, [pc, #332]	; (8001ff8 <motorControl+0x210>)
 8001eac:	f000 fe3a 	bl	8002b24 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001eb6:	4850      	ldr	r0, [pc, #320]	; (8001ff8 <motorControl+0x210>)
 8001eb8:	f000 fe34 	bl	8002b24 <HAL_GPIO_WritePin>
				asm("NOP");
			}

		}

}
 8001ebc:	e07d      	b.n	8001fba <motorControl+0x1d2>
	else if (pidOut < -0.05){
 8001ebe:	a346      	add	r3, pc, #280	; (adr r3, 8001fd8 <motorControl+0x1f0>)
 8001ec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ec4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001ec8:	f7fe fd78 	bl	80009bc <__aeabi_dcmplt>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d059      	beq.n	8001f86 <motorControl+0x19e>
		motorSpeed = pidOut * 100 * (-1);
 8001ed2:	f04f 0200 	mov.w	r2, #0
 8001ed6:	4b43      	ldr	r3, [pc, #268]	; (8001fe4 <motorControl+0x1fc>)
 8001ed8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001edc:	f7fe fafc 	bl	80004d8 <__aeabi_dmul>
 8001ee0:	4602      	mov	r2, r0
 8001ee2:	460b      	mov	r3, r1
 8001ee4:	4611      	mov	r1, r2
 8001ee6:	60b9      	str	r1, [r7, #8]
 8001ee8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001eec:	60fb      	str	r3, [r7, #12]
		if(motorSpeed > MAX_SPEED) motorSpeed = MAX_SPEED;
 8001eee:	f04f 0200 	mov.w	r2, #0
 8001ef2:	4b3d      	ldr	r3, [pc, #244]	; (8001fe8 <motorControl+0x200>)
 8001ef4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001ef8:	f7fe fd7e 	bl	80009f8 <__aeabi_dcmpgt>
 8001efc:	4603      	mov	r3, r0
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d005      	beq.n	8001f0e <motorControl+0x126>
 8001f02:	f04f 0200 	mov.w	r2, #0
 8001f06:	4b38      	ldr	r3, [pc, #224]	; (8001fe8 <motorControl+0x200>)
 8001f08:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8001f0c:	e00e      	b.n	8001f2c <motorControl+0x144>
		else if (motorSpeed < MIN_SPEED) motorSpeed = MIN_SPEED;
 8001f0e:	f04f 0200 	mov.w	r2, #0
 8001f12:	4b36      	ldr	r3, [pc, #216]	; (8001fec <motorControl+0x204>)
 8001f14:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001f18:	f7fe fd50 	bl	80009bc <__aeabi_dcmplt>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d004      	beq.n	8001f2c <motorControl+0x144>
 8001f22:	f04f 0200 	mov.w	r2, #0
 8001f26:	4b31      	ldr	r3, [pc, #196]	; (8001fec <motorControl+0x204>)
 8001f28:	e9c7 2302 	strd	r2, r3, [r7, #8]
		TIM1->ARR = (uint16_t)((1e06 / motorSpeed) * 3) ;
 8001f2c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001f30:	a127      	add	r1, pc, #156	; (adr r1, 8001fd0 <motorControl+0x1e8>)
 8001f32:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001f36:	f7fe fbf9 	bl	800072c <__aeabi_ddiv>
 8001f3a:	4602      	mov	r2, r0
 8001f3c:	460b      	mov	r3, r1
 8001f3e:	4610      	mov	r0, r2
 8001f40:	4619      	mov	r1, r3
 8001f42:	f04f 0200 	mov.w	r2, #0
 8001f46:	4b2a      	ldr	r3, [pc, #168]	; (8001ff0 <motorControl+0x208>)
 8001f48:	f7fe fac6 	bl	80004d8 <__aeabi_dmul>
 8001f4c:	4602      	mov	r2, r0
 8001f4e:	460b      	mov	r3, r1
 8001f50:	4610      	mov	r0, r2
 8001f52:	4619      	mov	r1, r3
 8001f54:	f7fe fd98 	bl	8000a88 <__aeabi_d2uiz>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	b29a      	uxth	r2, r3
 8001f5c:	4b25      	ldr	r3, [pc, #148]	; (8001ff4 <motorControl+0x20c>)
 8001f5e:	62da      	str	r2, [r3, #44]	; 0x2c
		TIM1->CCR1 =(uint16_t) (TIM1->ARR/2);
 8001f60:	4b24      	ldr	r3, [pc, #144]	; (8001ff4 <motorControl+0x20c>)
 8001f62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f64:	085b      	lsrs	r3, r3, #1
 8001f66:	b29a      	uxth	r2, r3
 8001f68:	4b22      	ldr	r3, [pc, #136]	; (8001ff4 <motorControl+0x20c>)
 8001f6a:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001f72:	4821      	ldr	r0, [pc, #132]	; (8001ff8 <motorControl+0x210>)
 8001f74:	f000 fdd6 	bl	8002b24 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8001f78:	2201      	movs	r2, #1
 8001f7a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f7e:	481e      	ldr	r0, [pc, #120]	; (8001ff8 <motorControl+0x210>)
 8001f80:	f000 fdd0 	bl	8002b24 <HAL_GPIO_WritePin>
}
 8001f84:	e019      	b.n	8001fba <motorControl+0x1d2>
			i++;
 8001f86:	4b1d      	ldr	r3, [pc, #116]	; (8001ffc <motorControl+0x214>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	3301      	adds	r3, #1
 8001f8c:	4a1b      	ldr	r2, [pc, #108]	; (8001ffc <motorControl+0x214>)
 8001f8e:	6013      	str	r3, [r2, #0]
			if (i>=0){
 8001f90:	4b1a      	ldr	r3, [pc, #104]	; (8001ffc <motorControl+0x214>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	db0f      	blt.n	8001fb8 <motorControl+0x1d0>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 8001f98:	2201      	movs	r2, #1
 8001f9a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001f9e:	4816      	ldr	r0, [pc, #88]	; (8001ff8 <motorControl+0x210>)
 8001fa0:	f000 fdc0 	bl	8002b24 <HAL_GPIO_WritePin>
				reset(&pid);
 8001fa4:	4816      	ldr	r0, [pc, #88]	; (8002000 <motorControl+0x218>)
 8001fa6:	f7ff fc0b 	bl	80017c0 <reset>
				HAL_Delay(200);
 8001faa:	20c8      	movs	r0, #200	; 0xc8
 8001fac:	f000 fae8 	bl	8002580 <HAL_Delay>
				i=0;
 8001fb0:	4b12      	ldr	r3, [pc, #72]	; (8001ffc <motorControl+0x214>)
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	601a      	str	r2, [r3, #0]
}
 8001fb6:	e000      	b.n	8001fba <motorControl+0x1d2>
				asm("NOP");
 8001fb8:	bf00      	nop
}
 8001fba:	bf00      	nop
 8001fbc:	3710      	adds	r7, #16
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	bf00      	nop
 8001fc4:	f3af 8000 	nop.w
 8001fc8:	9999999a 	.word	0x9999999a
 8001fcc:	3fa99999 	.word	0x3fa99999
 8001fd0:	00000000 	.word	0x00000000
 8001fd4:	412e8480 	.word	0x412e8480
 8001fd8:	9999999a 	.word	0x9999999a
 8001fdc:	bfa99999 	.word	0xbfa99999
 8001fe0:	20000400 	.word	0x20000400
 8001fe4:	40590000 	.word	0x40590000
 8001fe8:	40af4000 	.word	0x40af4000
 8001fec:	3ff00000 	.word	0x3ff00000
 8001ff0:	40080000 	.word	0x40080000
 8001ff4:	40012c00 	.word	0x40012c00
 8001ff8:	40010800 	.word	0x40010800
 8001ffc:	200003fc 	.word	0x200003fc
 8002000:	20000000 	.word	0x20000000

08002004 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002004:	b480      	push	{r7}
 8002006:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002008:	b672      	cpsid	i
}
 800200a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800200c:	e7fe      	b.n	800200c <Error_Handler+0x8>
	...

08002010 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002010:	b480      	push	{r7}
 8002012:	b085      	sub	sp, #20
 8002014:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002016:	4b15      	ldr	r3, [pc, #84]	; (800206c <HAL_MspInit+0x5c>)
 8002018:	699b      	ldr	r3, [r3, #24]
 800201a:	4a14      	ldr	r2, [pc, #80]	; (800206c <HAL_MspInit+0x5c>)
 800201c:	f043 0301 	orr.w	r3, r3, #1
 8002020:	6193      	str	r3, [r2, #24]
 8002022:	4b12      	ldr	r3, [pc, #72]	; (800206c <HAL_MspInit+0x5c>)
 8002024:	699b      	ldr	r3, [r3, #24]
 8002026:	f003 0301 	and.w	r3, r3, #1
 800202a:	60bb      	str	r3, [r7, #8]
 800202c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800202e:	4b0f      	ldr	r3, [pc, #60]	; (800206c <HAL_MspInit+0x5c>)
 8002030:	69db      	ldr	r3, [r3, #28]
 8002032:	4a0e      	ldr	r2, [pc, #56]	; (800206c <HAL_MspInit+0x5c>)
 8002034:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002038:	61d3      	str	r3, [r2, #28]
 800203a:	4b0c      	ldr	r3, [pc, #48]	; (800206c <HAL_MspInit+0x5c>)
 800203c:	69db      	ldr	r3, [r3, #28]
 800203e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002042:	607b      	str	r3, [r7, #4]
 8002044:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002046:	4b0a      	ldr	r3, [pc, #40]	; (8002070 <HAL_MspInit+0x60>)
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	60fb      	str	r3, [r7, #12]
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002052:	60fb      	str	r3, [r7, #12]
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800205a:	60fb      	str	r3, [r7, #12]
 800205c:	4a04      	ldr	r2, [pc, #16]	; (8002070 <HAL_MspInit+0x60>)
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002062:	bf00      	nop
 8002064:	3714      	adds	r7, #20
 8002066:	46bd      	mov	sp, r7
 8002068:	bc80      	pop	{r7}
 800206a:	4770      	bx	lr
 800206c:	40021000 	.word	0x40021000
 8002070:	40010000 	.word	0x40010000

08002074 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b088      	sub	sp, #32
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800207c:	f107 0310 	add.w	r3, r7, #16
 8002080:	2200      	movs	r2, #0
 8002082:	601a      	str	r2, [r3, #0]
 8002084:	605a      	str	r2, [r3, #4]
 8002086:	609a      	str	r2, [r3, #8]
 8002088:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4a15      	ldr	r2, [pc, #84]	; (80020e4 <HAL_I2C_MspInit+0x70>)
 8002090:	4293      	cmp	r3, r2
 8002092:	d123      	bne.n	80020dc <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002094:	4b14      	ldr	r3, [pc, #80]	; (80020e8 <HAL_I2C_MspInit+0x74>)
 8002096:	699b      	ldr	r3, [r3, #24]
 8002098:	4a13      	ldr	r2, [pc, #76]	; (80020e8 <HAL_I2C_MspInit+0x74>)
 800209a:	f043 0308 	orr.w	r3, r3, #8
 800209e:	6193      	str	r3, [r2, #24]
 80020a0:	4b11      	ldr	r3, [pc, #68]	; (80020e8 <HAL_I2C_MspInit+0x74>)
 80020a2:	699b      	ldr	r3, [r3, #24]
 80020a4:	f003 0308 	and.w	r3, r3, #8
 80020a8:	60fb      	str	r3, [r7, #12]
 80020aa:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80020ac:	23c0      	movs	r3, #192	; 0xc0
 80020ae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80020b0:	2312      	movs	r3, #18
 80020b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80020b4:	2303      	movs	r3, #3
 80020b6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020b8:	f107 0310 	add.w	r3, r7, #16
 80020bc:	4619      	mov	r1, r3
 80020be:	480b      	ldr	r0, [pc, #44]	; (80020ec <HAL_I2C_MspInit+0x78>)
 80020c0:	f000 fbac 	bl	800281c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80020c4:	4b08      	ldr	r3, [pc, #32]	; (80020e8 <HAL_I2C_MspInit+0x74>)
 80020c6:	69db      	ldr	r3, [r3, #28]
 80020c8:	4a07      	ldr	r2, [pc, #28]	; (80020e8 <HAL_I2C_MspInit+0x74>)
 80020ca:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80020ce:	61d3      	str	r3, [r2, #28]
 80020d0:	4b05      	ldr	r3, [pc, #20]	; (80020e8 <HAL_I2C_MspInit+0x74>)
 80020d2:	69db      	ldr	r3, [r3, #28]
 80020d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020d8:	60bb      	str	r3, [r7, #8]
 80020da:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80020dc:	bf00      	nop
 80020de:	3720      	adds	r7, #32
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bd80      	pop	{r7, pc}
 80020e4:	40005400 	.word	0x40005400
 80020e8:	40021000 	.word	0x40021000
 80020ec:	40010c00 	.word	0x40010c00

080020f0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b084      	sub	sp, #16
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a1a      	ldr	r2, [pc, #104]	; (8002168 <HAL_TIM_Base_MspInit+0x78>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d114      	bne.n	800212c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002102:	4b1a      	ldr	r3, [pc, #104]	; (800216c <HAL_TIM_Base_MspInit+0x7c>)
 8002104:	699b      	ldr	r3, [r3, #24]
 8002106:	4a19      	ldr	r2, [pc, #100]	; (800216c <HAL_TIM_Base_MspInit+0x7c>)
 8002108:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800210c:	6193      	str	r3, [r2, #24]
 800210e:	4b17      	ldr	r3, [pc, #92]	; (800216c <HAL_TIM_Base_MspInit+0x7c>)
 8002110:	699b      	ldr	r3, [r3, #24]
 8002112:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002116:	60fb      	str	r3, [r7, #12]
 8002118:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 800211a:	2200      	movs	r2, #0
 800211c:	2100      	movs	r1, #0
 800211e:	2019      	movs	r0, #25
 8002120:	f000 fb45 	bl	80027ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8002124:	2019      	movs	r0, #25
 8002126:	f000 fb5e 	bl	80027e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800212a:	e018      	b.n	800215e <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM2)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002134:	d113      	bne.n	800215e <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002136:	4b0d      	ldr	r3, [pc, #52]	; (800216c <HAL_TIM_Base_MspInit+0x7c>)
 8002138:	69db      	ldr	r3, [r3, #28]
 800213a:	4a0c      	ldr	r2, [pc, #48]	; (800216c <HAL_TIM_Base_MspInit+0x7c>)
 800213c:	f043 0301 	orr.w	r3, r3, #1
 8002140:	61d3      	str	r3, [r2, #28]
 8002142:	4b0a      	ldr	r3, [pc, #40]	; (800216c <HAL_TIM_Base_MspInit+0x7c>)
 8002144:	69db      	ldr	r3, [r3, #28]
 8002146:	f003 0301 	and.w	r3, r3, #1
 800214a:	60bb      	str	r3, [r7, #8]
 800214c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800214e:	2200      	movs	r2, #0
 8002150:	2100      	movs	r1, #0
 8002152:	201c      	movs	r0, #28
 8002154:	f000 fb2b 	bl	80027ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002158:	201c      	movs	r0, #28
 800215a:	f000 fb44 	bl	80027e6 <HAL_NVIC_EnableIRQ>
}
 800215e:	bf00      	nop
 8002160:	3710      	adds	r7, #16
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}
 8002166:	bf00      	nop
 8002168:	40012c00 	.word	0x40012c00
 800216c:	40021000 	.word	0x40021000

08002170 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b088      	sub	sp, #32
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002178:	f107 0310 	add.w	r3, r7, #16
 800217c:	2200      	movs	r2, #0
 800217e:	601a      	str	r2, [r3, #0]
 8002180:	605a      	str	r2, [r3, #4]
 8002182:	609a      	str	r2, [r3, #8]
 8002184:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4a10      	ldr	r2, [pc, #64]	; (80021cc <HAL_TIM_MspPostInit+0x5c>)
 800218c:	4293      	cmp	r3, r2
 800218e:	d118      	bne.n	80021c2 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002190:	4b0f      	ldr	r3, [pc, #60]	; (80021d0 <HAL_TIM_MspPostInit+0x60>)
 8002192:	699b      	ldr	r3, [r3, #24]
 8002194:	4a0e      	ldr	r2, [pc, #56]	; (80021d0 <HAL_TIM_MspPostInit+0x60>)
 8002196:	f043 0304 	orr.w	r3, r3, #4
 800219a:	6193      	str	r3, [r2, #24]
 800219c:	4b0c      	ldr	r3, [pc, #48]	; (80021d0 <HAL_TIM_MspPostInit+0x60>)
 800219e:	699b      	ldr	r3, [r3, #24]
 80021a0:	f003 0304 	and.w	r3, r3, #4
 80021a4:	60fb      	str	r3, [r7, #12]
 80021a6:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80021a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80021ac:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021ae:	2302      	movs	r3, #2
 80021b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021b2:	2302      	movs	r3, #2
 80021b4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021b6:	f107 0310 	add.w	r3, r7, #16
 80021ba:	4619      	mov	r1, r3
 80021bc:	4805      	ldr	r0, [pc, #20]	; (80021d4 <HAL_TIM_MspPostInit+0x64>)
 80021be:	f000 fb2d 	bl	800281c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80021c2:	bf00      	nop
 80021c4:	3720      	adds	r7, #32
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}
 80021ca:	bf00      	nop
 80021cc:	40012c00 	.word	0x40012c00
 80021d0:	40021000 	.word	0x40021000
 80021d4:	40010800 	.word	0x40010800

080021d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b088      	sub	sp, #32
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021e0:	f107 0310 	add.w	r3, r7, #16
 80021e4:	2200      	movs	r2, #0
 80021e6:	601a      	str	r2, [r3, #0]
 80021e8:	605a      	str	r2, [r3, #4]
 80021ea:	609a      	str	r2, [r3, #8]
 80021ec:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4a1b      	ldr	r2, [pc, #108]	; (8002260 <HAL_UART_MspInit+0x88>)
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d12f      	bne.n	8002258 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80021f8:	4b1a      	ldr	r3, [pc, #104]	; (8002264 <HAL_UART_MspInit+0x8c>)
 80021fa:	69db      	ldr	r3, [r3, #28]
 80021fc:	4a19      	ldr	r2, [pc, #100]	; (8002264 <HAL_UART_MspInit+0x8c>)
 80021fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002202:	61d3      	str	r3, [r2, #28]
 8002204:	4b17      	ldr	r3, [pc, #92]	; (8002264 <HAL_UART_MspInit+0x8c>)
 8002206:	69db      	ldr	r3, [r3, #28]
 8002208:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800220c:	60fb      	str	r3, [r7, #12]
 800220e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002210:	4b14      	ldr	r3, [pc, #80]	; (8002264 <HAL_UART_MspInit+0x8c>)
 8002212:	699b      	ldr	r3, [r3, #24]
 8002214:	4a13      	ldr	r2, [pc, #76]	; (8002264 <HAL_UART_MspInit+0x8c>)
 8002216:	f043 0304 	orr.w	r3, r3, #4
 800221a:	6193      	str	r3, [r2, #24]
 800221c:	4b11      	ldr	r3, [pc, #68]	; (8002264 <HAL_UART_MspInit+0x8c>)
 800221e:	699b      	ldr	r3, [r3, #24]
 8002220:	f003 0304 	and.w	r3, r3, #4
 8002224:	60bb      	str	r3, [r7, #8]
 8002226:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002228:	2304      	movs	r3, #4
 800222a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800222c:	2302      	movs	r3, #2
 800222e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002230:	2303      	movs	r3, #3
 8002232:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002234:	f107 0310 	add.w	r3, r7, #16
 8002238:	4619      	mov	r1, r3
 800223a:	480b      	ldr	r0, [pc, #44]	; (8002268 <HAL_UART_MspInit+0x90>)
 800223c:	f000 faee 	bl	800281c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002240:	2308      	movs	r3, #8
 8002242:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002244:	2300      	movs	r3, #0
 8002246:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002248:	2300      	movs	r3, #0
 800224a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800224c:	f107 0310 	add.w	r3, r7, #16
 8002250:	4619      	mov	r1, r3
 8002252:	4805      	ldr	r0, [pc, #20]	; (8002268 <HAL_UART_MspInit+0x90>)
 8002254:	f000 fae2 	bl	800281c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002258:	bf00      	nop
 800225a:	3720      	adds	r7, #32
 800225c:	46bd      	mov	sp, r7
 800225e:	bd80      	pop	{r7, pc}
 8002260:	40004400 	.word	0x40004400
 8002264:	40021000 	.word	0x40021000
 8002268:	40010800 	.word	0x40010800

0800226c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800226c:	b480      	push	{r7}
 800226e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002270:	e7fe      	b.n	8002270 <NMI_Handler+0x4>

08002272 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002272:	b480      	push	{r7}
 8002274:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002276:	e7fe      	b.n	8002276 <HardFault_Handler+0x4>

08002278 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002278:	b480      	push	{r7}
 800227a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800227c:	e7fe      	b.n	800227c <MemManage_Handler+0x4>

0800227e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800227e:	b480      	push	{r7}
 8002280:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002282:	e7fe      	b.n	8002282 <BusFault_Handler+0x4>

08002284 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002284:	b480      	push	{r7}
 8002286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002288:	e7fe      	b.n	8002288 <UsageFault_Handler+0x4>

0800228a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800228a:	b480      	push	{r7}
 800228c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800228e:	bf00      	nop
 8002290:	46bd      	mov	sp, r7
 8002292:	bc80      	pop	{r7}
 8002294:	4770      	bx	lr

08002296 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002296:	b480      	push	{r7}
 8002298:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800229a:	bf00      	nop
 800229c:	46bd      	mov	sp, r7
 800229e:	bc80      	pop	{r7}
 80022a0:	4770      	bx	lr

080022a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80022a2:	b480      	push	{r7}
 80022a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80022a6:	bf00      	nop
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bc80      	pop	{r7}
 80022ac:	4770      	bx	lr

080022ae <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80022ae:	b580      	push	{r7, lr}
 80022b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80022b2:	f000 f949 	bl	8002548 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80022b6:	bf00      	nop
 80022b8:	bd80      	pop	{r7, pc}
	...

080022bc <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80022c0:	4802      	ldr	r0, [pc, #8]	; (80022cc <TIM1_UP_IRQHandler+0x10>)
 80022c2:	f002 fa61 	bl	8004788 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80022c6:	bf00      	nop
 80022c8:	bd80      	pop	{r7, pc}
 80022ca:	bf00      	nop
 80022cc:	200002c4 	.word	0x200002c4

080022d0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80022d4:	4802      	ldr	r0, [pc, #8]	; (80022e0 <TIM2_IRQHandler+0x10>)
 80022d6:	f002 fa57 	bl	8004788 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80022da:	bf00      	nop
 80022dc:	bd80      	pop	{r7, pc}
 80022de:	bf00      	nop
 80022e0:	2000030c 	.word	0x2000030c

080022e4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80022e4:	b480      	push	{r7}
 80022e6:	af00      	add	r7, sp, #0
	return 1;
 80022e8:	2301      	movs	r3, #1
}
 80022ea:	4618      	mov	r0, r3
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bc80      	pop	{r7}
 80022f0:	4770      	bx	lr

080022f2 <_kill>:

int _kill(int pid, int sig)
{
 80022f2:	b580      	push	{r7, lr}
 80022f4:	b082      	sub	sp, #8
 80022f6:	af00      	add	r7, sp, #0
 80022f8:	6078      	str	r0, [r7, #4]
 80022fa:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80022fc:	f003 fa0e 	bl	800571c <__errno>
 8002300:	4603      	mov	r3, r0
 8002302:	2216      	movs	r2, #22
 8002304:	601a      	str	r2, [r3, #0]
	return -1;
 8002306:	f04f 33ff 	mov.w	r3, #4294967295
}
 800230a:	4618      	mov	r0, r3
 800230c:	3708      	adds	r7, #8
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}

08002312 <_exit>:

void _exit (int status)
{
 8002312:	b580      	push	{r7, lr}
 8002314:	b082      	sub	sp, #8
 8002316:	af00      	add	r7, sp, #0
 8002318:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800231a:	f04f 31ff 	mov.w	r1, #4294967295
 800231e:	6878      	ldr	r0, [r7, #4]
 8002320:	f7ff ffe7 	bl	80022f2 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002324:	e7fe      	b.n	8002324 <_exit+0x12>

08002326 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002326:	b580      	push	{r7, lr}
 8002328:	b086      	sub	sp, #24
 800232a:	af00      	add	r7, sp, #0
 800232c:	60f8      	str	r0, [r7, #12]
 800232e:	60b9      	str	r1, [r7, #8]
 8002330:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002332:	2300      	movs	r3, #0
 8002334:	617b      	str	r3, [r7, #20]
 8002336:	e00a      	b.n	800234e <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002338:	f3af 8000 	nop.w
 800233c:	4601      	mov	r1, r0
 800233e:	68bb      	ldr	r3, [r7, #8]
 8002340:	1c5a      	adds	r2, r3, #1
 8002342:	60ba      	str	r2, [r7, #8]
 8002344:	b2ca      	uxtb	r2, r1
 8002346:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002348:	697b      	ldr	r3, [r7, #20]
 800234a:	3301      	adds	r3, #1
 800234c:	617b      	str	r3, [r7, #20]
 800234e:	697a      	ldr	r2, [r7, #20]
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	429a      	cmp	r2, r3
 8002354:	dbf0      	blt.n	8002338 <_read+0x12>
	}

return len;
 8002356:	687b      	ldr	r3, [r7, #4]
}
 8002358:	4618      	mov	r0, r3
 800235a:	3718      	adds	r7, #24
 800235c:	46bd      	mov	sp, r7
 800235e:	bd80      	pop	{r7, pc}

08002360 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b086      	sub	sp, #24
 8002364:	af00      	add	r7, sp, #0
 8002366:	60f8      	str	r0, [r7, #12]
 8002368:	60b9      	str	r1, [r7, #8]
 800236a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800236c:	2300      	movs	r3, #0
 800236e:	617b      	str	r3, [r7, #20]
 8002370:	e009      	b.n	8002386 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002372:	68bb      	ldr	r3, [r7, #8]
 8002374:	1c5a      	adds	r2, r3, #1
 8002376:	60ba      	str	r2, [r7, #8]
 8002378:	781b      	ldrb	r3, [r3, #0]
 800237a:	4618      	mov	r0, r3
 800237c:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002380:	697b      	ldr	r3, [r7, #20]
 8002382:	3301      	adds	r3, #1
 8002384:	617b      	str	r3, [r7, #20]
 8002386:	697a      	ldr	r2, [r7, #20]
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	429a      	cmp	r2, r3
 800238c:	dbf1      	blt.n	8002372 <_write+0x12>
	}
	return len;
 800238e:	687b      	ldr	r3, [r7, #4]
}
 8002390:	4618      	mov	r0, r3
 8002392:	3718      	adds	r7, #24
 8002394:	46bd      	mov	sp, r7
 8002396:	bd80      	pop	{r7, pc}

08002398 <_close>:

int _close(int file)
{
 8002398:	b480      	push	{r7}
 800239a:	b083      	sub	sp, #12
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
	return -1;
 80023a0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80023a4:	4618      	mov	r0, r3
 80023a6:	370c      	adds	r7, #12
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bc80      	pop	{r7}
 80023ac:	4770      	bx	lr

080023ae <_fstat>:


int _fstat(int file, struct stat *st)
{
 80023ae:	b480      	push	{r7}
 80023b0:	b083      	sub	sp, #12
 80023b2:	af00      	add	r7, sp, #0
 80023b4:	6078      	str	r0, [r7, #4]
 80023b6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80023be:	605a      	str	r2, [r3, #4]
	return 0;
 80023c0:	2300      	movs	r3, #0
}
 80023c2:	4618      	mov	r0, r3
 80023c4:	370c      	adds	r7, #12
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bc80      	pop	{r7}
 80023ca:	4770      	bx	lr

080023cc <_isatty>:

int _isatty(int file)
{
 80023cc:	b480      	push	{r7}
 80023ce:	b083      	sub	sp, #12
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
	return 1;
 80023d4:	2301      	movs	r3, #1
}
 80023d6:	4618      	mov	r0, r3
 80023d8:	370c      	adds	r7, #12
 80023da:	46bd      	mov	sp, r7
 80023dc:	bc80      	pop	{r7}
 80023de:	4770      	bx	lr

080023e0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80023e0:	b480      	push	{r7}
 80023e2:	b085      	sub	sp, #20
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	60f8      	str	r0, [r7, #12]
 80023e8:	60b9      	str	r1, [r7, #8]
 80023ea:	607a      	str	r2, [r7, #4]
	return 0;
 80023ec:	2300      	movs	r3, #0
}
 80023ee:	4618      	mov	r0, r3
 80023f0:	3714      	adds	r7, #20
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bc80      	pop	{r7}
 80023f6:	4770      	bx	lr

080023f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b086      	sub	sp, #24
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002400:	4a14      	ldr	r2, [pc, #80]	; (8002454 <_sbrk+0x5c>)
 8002402:	4b15      	ldr	r3, [pc, #84]	; (8002458 <_sbrk+0x60>)
 8002404:	1ad3      	subs	r3, r2, r3
 8002406:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002408:	697b      	ldr	r3, [r7, #20]
 800240a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800240c:	4b13      	ldr	r3, [pc, #76]	; (800245c <_sbrk+0x64>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d102      	bne.n	800241a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002414:	4b11      	ldr	r3, [pc, #68]	; (800245c <_sbrk+0x64>)
 8002416:	4a12      	ldr	r2, [pc, #72]	; (8002460 <_sbrk+0x68>)
 8002418:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800241a:	4b10      	ldr	r3, [pc, #64]	; (800245c <_sbrk+0x64>)
 800241c:	681a      	ldr	r2, [r3, #0]
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	4413      	add	r3, r2
 8002422:	693a      	ldr	r2, [r7, #16]
 8002424:	429a      	cmp	r2, r3
 8002426:	d207      	bcs.n	8002438 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002428:	f003 f978 	bl	800571c <__errno>
 800242c:	4603      	mov	r3, r0
 800242e:	220c      	movs	r2, #12
 8002430:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002432:	f04f 33ff 	mov.w	r3, #4294967295
 8002436:	e009      	b.n	800244c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002438:	4b08      	ldr	r3, [pc, #32]	; (800245c <_sbrk+0x64>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800243e:	4b07      	ldr	r3, [pc, #28]	; (800245c <_sbrk+0x64>)
 8002440:	681a      	ldr	r2, [r3, #0]
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	4413      	add	r3, r2
 8002446:	4a05      	ldr	r2, [pc, #20]	; (800245c <_sbrk+0x64>)
 8002448:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800244a:	68fb      	ldr	r3, [r7, #12]
}
 800244c:	4618      	mov	r0, r3
 800244e:	3718      	adds	r7, #24
 8002450:	46bd      	mov	sp, r7
 8002452:	bd80      	pop	{r7, pc}
 8002454:	20005000 	.word	0x20005000
 8002458:	00000400 	.word	0x00000400
 800245c:	20000410 	.word	0x20000410
 8002460:	20000428 	.word	0x20000428

08002464 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002464:	b480      	push	{r7}
 8002466:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002468:	bf00      	nop
 800246a:	46bd      	mov	sp, r7
 800246c:	bc80      	pop	{r7}
 800246e:	4770      	bx	lr

08002470 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002470:	480c      	ldr	r0, [pc, #48]	; (80024a4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002472:	490d      	ldr	r1, [pc, #52]	; (80024a8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002474:	4a0d      	ldr	r2, [pc, #52]	; (80024ac <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002476:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002478:	e002      	b.n	8002480 <LoopCopyDataInit>

0800247a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800247a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800247c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800247e:	3304      	adds	r3, #4

08002480 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002480:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002482:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002484:	d3f9      	bcc.n	800247a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002486:	4a0a      	ldr	r2, [pc, #40]	; (80024b0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002488:	4c0a      	ldr	r4, [pc, #40]	; (80024b4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800248a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800248c:	e001      	b.n	8002492 <LoopFillZerobss>

0800248e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800248e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002490:	3204      	adds	r2, #4

08002492 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002492:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002494:	d3fb      	bcc.n	800248e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002496:	f7ff ffe5 	bl	8002464 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800249a:	f003 f945 	bl	8005728 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800249e:	f7ff f9ad 	bl	80017fc <main>
  bx lr
 80024a2:	4770      	bx	lr
  ldr r0, =_sdata
 80024a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80024a8:	20000210 	.word	0x20000210
  ldr r2, =_sidata
 80024ac:	0800a514 	.word	0x0800a514
  ldr r2, =_sbss
 80024b0:	20000210 	.word	0x20000210
  ldr r4, =_ebss
 80024b4:	20000428 	.word	0x20000428

080024b8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80024b8:	e7fe      	b.n	80024b8 <ADC1_2_IRQHandler>
	...

080024bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80024c0:	4b08      	ldr	r3, [pc, #32]	; (80024e4 <HAL_Init+0x28>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4a07      	ldr	r2, [pc, #28]	; (80024e4 <HAL_Init+0x28>)
 80024c6:	f043 0310 	orr.w	r3, r3, #16
 80024ca:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024cc:	2003      	movs	r0, #3
 80024ce:	f000 f963 	bl	8002798 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80024d2:	200f      	movs	r0, #15
 80024d4:	f000 f808 	bl	80024e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80024d8:	f7ff fd9a 	bl	8002010 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80024dc:	2300      	movs	r3, #0
}
 80024de:	4618      	mov	r0, r3
 80024e0:	bd80      	pop	{r7, pc}
 80024e2:	bf00      	nop
 80024e4:	40022000 	.word	0x40022000

080024e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b082      	sub	sp, #8
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80024f0:	4b12      	ldr	r3, [pc, #72]	; (800253c <HAL_InitTick+0x54>)
 80024f2:	681a      	ldr	r2, [r3, #0]
 80024f4:	4b12      	ldr	r3, [pc, #72]	; (8002540 <HAL_InitTick+0x58>)
 80024f6:	781b      	ldrb	r3, [r3, #0]
 80024f8:	4619      	mov	r1, r3
 80024fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8002502:	fbb2 f3f3 	udiv	r3, r2, r3
 8002506:	4618      	mov	r0, r3
 8002508:	f000 f97b 	bl	8002802 <HAL_SYSTICK_Config>
 800250c:	4603      	mov	r3, r0
 800250e:	2b00      	cmp	r3, #0
 8002510:	d001      	beq.n	8002516 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002512:	2301      	movs	r3, #1
 8002514:	e00e      	b.n	8002534 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2b0f      	cmp	r3, #15
 800251a:	d80a      	bhi.n	8002532 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800251c:	2200      	movs	r2, #0
 800251e:	6879      	ldr	r1, [r7, #4]
 8002520:	f04f 30ff 	mov.w	r0, #4294967295
 8002524:	f000 f943 	bl	80027ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002528:	4a06      	ldr	r2, [pc, #24]	; (8002544 <HAL_InitTick+0x5c>)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800252e:	2300      	movs	r3, #0
 8002530:	e000      	b.n	8002534 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002532:	2301      	movs	r3, #1
}
 8002534:	4618      	mov	r0, r3
 8002536:	3708      	adds	r7, #8
 8002538:	46bd      	mov	sp, r7
 800253a:	bd80      	pop	{r7, pc}
 800253c:	20000030 	.word	0x20000030
 8002540:	20000038 	.word	0x20000038
 8002544:	20000034 	.word	0x20000034

08002548 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002548:	b480      	push	{r7}
 800254a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800254c:	4b05      	ldr	r3, [pc, #20]	; (8002564 <HAL_IncTick+0x1c>)
 800254e:	781b      	ldrb	r3, [r3, #0]
 8002550:	461a      	mov	r2, r3
 8002552:	4b05      	ldr	r3, [pc, #20]	; (8002568 <HAL_IncTick+0x20>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4413      	add	r3, r2
 8002558:	4a03      	ldr	r2, [pc, #12]	; (8002568 <HAL_IncTick+0x20>)
 800255a:	6013      	str	r3, [r2, #0]
}
 800255c:	bf00      	nop
 800255e:	46bd      	mov	sp, r7
 8002560:	bc80      	pop	{r7}
 8002562:	4770      	bx	lr
 8002564:	20000038 	.word	0x20000038
 8002568:	20000414 	.word	0x20000414

0800256c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800256c:	b480      	push	{r7}
 800256e:	af00      	add	r7, sp, #0
  return uwTick;
 8002570:	4b02      	ldr	r3, [pc, #8]	; (800257c <HAL_GetTick+0x10>)
 8002572:	681b      	ldr	r3, [r3, #0]
}
 8002574:	4618      	mov	r0, r3
 8002576:	46bd      	mov	sp, r7
 8002578:	bc80      	pop	{r7}
 800257a:	4770      	bx	lr
 800257c:	20000414 	.word	0x20000414

08002580 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b084      	sub	sp, #16
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002588:	f7ff fff0 	bl	800256c <HAL_GetTick>
 800258c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002598:	d005      	beq.n	80025a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800259a:	4b0a      	ldr	r3, [pc, #40]	; (80025c4 <HAL_Delay+0x44>)
 800259c:	781b      	ldrb	r3, [r3, #0]
 800259e:	461a      	mov	r2, r3
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	4413      	add	r3, r2
 80025a4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80025a6:	bf00      	nop
 80025a8:	f7ff ffe0 	bl	800256c <HAL_GetTick>
 80025ac:	4602      	mov	r2, r0
 80025ae:	68bb      	ldr	r3, [r7, #8]
 80025b0:	1ad3      	subs	r3, r2, r3
 80025b2:	68fa      	ldr	r2, [r7, #12]
 80025b4:	429a      	cmp	r2, r3
 80025b6:	d8f7      	bhi.n	80025a8 <HAL_Delay+0x28>
  {
  }
}
 80025b8:	bf00      	nop
 80025ba:	bf00      	nop
 80025bc:	3710      	adds	r7, #16
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}
 80025c2:	bf00      	nop
 80025c4:	20000038 	.word	0x20000038

080025c8 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 80025c8:	b480      	push	{r7}
 80025ca:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 80025cc:	4b04      	ldr	r3, [pc, #16]	; (80025e0 <HAL_SuspendTick+0x18>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4a03      	ldr	r2, [pc, #12]	; (80025e0 <HAL_SuspendTick+0x18>)
 80025d2:	f023 0302 	bic.w	r3, r3, #2
 80025d6:	6013      	str	r3, [r2, #0]
}
 80025d8:	bf00      	nop
 80025da:	46bd      	mov	sp, r7
 80025dc:	bc80      	pop	{r7}
 80025de:	4770      	bx	lr
 80025e0:	e000e010 	.word	0xe000e010

080025e4 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 80025e4:	b480      	push	{r7}
 80025e6:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 80025e8:	4b04      	ldr	r3, [pc, #16]	; (80025fc <HAL_ResumeTick+0x18>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a03      	ldr	r2, [pc, #12]	; (80025fc <HAL_ResumeTick+0x18>)
 80025ee:	f043 0302 	orr.w	r3, r3, #2
 80025f2:	6013      	str	r3, [r2, #0]
}
 80025f4:	bf00      	nop
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bc80      	pop	{r7}
 80025fa:	4770      	bx	lr
 80025fc:	e000e010 	.word	0xe000e010

08002600 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002600:	b480      	push	{r7}
 8002602:	b085      	sub	sp, #20
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	f003 0307 	and.w	r3, r3, #7
 800260e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002610:	4b0c      	ldr	r3, [pc, #48]	; (8002644 <__NVIC_SetPriorityGrouping+0x44>)
 8002612:	68db      	ldr	r3, [r3, #12]
 8002614:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002616:	68ba      	ldr	r2, [r7, #8]
 8002618:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800261c:	4013      	ands	r3, r2
 800261e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002624:	68bb      	ldr	r3, [r7, #8]
 8002626:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002628:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800262c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002630:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002632:	4a04      	ldr	r2, [pc, #16]	; (8002644 <__NVIC_SetPriorityGrouping+0x44>)
 8002634:	68bb      	ldr	r3, [r7, #8]
 8002636:	60d3      	str	r3, [r2, #12]
}
 8002638:	bf00      	nop
 800263a:	3714      	adds	r7, #20
 800263c:	46bd      	mov	sp, r7
 800263e:	bc80      	pop	{r7}
 8002640:	4770      	bx	lr
 8002642:	bf00      	nop
 8002644:	e000ed00 	.word	0xe000ed00

08002648 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002648:	b480      	push	{r7}
 800264a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800264c:	4b04      	ldr	r3, [pc, #16]	; (8002660 <__NVIC_GetPriorityGrouping+0x18>)
 800264e:	68db      	ldr	r3, [r3, #12]
 8002650:	0a1b      	lsrs	r3, r3, #8
 8002652:	f003 0307 	and.w	r3, r3, #7
}
 8002656:	4618      	mov	r0, r3
 8002658:	46bd      	mov	sp, r7
 800265a:	bc80      	pop	{r7}
 800265c:	4770      	bx	lr
 800265e:	bf00      	nop
 8002660:	e000ed00 	.word	0xe000ed00

08002664 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002664:	b480      	push	{r7}
 8002666:	b083      	sub	sp, #12
 8002668:	af00      	add	r7, sp, #0
 800266a:	4603      	mov	r3, r0
 800266c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800266e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002672:	2b00      	cmp	r3, #0
 8002674:	db0b      	blt.n	800268e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002676:	79fb      	ldrb	r3, [r7, #7]
 8002678:	f003 021f 	and.w	r2, r3, #31
 800267c:	4906      	ldr	r1, [pc, #24]	; (8002698 <__NVIC_EnableIRQ+0x34>)
 800267e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002682:	095b      	lsrs	r3, r3, #5
 8002684:	2001      	movs	r0, #1
 8002686:	fa00 f202 	lsl.w	r2, r0, r2
 800268a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800268e:	bf00      	nop
 8002690:	370c      	adds	r7, #12
 8002692:	46bd      	mov	sp, r7
 8002694:	bc80      	pop	{r7}
 8002696:	4770      	bx	lr
 8002698:	e000e100 	.word	0xe000e100

0800269c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800269c:	b480      	push	{r7}
 800269e:	b083      	sub	sp, #12
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	4603      	mov	r3, r0
 80026a4:	6039      	str	r1, [r7, #0]
 80026a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	db0a      	blt.n	80026c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	b2da      	uxtb	r2, r3
 80026b4:	490c      	ldr	r1, [pc, #48]	; (80026e8 <__NVIC_SetPriority+0x4c>)
 80026b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026ba:	0112      	lsls	r2, r2, #4
 80026bc:	b2d2      	uxtb	r2, r2
 80026be:	440b      	add	r3, r1
 80026c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80026c4:	e00a      	b.n	80026dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	b2da      	uxtb	r2, r3
 80026ca:	4908      	ldr	r1, [pc, #32]	; (80026ec <__NVIC_SetPriority+0x50>)
 80026cc:	79fb      	ldrb	r3, [r7, #7]
 80026ce:	f003 030f 	and.w	r3, r3, #15
 80026d2:	3b04      	subs	r3, #4
 80026d4:	0112      	lsls	r2, r2, #4
 80026d6:	b2d2      	uxtb	r2, r2
 80026d8:	440b      	add	r3, r1
 80026da:	761a      	strb	r2, [r3, #24]
}
 80026dc:	bf00      	nop
 80026de:	370c      	adds	r7, #12
 80026e0:	46bd      	mov	sp, r7
 80026e2:	bc80      	pop	{r7}
 80026e4:	4770      	bx	lr
 80026e6:	bf00      	nop
 80026e8:	e000e100 	.word	0xe000e100
 80026ec:	e000ed00 	.word	0xe000ed00

080026f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026f0:	b480      	push	{r7}
 80026f2:	b089      	sub	sp, #36	; 0x24
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	60f8      	str	r0, [r7, #12]
 80026f8:	60b9      	str	r1, [r7, #8]
 80026fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	f003 0307 	and.w	r3, r3, #7
 8002702:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002704:	69fb      	ldr	r3, [r7, #28]
 8002706:	f1c3 0307 	rsb	r3, r3, #7
 800270a:	2b04      	cmp	r3, #4
 800270c:	bf28      	it	cs
 800270e:	2304      	movcs	r3, #4
 8002710:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002712:	69fb      	ldr	r3, [r7, #28]
 8002714:	3304      	adds	r3, #4
 8002716:	2b06      	cmp	r3, #6
 8002718:	d902      	bls.n	8002720 <NVIC_EncodePriority+0x30>
 800271a:	69fb      	ldr	r3, [r7, #28]
 800271c:	3b03      	subs	r3, #3
 800271e:	e000      	b.n	8002722 <NVIC_EncodePriority+0x32>
 8002720:	2300      	movs	r3, #0
 8002722:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002724:	f04f 32ff 	mov.w	r2, #4294967295
 8002728:	69bb      	ldr	r3, [r7, #24]
 800272a:	fa02 f303 	lsl.w	r3, r2, r3
 800272e:	43da      	mvns	r2, r3
 8002730:	68bb      	ldr	r3, [r7, #8]
 8002732:	401a      	ands	r2, r3
 8002734:	697b      	ldr	r3, [r7, #20]
 8002736:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002738:	f04f 31ff 	mov.w	r1, #4294967295
 800273c:	697b      	ldr	r3, [r7, #20]
 800273e:	fa01 f303 	lsl.w	r3, r1, r3
 8002742:	43d9      	mvns	r1, r3
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002748:	4313      	orrs	r3, r2
         );
}
 800274a:	4618      	mov	r0, r3
 800274c:	3724      	adds	r7, #36	; 0x24
 800274e:	46bd      	mov	sp, r7
 8002750:	bc80      	pop	{r7}
 8002752:	4770      	bx	lr

08002754 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b082      	sub	sp, #8
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	3b01      	subs	r3, #1
 8002760:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002764:	d301      	bcc.n	800276a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002766:	2301      	movs	r3, #1
 8002768:	e00f      	b.n	800278a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800276a:	4a0a      	ldr	r2, [pc, #40]	; (8002794 <SysTick_Config+0x40>)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	3b01      	subs	r3, #1
 8002770:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002772:	210f      	movs	r1, #15
 8002774:	f04f 30ff 	mov.w	r0, #4294967295
 8002778:	f7ff ff90 	bl	800269c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800277c:	4b05      	ldr	r3, [pc, #20]	; (8002794 <SysTick_Config+0x40>)
 800277e:	2200      	movs	r2, #0
 8002780:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002782:	4b04      	ldr	r3, [pc, #16]	; (8002794 <SysTick_Config+0x40>)
 8002784:	2207      	movs	r2, #7
 8002786:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002788:	2300      	movs	r3, #0
}
 800278a:	4618      	mov	r0, r3
 800278c:	3708      	adds	r7, #8
 800278e:	46bd      	mov	sp, r7
 8002790:	bd80      	pop	{r7, pc}
 8002792:	bf00      	nop
 8002794:	e000e010 	.word	0xe000e010

08002798 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b082      	sub	sp, #8
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80027a0:	6878      	ldr	r0, [r7, #4]
 80027a2:	f7ff ff2d 	bl	8002600 <__NVIC_SetPriorityGrouping>
}
 80027a6:	bf00      	nop
 80027a8:	3708      	adds	r7, #8
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}

080027ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80027ae:	b580      	push	{r7, lr}
 80027b0:	b086      	sub	sp, #24
 80027b2:	af00      	add	r7, sp, #0
 80027b4:	4603      	mov	r3, r0
 80027b6:	60b9      	str	r1, [r7, #8]
 80027b8:	607a      	str	r2, [r7, #4]
 80027ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80027bc:	2300      	movs	r3, #0
 80027be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80027c0:	f7ff ff42 	bl	8002648 <__NVIC_GetPriorityGrouping>
 80027c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027c6:	687a      	ldr	r2, [r7, #4]
 80027c8:	68b9      	ldr	r1, [r7, #8]
 80027ca:	6978      	ldr	r0, [r7, #20]
 80027cc:	f7ff ff90 	bl	80026f0 <NVIC_EncodePriority>
 80027d0:	4602      	mov	r2, r0
 80027d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027d6:	4611      	mov	r1, r2
 80027d8:	4618      	mov	r0, r3
 80027da:	f7ff ff5f 	bl	800269c <__NVIC_SetPriority>
}
 80027de:	bf00      	nop
 80027e0:	3718      	adds	r7, #24
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd80      	pop	{r7, pc}

080027e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027e6:	b580      	push	{r7, lr}
 80027e8:	b082      	sub	sp, #8
 80027ea:	af00      	add	r7, sp, #0
 80027ec:	4603      	mov	r3, r0
 80027ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80027f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027f4:	4618      	mov	r0, r3
 80027f6:	f7ff ff35 	bl	8002664 <__NVIC_EnableIRQ>
}
 80027fa:	bf00      	nop
 80027fc:	3708      	adds	r7, #8
 80027fe:	46bd      	mov	sp, r7
 8002800:	bd80      	pop	{r7, pc}

08002802 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002802:	b580      	push	{r7, lr}
 8002804:	b082      	sub	sp, #8
 8002806:	af00      	add	r7, sp, #0
 8002808:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800280a:	6878      	ldr	r0, [r7, #4]
 800280c:	f7ff ffa2 	bl	8002754 <SysTick_Config>
 8002810:	4603      	mov	r3, r0
}
 8002812:	4618      	mov	r0, r3
 8002814:	3708      	adds	r7, #8
 8002816:	46bd      	mov	sp, r7
 8002818:	bd80      	pop	{r7, pc}
	...

0800281c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800281c:	b480      	push	{r7}
 800281e:	b08b      	sub	sp, #44	; 0x2c
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
 8002824:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002826:	2300      	movs	r3, #0
 8002828:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800282a:	2300      	movs	r3, #0
 800282c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800282e:	e169      	b.n	8002b04 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002830:	2201      	movs	r2, #1
 8002832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002834:	fa02 f303 	lsl.w	r3, r2, r3
 8002838:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	69fa      	ldr	r2, [r7, #28]
 8002840:	4013      	ands	r3, r2
 8002842:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002844:	69ba      	ldr	r2, [r7, #24]
 8002846:	69fb      	ldr	r3, [r7, #28]
 8002848:	429a      	cmp	r2, r3
 800284a:	f040 8158 	bne.w	8002afe <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	4a9a      	ldr	r2, [pc, #616]	; (8002abc <HAL_GPIO_Init+0x2a0>)
 8002854:	4293      	cmp	r3, r2
 8002856:	d05e      	beq.n	8002916 <HAL_GPIO_Init+0xfa>
 8002858:	4a98      	ldr	r2, [pc, #608]	; (8002abc <HAL_GPIO_Init+0x2a0>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d875      	bhi.n	800294a <HAL_GPIO_Init+0x12e>
 800285e:	4a98      	ldr	r2, [pc, #608]	; (8002ac0 <HAL_GPIO_Init+0x2a4>)
 8002860:	4293      	cmp	r3, r2
 8002862:	d058      	beq.n	8002916 <HAL_GPIO_Init+0xfa>
 8002864:	4a96      	ldr	r2, [pc, #600]	; (8002ac0 <HAL_GPIO_Init+0x2a4>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d86f      	bhi.n	800294a <HAL_GPIO_Init+0x12e>
 800286a:	4a96      	ldr	r2, [pc, #600]	; (8002ac4 <HAL_GPIO_Init+0x2a8>)
 800286c:	4293      	cmp	r3, r2
 800286e:	d052      	beq.n	8002916 <HAL_GPIO_Init+0xfa>
 8002870:	4a94      	ldr	r2, [pc, #592]	; (8002ac4 <HAL_GPIO_Init+0x2a8>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d869      	bhi.n	800294a <HAL_GPIO_Init+0x12e>
 8002876:	4a94      	ldr	r2, [pc, #592]	; (8002ac8 <HAL_GPIO_Init+0x2ac>)
 8002878:	4293      	cmp	r3, r2
 800287a:	d04c      	beq.n	8002916 <HAL_GPIO_Init+0xfa>
 800287c:	4a92      	ldr	r2, [pc, #584]	; (8002ac8 <HAL_GPIO_Init+0x2ac>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d863      	bhi.n	800294a <HAL_GPIO_Init+0x12e>
 8002882:	4a92      	ldr	r2, [pc, #584]	; (8002acc <HAL_GPIO_Init+0x2b0>)
 8002884:	4293      	cmp	r3, r2
 8002886:	d046      	beq.n	8002916 <HAL_GPIO_Init+0xfa>
 8002888:	4a90      	ldr	r2, [pc, #576]	; (8002acc <HAL_GPIO_Init+0x2b0>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d85d      	bhi.n	800294a <HAL_GPIO_Init+0x12e>
 800288e:	2b12      	cmp	r3, #18
 8002890:	d82a      	bhi.n	80028e8 <HAL_GPIO_Init+0xcc>
 8002892:	2b12      	cmp	r3, #18
 8002894:	d859      	bhi.n	800294a <HAL_GPIO_Init+0x12e>
 8002896:	a201      	add	r2, pc, #4	; (adr r2, 800289c <HAL_GPIO_Init+0x80>)
 8002898:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800289c:	08002917 	.word	0x08002917
 80028a0:	080028f1 	.word	0x080028f1
 80028a4:	08002903 	.word	0x08002903
 80028a8:	08002945 	.word	0x08002945
 80028ac:	0800294b 	.word	0x0800294b
 80028b0:	0800294b 	.word	0x0800294b
 80028b4:	0800294b 	.word	0x0800294b
 80028b8:	0800294b 	.word	0x0800294b
 80028bc:	0800294b 	.word	0x0800294b
 80028c0:	0800294b 	.word	0x0800294b
 80028c4:	0800294b 	.word	0x0800294b
 80028c8:	0800294b 	.word	0x0800294b
 80028cc:	0800294b 	.word	0x0800294b
 80028d0:	0800294b 	.word	0x0800294b
 80028d4:	0800294b 	.word	0x0800294b
 80028d8:	0800294b 	.word	0x0800294b
 80028dc:	0800294b 	.word	0x0800294b
 80028e0:	080028f9 	.word	0x080028f9
 80028e4:	0800290d 	.word	0x0800290d
 80028e8:	4a79      	ldr	r2, [pc, #484]	; (8002ad0 <HAL_GPIO_Init+0x2b4>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d013      	beq.n	8002916 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80028ee:	e02c      	b.n	800294a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	68db      	ldr	r3, [r3, #12]
 80028f4:	623b      	str	r3, [r7, #32]
          break;
 80028f6:	e029      	b.n	800294c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	68db      	ldr	r3, [r3, #12]
 80028fc:	3304      	adds	r3, #4
 80028fe:	623b      	str	r3, [r7, #32]
          break;
 8002900:	e024      	b.n	800294c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	68db      	ldr	r3, [r3, #12]
 8002906:	3308      	adds	r3, #8
 8002908:	623b      	str	r3, [r7, #32]
          break;
 800290a:	e01f      	b.n	800294c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	68db      	ldr	r3, [r3, #12]
 8002910:	330c      	adds	r3, #12
 8002912:	623b      	str	r3, [r7, #32]
          break;
 8002914:	e01a      	b.n	800294c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	689b      	ldr	r3, [r3, #8]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d102      	bne.n	8002924 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800291e:	2304      	movs	r3, #4
 8002920:	623b      	str	r3, [r7, #32]
          break;
 8002922:	e013      	b.n	800294c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	689b      	ldr	r3, [r3, #8]
 8002928:	2b01      	cmp	r3, #1
 800292a:	d105      	bne.n	8002938 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800292c:	2308      	movs	r3, #8
 800292e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	69fa      	ldr	r2, [r7, #28]
 8002934:	611a      	str	r2, [r3, #16]
          break;
 8002936:	e009      	b.n	800294c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002938:	2308      	movs	r3, #8
 800293a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	69fa      	ldr	r2, [r7, #28]
 8002940:	615a      	str	r2, [r3, #20]
          break;
 8002942:	e003      	b.n	800294c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002944:	2300      	movs	r3, #0
 8002946:	623b      	str	r3, [r7, #32]
          break;
 8002948:	e000      	b.n	800294c <HAL_GPIO_Init+0x130>
          break;
 800294a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800294c:	69bb      	ldr	r3, [r7, #24]
 800294e:	2bff      	cmp	r3, #255	; 0xff
 8002950:	d801      	bhi.n	8002956 <HAL_GPIO_Init+0x13a>
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	e001      	b.n	800295a <HAL_GPIO_Init+0x13e>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	3304      	adds	r3, #4
 800295a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800295c:	69bb      	ldr	r3, [r7, #24]
 800295e:	2bff      	cmp	r3, #255	; 0xff
 8002960:	d802      	bhi.n	8002968 <HAL_GPIO_Init+0x14c>
 8002962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002964:	009b      	lsls	r3, r3, #2
 8002966:	e002      	b.n	800296e <HAL_GPIO_Init+0x152>
 8002968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800296a:	3b08      	subs	r3, #8
 800296c:	009b      	lsls	r3, r3, #2
 800296e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002970:	697b      	ldr	r3, [r7, #20]
 8002972:	681a      	ldr	r2, [r3, #0]
 8002974:	210f      	movs	r1, #15
 8002976:	693b      	ldr	r3, [r7, #16]
 8002978:	fa01 f303 	lsl.w	r3, r1, r3
 800297c:	43db      	mvns	r3, r3
 800297e:	401a      	ands	r2, r3
 8002980:	6a39      	ldr	r1, [r7, #32]
 8002982:	693b      	ldr	r3, [r7, #16]
 8002984:	fa01 f303 	lsl.w	r3, r1, r3
 8002988:	431a      	orrs	r2, r3
 800298a:	697b      	ldr	r3, [r7, #20]
 800298c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002996:	2b00      	cmp	r3, #0
 8002998:	f000 80b1 	beq.w	8002afe <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800299c:	4b4d      	ldr	r3, [pc, #308]	; (8002ad4 <HAL_GPIO_Init+0x2b8>)
 800299e:	699b      	ldr	r3, [r3, #24]
 80029a0:	4a4c      	ldr	r2, [pc, #304]	; (8002ad4 <HAL_GPIO_Init+0x2b8>)
 80029a2:	f043 0301 	orr.w	r3, r3, #1
 80029a6:	6193      	str	r3, [r2, #24]
 80029a8:	4b4a      	ldr	r3, [pc, #296]	; (8002ad4 <HAL_GPIO_Init+0x2b8>)
 80029aa:	699b      	ldr	r3, [r3, #24]
 80029ac:	f003 0301 	and.w	r3, r3, #1
 80029b0:	60bb      	str	r3, [r7, #8]
 80029b2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80029b4:	4a48      	ldr	r2, [pc, #288]	; (8002ad8 <HAL_GPIO_Init+0x2bc>)
 80029b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b8:	089b      	lsrs	r3, r3, #2
 80029ba:	3302      	adds	r3, #2
 80029bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029c0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80029c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c4:	f003 0303 	and.w	r3, r3, #3
 80029c8:	009b      	lsls	r3, r3, #2
 80029ca:	220f      	movs	r2, #15
 80029cc:	fa02 f303 	lsl.w	r3, r2, r3
 80029d0:	43db      	mvns	r3, r3
 80029d2:	68fa      	ldr	r2, [r7, #12]
 80029d4:	4013      	ands	r3, r2
 80029d6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	4a40      	ldr	r2, [pc, #256]	; (8002adc <HAL_GPIO_Init+0x2c0>)
 80029dc:	4293      	cmp	r3, r2
 80029de:	d013      	beq.n	8002a08 <HAL_GPIO_Init+0x1ec>
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	4a3f      	ldr	r2, [pc, #252]	; (8002ae0 <HAL_GPIO_Init+0x2c4>)
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d00d      	beq.n	8002a04 <HAL_GPIO_Init+0x1e8>
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	4a3e      	ldr	r2, [pc, #248]	; (8002ae4 <HAL_GPIO_Init+0x2c8>)
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d007      	beq.n	8002a00 <HAL_GPIO_Init+0x1e4>
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	4a3d      	ldr	r2, [pc, #244]	; (8002ae8 <HAL_GPIO_Init+0x2cc>)
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d101      	bne.n	80029fc <HAL_GPIO_Init+0x1e0>
 80029f8:	2303      	movs	r3, #3
 80029fa:	e006      	b.n	8002a0a <HAL_GPIO_Init+0x1ee>
 80029fc:	2304      	movs	r3, #4
 80029fe:	e004      	b.n	8002a0a <HAL_GPIO_Init+0x1ee>
 8002a00:	2302      	movs	r3, #2
 8002a02:	e002      	b.n	8002a0a <HAL_GPIO_Init+0x1ee>
 8002a04:	2301      	movs	r3, #1
 8002a06:	e000      	b.n	8002a0a <HAL_GPIO_Init+0x1ee>
 8002a08:	2300      	movs	r3, #0
 8002a0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a0c:	f002 0203 	and.w	r2, r2, #3
 8002a10:	0092      	lsls	r2, r2, #2
 8002a12:	4093      	lsls	r3, r2
 8002a14:	68fa      	ldr	r2, [r7, #12]
 8002a16:	4313      	orrs	r3, r2
 8002a18:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002a1a:	492f      	ldr	r1, [pc, #188]	; (8002ad8 <HAL_GPIO_Init+0x2bc>)
 8002a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a1e:	089b      	lsrs	r3, r3, #2
 8002a20:	3302      	adds	r3, #2
 8002a22:	68fa      	ldr	r2, [r7, #12]
 8002a24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d006      	beq.n	8002a42 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002a34:	4b2d      	ldr	r3, [pc, #180]	; (8002aec <HAL_GPIO_Init+0x2d0>)
 8002a36:	681a      	ldr	r2, [r3, #0]
 8002a38:	492c      	ldr	r1, [pc, #176]	; (8002aec <HAL_GPIO_Init+0x2d0>)
 8002a3a:	69bb      	ldr	r3, [r7, #24]
 8002a3c:	4313      	orrs	r3, r2
 8002a3e:	600b      	str	r3, [r1, #0]
 8002a40:	e006      	b.n	8002a50 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002a42:	4b2a      	ldr	r3, [pc, #168]	; (8002aec <HAL_GPIO_Init+0x2d0>)
 8002a44:	681a      	ldr	r2, [r3, #0]
 8002a46:	69bb      	ldr	r3, [r7, #24]
 8002a48:	43db      	mvns	r3, r3
 8002a4a:	4928      	ldr	r1, [pc, #160]	; (8002aec <HAL_GPIO_Init+0x2d0>)
 8002a4c:	4013      	ands	r3, r2
 8002a4e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d006      	beq.n	8002a6a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002a5c:	4b23      	ldr	r3, [pc, #140]	; (8002aec <HAL_GPIO_Init+0x2d0>)
 8002a5e:	685a      	ldr	r2, [r3, #4]
 8002a60:	4922      	ldr	r1, [pc, #136]	; (8002aec <HAL_GPIO_Init+0x2d0>)
 8002a62:	69bb      	ldr	r3, [r7, #24]
 8002a64:	4313      	orrs	r3, r2
 8002a66:	604b      	str	r3, [r1, #4]
 8002a68:	e006      	b.n	8002a78 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002a6a:	4b20      	ldr	r3, [pc, #128]	; (8002aec <HAL_GPIO_Init+0x2d0>)
 8002a6c:	685a      	ldr	r2, [r3, #4]
 8002a6e:	69bb      	ldr	r3, [r7, #24]
 8002a70:	43db      	mvns	r3, r3
 8002a72:	491e      	ldr	r1, [pc, #120]	; (8002aec <HAL_GPIO_Init+0x2d0>)
 8002a74:	4013      	ands	r3, r2
 8002a76:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d006      	beq.n	8002a92 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002a84:	4b19      	ldr	r3, [pc, #100]	; (8002aec <HAL_GPIO_Init+0x2d0>)
 8002a86:	689a      	ldr	r2, [r3, #8]
 8002a88:	4918      	ldr	r1, [pc, #96]	; (8002aec <HAL_GPIO_Init+0x2d0>)
 8002a8a:	69bb      	ldr	r3, [r7, #24]
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	608b      	str	r3, [r1, #8]
 8002a90:	e006      	b.n	8002aa0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002a92:	4b16      	ldr	r3, [pc, #88]	; (8002aec <HAL_GPIO_Init+0x2d0>)
 8002a94:	689a      	ldr	r2, [r3, #8]
 8002a96:	69bb      	ldr	r3, [r7, #24]
 8002a98:	43db      	mvns	r3, r3
 8002a9a:	4914      	ldr	r1, [pc, #80]	; (8002aec <HAL_GPIO_Init+0x2d0>)
 8002a9c:	4013      	ands	r3, r2
 8002a9e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d021      	beq.n	8002af0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002aac:	4b0f      	ldr	r3, [pc, #60]	; (8002aec <HAL_GPIO_Init+0x2d0>)
 8002aae:	68da      	ldr	r2, [r3, #12]
 8002ab0:	490e      	ldr	r1, [pc, #56]	; (8002aec <HAL_GPIO_Init+0x2d0>)
 8002ab2:	69bb      	ldr	r3, [r7, #24]
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	60cb      	str	r3, [r1, #12]
 8002ab8:	e021      	b.n	8002afe <HAL_GPIO_Init+0x2e2>
 8002aba:	bf00      	nop
 8002abc:	10320000 	.word	0x10320000
 8002ac0:	10310000 	.word	0x10310000
 8002ac4:	10220000 	.word	0x10220000
 8002ac8:	10210000 	.word	0x10210000
 8002acc:	10120000 	.word	0x10120000
 8002ad0:	10110000 	.word	0x10110000
 8002ad4:	40021000 	.word	0x40021000
 8002ad8:	40010000 	.word	0x40010000
 8002adc:	40010800 	.word	0x40010800
 8002ae0:	40010c00 	.word	0x40010c00
 8002ae4:	40011000 	.word	0x40011000
 8002ae8:	40011400 	.word	0x40011400
 8002aec:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002af0:	4b0b      	ldr	r3, [pc, #44]	; (8002b20 <HAL_GPIO_Init+0x304>)
 8002af2:	68da      	ldr	r2, [r3, #12]
 8002af4:	69bb      	ldr	r3, [r7, #24]
 8002af6:	43db      	mvns	r3, r3
 8002af8:	4909      	ldr	r1, [pc, #36]	; (8002b20 <HAL_GPIO_Init+0x304>)
 8002afa:	4013      	ands	r3, r2
 8002afc:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b00:	3301      	adds	r3, #1
 8002b02:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	681a      	ldr	r2, [r3, #0]
 8002b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b0a:	fa22 f303 	lsr.w	r3, r2, r3
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	f47f ae8e 	bne.w	8002830 <HAL_GPIO_Init+0x14>
  }
}
 8002b14:	bf00      	nop
 8002b16:	bf00      	nop
 8002b18:	372c      	adds	r7, #44	; 0x2c
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bc80      	pop	{r7}
 8002b1e:	4770      	bx	lr
 8002b20:	40010400 	.word	0x40010400

08002b24 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b24:	b480      	push	{r7}
 8002b26:	b083      	sub	sp, #12
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
 8002b2c:	460b      	mov	r3, r1
 8002b2e:	807b      	strh	r3, [r7, #2]
 8002b30:	4613      	mov	r3, r2
 8002b32:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002b34:	787b      	ldrb	r3, [r7, #1]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d003      	beq.n	8002b42 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b3a:	887a      	ldrh	r2, [r7, #2]
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002b40:	e003      	b.n	8002b4a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002b42:	887b      	ldrh	r3, [r7, #2]
 8002b44:	041a      	lsls	r2, r3, #16
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	611a      	str	r2, [r3, #16]
}
 8002b4a:	bf00      	nop
 8002b4c:	370c      	adds	r7, #12
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bc80      	pop	{r7}
 8002b52:	4770      	bx	lr

08002b54 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002b54:	b480      	push	{r7}
 8002b56:	b085      	sub	sp, #20
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
 8002b5c:	460b      	mov	r3, r1
 8002b5e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	68db      	ldr	r3, [r3, #12]
 8002b64:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002b66:	887a      	ldrh	r2, [r7, #2]
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	4013      	ands	r3, r2
 8002b6c:	041a      	lsls	r2, r3, #16
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	43d9      	mvns	r1, r3
 8002b72:	887b      	ldrh	r3, [r7, #2]
 8002b74:	400b      	ands	r3, r1
 8002b76:	431a      	orrs	r2, r3
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	611a      	str	r2, [r3, #16]
}
 8002b7c:	bf00      	nop
 8002b7e:	3714      	adds	r7, #20
 8002b80:	46bd      	mov	sp, r7
 8002b82:	bc80      	pop	{r7}
 8002b84:	4770      	bx	lr
	...

08002b88 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b084      	sub	sp, #16
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d101      	bne.n	8002b9a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002b96:	2301      	movs	r3, #1
 8002b98:	e12b      	b.n	8002df2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ba0:	b2db      	uxtb	r3, r3
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d106      	bne.n	8002bb4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2200      	movs	r2, #0
 8002baa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002bae:	6878      	ldr	r0, [r7, #4]
 8002bb0:	f7ff fa60 	bl	8002074 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2224      	movs	r2, #36	; 0x24
 8002bb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	681a      	ldr	r2, [r3, #0]
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f022 0201 	bic.w	r2, r2, #1
 8002bca:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	681a      	ldr	r2, [r3, #0]
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002bda:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	681a      	ldr	r2, [r3, #0]
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002bea:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002bec:	f001 fba0 	bl	8004330 <HAL_RCC_GetPCLK1Freq>
 8002bf0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	4a81      	ldr	r2, [pc, #516]	; (8002dfc <HAL_I2C_Init+0x274>)
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d807      	bhi.n	8002c0c <HAL_I2C_Init+0x84>
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	4a80      	ldr	r2, [pc, #512]	; (8002e00 <HAL_I2C_Init+0x278>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	bf94      	ite	ls
 8002c04:	2301      	movls	r3, #1
 8002c06:	2300      	movhi	r3, #0
 8002c08:	b2db      	uxtb	r3, r3
 8002c0a:	e006      	b.n	8002c1a <HAL_I2C_Init+0x92>
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	4a7d      	ldr	r2, [pc, #500]	; (8002e04 <HAL_I2C_Init+0x27c>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	bf94      	ite	ls
 8002c14:	2301      	movls	r3, #1
 8002c16:	2300      	movhi	r3, #0
 8002c18:	b2db      	uxtb	r3, r3
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d001      	beq.n	8002c22 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002c1e:	2301      	movs	r3, #1
 8002c20:	e0e7      	b.n	8002df2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	4a78      	ldr	r2, [pc, #480]	; (8002e08 <HAL_I2C_Init+0x280>)
 8002c26:	fba2 2303 	umull	r2, r3, r2, r3
 8002c2a:	0c9b      	lsrs	r3, r3, #18
 8002c2c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	68ba      	ldr	r2, [r7, #8]
 8002c3e:	430a      	orrs	r2, r1
 8002c40:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	6a1b      	ldr	r3, [r3, #32]
 8002c48:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	4a6a      	ldr	r2, [pc, #424]	; (8002dfc <HAL_I2C_Init+0x274>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d802      	bhi.n	8002c5c <HAL_I2C_Init+0xd4>
 8002c56:	68bb      	ldr	r3, [r7, #8]
 8002c58:	3301      	adds	r3, #1
 8002c5a:	e009      	b.n	8002c70 <HAL_I2C_Init+0xe8>
 8002c5c:	68bb      	ldr	r3, [r7, #8]
 8002c5e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002c62:	fb02 f303 	mul.w	r3, r2, r3
 8002c66:	4a69      	ldr	r2, [pc, #420]	; (8002e0c <HAL_I2C_Init+0x284>)
 8002c68:	fba2 2303 	umull	r2, r3, r2, r3
 8002c6c:	099b      	lsrs	r3, r3, #6
 8002c6e:	3301      	adds	r3, #1
 8002c70:	687a      	ldr	r2, [r7, #4]
 8002c72:	6812      	ldr	r2, [r2, #0]
 8002c74:	430b      	orrs	r3, r1
 8002c76:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	69db      	ldr	r3, [r3, #28]
 8002c7e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002c82:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	495c      	ldr	r1, [pc, #368]	; (8002dfc <HAL_I2C_Init+0x274>)
 8002c8c:	428b      	cmp	r3, r1
 8002c8e:	d819      	bhi.n	8002cc4 <HAL_I2C_Init+0x13c>
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	1e59      	subs	r1, r3, #1
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	005b      	lsls	r3, r3, #1
 8002c9a:	fbb1 f3f3 	udiv	r3, r1, r3
 8002c9e:	1c59      	adds	r1, r3, #1
 8002ca0:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002ca4:	400b      	ands	r3, r1
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d00a      	beq.n	8002cc0 <HAL_I2C_Init+0x138>
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	1e59      	subs	r1, r3, #1
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	005b      	lsls	r3, r3, #1
 8002cb4:	fbb1 f3f3 	udiv	r3, r1, r3
 8002cb8:	3301      	adds	r3, #1
 8002cba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cbe:	e051      	b.n	8002d64 <HAL_I2C_Init+0x1dc>
 8002cc0:	2304      	movs	r3, #4
 8002cc2:	e04f      	b.n	8002d64 <HAL_I2C_Init+0x1dc>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	689b      	ldr	r3, [r3, #8]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d111      	bne.n	8002cf0 <HAL_I2C_Init+0x168>
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	1e58      	subs	r0, r3, #1
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6859      	ldr	r1, [r3, #4]
 8002cd4:	460b      	mov	r3, r1
 8002cd6:	005b      	lsls	r3, r3, #1
 8002cd8:	440b      	add	r3, r1
 8002cda:	fbb0 f3f3 	udiv	r3, r0, r3
 8002cde:	3301      	adds	r3, #1
 8002ce0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	bf0c      	ite	eq
 8002ce8:	2301      	moveq	r3, #1
 8002cea:	2300      	movne	r3, #0
 8002cec:	b2db      	uxtb	r3, r3
 8002cee:	e012      	b.n	8002d16 <HAL_I2C_Init+0x18e>
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	1e58      	subs	r0, r3, #1
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6859      	ldr	r1, [r3, #4]
 8002cf8:	460b      	mov	r3, r1
 8002cfa:	009b      	lsls	r3, r3, #2
 8002cfc:	440b      	add	r3, r1
 8002cfe:	0099      	lsls	r1, r3, #2
 8002d00:	440b      	add	r3, r1
 8002d02:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d06:	3301      	adds	r3, #1
 8002d08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	bf0c      	ite	eq
 8002d10:	2301      	moveq	r3, #1
 8002d12:	2300      	movne	r3, #0
 8002d14:	b2db      	uxtb	r3, r3
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d001      	beq.n	8002d1e <HAL_I2C_Init+0x196>
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	e022      	b.n	8002d64 <HAL_I2C_Init+0x1dc>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	689b      	ldr	r3, [r3, #8]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d10e      	bne.n	8002d44 <HAL_I2C_Init+0x1bc>
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	1e58      	subs	r0, r3, #1
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6859      	ldr	r1, [r3, #4]
 8002d2e:	460b      	mov	r3, r1
 8002d30:	005b      	lsls	r3, r3, #1
 8002d32:	440b      	add	r3, r1
 8002d34:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d38:	3301      	adds	r3, #1
 8002d3a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d42:	e00f      	b.n	8002d64 <HAL_I2C_Init+0x1dc>
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	1e58      	subs	r0, r3, #1
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6859      	ldr	r1, [r3, #4]
 8002d4c:	460b      	mov	r3, r1
 8002d4e:	009b      	lsls	r3, r3, #2
 8002d50:	440b      	add	r3, r1
 8002d52:	0099      	lsls	r1, r3, #2
 8002d54:	440b      	add	r3, r1
 8002d56:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d5a:	3301      	adds	r3, #1
 8002d5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d60:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002d64:	6879      	ldr	r1, [r7, #4]
 8002d66:	6809      	ldr	r1, [r1, #0]
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	69da      	ldr	r2, [r3, #28]
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6a1b      	ldr	r3, [r3, #32]
 8002d7e:	431a      	orrs	r2, r3
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	430a      	orrs	r2, r1
 8002d86:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	689b      	ldr	r3, [r3, #8]
 8002d8e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002d92:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002d96:	687a      	ldr	r2, [r7, #4]
 8002d98:	6911      	ldr	r1, [r2, #16]
 8002d9a:	687a      	ldr	r2, [r7, #4]
 8002d9c:	68d2      	ldr	r2, [r2, #12]
 8002d9e:	4311      	orrs	r1, r2
 8002da0:	687a      	ldr	r2, [r7, #4]
 8002da2:	6812      	ldr	r2, [r2, #0]
 8002da4:	430b      	orrs	r3, r1
 8002da6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	68db      	ldr	r3, [r3, #12]
 8002dae:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	695a      	ldr	r2, [r3, #20]
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	699b      	ldr	r3, [r3, #24]
 8002dba:	431a      	orrs	r2, r3
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	430a      	orrs	r2, r1
 8002dc2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	681a      	ldr	r2, [r3, #0]
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f042 0201 	orr.w	r2, r2, #1
 8002dd2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2220      	movs	r2, #32
 8002dde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2200      	movs	r2, #0
 8002de6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2200      	movs	r2, #0
 8002dec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002df0:	2300      	movs	r3, #0
}
 8002df2:	4618      	mov	r0, r3
 8002df4:	3710      	adds	r7, #16
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bd80      	pop	{r7, pc}
 8002dfa:	bf00      	nop
 8002dfc:	000186a0 	.word	0x000186a0
 8002e00:	001e847f 	.word	0x001e847f
 8002e04:	003d08ff 	.word	0x003d08ff
 8002e08:	431bde83 	.word	0x431bde83
 8002e0c:	10624dd3 	.word	0x10624dd3

08002e10 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b088      	sub	sp, #32
 8002e14:	af02      	add	r7, sp, #8
 8002e16:	60f8      	str	r0, [r7, #12]
 8002e18:	4608      	mov	r0, r1
 8002e1a:	4611      	mov	r1, r2
 8002e1c:	461a      	mov	r2, r3
 8002e1e:	4603      	mov	r3, r0
 8002e20:	817b      	strh	r3, [r7, #10]
 8002e22:	460b      	mov	r3, r1
 8002e24:	813b      	strh	r3, [r7, #8]
 8002e26:	4613      	mov	r3, r2
 8002e28:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002e2a:	f7ff fb9f 	bl	800256c <HAL_GetTick>
 8002e2e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e36:	b2db      	uxtb	r3, r3
 8002e38:	2b20      	cmp	r3, #32
 8002e3a:	f040 80d9 	bne.w	8002ff0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002e3e:	697b      	ldr	r3, [r7, #20]
 8002e40:	9300      	str	r3, [sp, #0]
 8002e42:	2319      	movs	r3, #25
 8002e44:	2201      	movs	r2, #1
 8002e46:	496d      	ldr	r1, [pc, #436]	; (8002ffc <HAL_I2C_Mem_Write+0x1ec>)
 8002e48:	68f8      	ldr	r0, [r7, #12]
 8002e4a:	f000 fcc1 	bl	80037d0 <I2C_WaitOnFlagUntilTimeout>
 8002e4e:	4603      	mov	r3, r0
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d001      	beq.n	8002e58 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002e54:	2302      	movs	r3, #2
 8002e56:	e0cc      	b.n	8002ff2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e5e:	2b01      	cmp	r3, #1
 8002e60:	d101      	bne.n	8002e66 <HAL_I2C_Mem_Write+0x56>
 8002e62:	2302      	movs	r3, #2
 8002e64:	e0c5      	b.n	8002ff2 <HAL_I2C_Mem_Write+0x1e2>
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	2201      	movs	r2, #1
 8002e6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f003 0301 	and.w	r3, r3, #1
 8002e78:	2b01      	cmp	r3, #1
 8002e7a:	d007      	beq.n	8002e8c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	681a      	ldr	r2, [r3, #0]
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f042 0201 	orr.w	r2, r2, #1
 8002e8a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	681a      	ldr	r2, [r3, #0]
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e9a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	2221      	movs	r2, #33	; 0x21
 8002ea0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	2240      	movs	r2, #64	; 0x40
 8002ea8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	2200      	movs	r2, #0
 8002eb0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	6a3a      	ldr	r2, [r7, #32]
 8002eb6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002ebc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ec2:	b29a      	uxth	r2, r3
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	4a4d      	ldr	r2, [pc, #308]	; (8003000 <HAL_I2C_Mem_Write+0x1f0>)
 8002ecc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002ece:	88f8      	ldrh	r0, [r7, #6]
 8002ed0:	893a      	ldrh	r2, [r7, #8]
 8002ed2:	8979      	ldrh	r1, [r7, #10]
 8002ed4:	697b      	ldr	r3, [r7, #20]
 8002ed6:	9301      	str	r3, [sp, #4]
 8002ed8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002eda:	9300      	str	r3, [sp, #0]
 8002edc:	4603      	mov	r3, r0
 8002ede:	68f8      	ldr	r0, [r7, #12]
 8002ee0:	f000 faf8 	bl	80034d4 <I2C_RequestMemoryWrite>
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d052      	beq.n	8002f90 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002eea:	2301      	movs	r3, #1
 8002eec:	e081      	b.n	8002ff2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002eee:	697a      	ldr	r2, [r7, #20]
 8002ef0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002ef2:	68f8      	ldr	r0, [r7, #12]
 8002ef4:	f000 fd42 	bl	800397c <I2C_WaitOnTXEFlagUntilTimeout>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d00d      	beq.n	8002f1a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f02:	2b04      	cmp	r3, #4
 8002f04:	d107      	bne.n	8002f16 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	681a      	ldr	r2, [r3, #0]
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f14:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002f16:	2301      	movs	r3, #1
 8002f18:	e06b      	b.n	8002ff2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f1e:	781a      	ldrb	r2, [r3, #0]
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f2a:	1c5a      	adds	r2, r3, #1
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f34:	3b01      	subs	r3, #1
 8002f36:	b29a      	uxth	r2, r3
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f40:	b29b      	uxth	r3, r3
 8002f42:	3b01      	subs	r3, #1
 8002f44:	b29a      	uxth	r2, r3
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	695b      	ldr	r3, [r3, #20]
 8002f50:	f003 0304 	and.w	r3, r3, #4
 8002f54:	2b04      	cmp	r3, #4
 8002f56:	d11b      	bne.n	8002f90 <HAL_I2C_Mem_Write+0x180>
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d017      	beq.n	8002f90 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f64:	781a      	ldrb	r2, [r3, #0]
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f70:	1c5a      	adds	r2, r3, #1
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f7a:	3b01      	subs	r3, #1
 8002f7c:	b29a      	uxth	r2, r3
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f86:	b29b      	uxth	r3, r3
 8002f88:	3b01      	subs	r3, #1
 8002f8a:	b29a      	uxth	r2, r3
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d1aa      	bne.n	8002eee <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f98:	697a      	ldr	r2, [r7, #20]
 8002f9a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002f9c:	68f8      	ldr	r0, [r7, #12]
 8002f9e:	f000 fd2e 	bl	80039fe <I2C_WaitOnBTFFlagUntilTimeout>
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d00d      	beq.n	8002fc4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fac:	2b04      	cmp	r3, #4
 8002fae:	d107      	bne.n	8002fc0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	681a      	ldr	r2, [r3, #0]
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fbe:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	e016      	b.n	8002ff2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	681a      	ldr	r2, [r3, #0]
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fd2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	2220      	movs	r2, #32
 8002fd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	2200      	movs	r2, #0
 8002fe0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002fec:	2300      	movs	r3, #0
 8002fee:	e000      	b.n	8002ff2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002ff0:	2302      	movs	r3, #2
  }
}
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	3718      	adds	r7, #24
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bd80      	pop	{r7, pc}
 8002ffa:	bf00      	nop
 8002ffc:	00100002 	.word	0x00100002
 8003000:	ffff0000 	.word	0xffff0000

08003004 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b08c      	sub	sp, #48	; 0x30
 8003008:	af02      	add	r7, sp, #8
 800300a:	60f8      	str	r0, [r7, #12]
 800300c:	4608      	mov	r0, r1
 800300e:	4611      	mov	r1, r2
 8003010:	461a      	mov	r2, r3
 8003012:	4603      	mov	r3, r0
 8003014:	817b      	strh	r3, [r7, #10]
 8003016:	460b      	mov	r3, r1
 8003018:	813b      	strh	r3, [r7, #8]
 800301a:	4613      	mov	r3, r2
 800301c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800301e:	2300      	movs	r3, #0
 8003020:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003022:	f7ff faa3 	bl	800256c <HAL_GetTick>
 8003026:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800302e:	b2db      	uxtb	r3, r3
 8003030:	2b20      	cmp	r3, #32
 8003032:	f040 8244 	bne.w	80034be <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003038:	9300      	str	r3, [sp, #0]
 800303a:	2319      	movs	r3, #25
 800303c:	2201      	movs	r2, #1
 800303e:	4982      	ldr	r1, [pc, #520]	; (8003248 <HAL_I2C_Mem_Read+0x244>)
 8003040:	68f8      	ldr	r0, [r7, #12]
 8003042:	f000 fbc5 	bl	80037d0 <I2C_WaitOnFlagUntilTimeout>
 8003046:	4603      	mov	r3, r0
 8003048:	2b00      	cmp	r3, #0
 800304a:	d001      	beq.n	8003050 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 800304c:	2302      	movs	r3, #2
 800304e:	e237      	b.n	80034c0 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003056:	2b01      	cmp	r3, #1
 8003058:	d101      	bne.n	800305e <HAL_I2C_Mem_Read+0x5a>
 800305a:	2302      	movs	r3, #2
 800305c:	e230      	b.n	80034c0 <HAL_I2C_Mem_Read+0x4bc>
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	2201      	movs	r2, #1
 8003062:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f003 0301 	and.w	r3, r3, #1
 8003070:	2b01      	cmp	r3, #1
 8003072:	d007      	beq.n	8003084 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	681a      	ldr	r2, [r3, #0]
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f042 0201 	orr.w	r2, r2, #1
 8003082:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	681a      	ldr	r2, [r3, #0]
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003092:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	2222      	movs	r2, #34	; 0x22
 8003098:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	2240      	movs	r2, #64	; 0x40
 80030a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	2200      	movs	r2, #0
 80030a8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80030ae:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80030b4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030ba:	b29a      	uxth	r2, r3
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	4a62      	ldr	r2, [pc, #392]	; (800324c <HAL_I2C_Mem_Read+0x248>)
 80030c4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80030c6:	88f8      	ldrh	r0, [r7, #6]
 80030c8:	893a      	ldrh	r2, [r7, #8]
 80030ca:	8979      	ldrh	r1, [r7, #10]
 80030cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ce:	9301      	str	r3, [sp, #4]
 80030d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030d2:	9300      	str	r3, [sp, #0]
 80030d4:	4603      	mov	r3, r0
 80030d6:	68f8      	ldr	r0, [r7, #12]
 80030d8:	f000 fa92 	bl	8003600 <I2C_RequestMemoryRead>
 80030dc:	4603      	mov	r3, r0
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d001      	beq.n	80030e6 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 80030e2:	2301      	movs	r3, #1
 80030e4:	e1ec      	b.n	80034c0 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d113      	bne.n	8003116 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030ee:	2300      	movs	r3, #0
 80030f0:	61fb      	str	r3, [r7, #28]
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	695b      	ldr	r3, [r3, #20]
 80030f8:	61fb      	str	r3, [r7, #28]
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	699b      	ldr	r3, [r3, #24]
 8003100:	61fb      	str	r3, [r7, #28]
 8003102:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	681a      	ldr	r2, [r3, #0]
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003112:	601a      	str	r2, [r3, #0]
 8003114:	e1c0      	b.n	8003498 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800311a:	2b01      	cmp	r3, #1
 800311c:	d11e      	bne.n	800315c <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	681a      	ldr	r2, [r3, #0]
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800312c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800312e:	b672      	cpsid	i
}
 8003130:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003132:	2300      	movs	r3, #0
 8003134:	61bb      	str	r3, [r7, #24]
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	695b      	ldr	r3, [r3, #20]
 800313c:	61bb      	str	r3, [r7, #24]
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	699b      	ldr	r3, [r3, #24]
 8003144:	61bb      	str	r3, [r7, #24]
 8003146:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	681a      	ldr	r2, [r3, #0]
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003156:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003158:	b662      	cpsie	i
}
 800315a:	e035      	b.n	80031c8 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003160:	2b02      	cmp	r3, #2
 8003162:	d11e      	bne.n	80031a2 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	681a      	ldr	r2, [r3, #0]
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003172:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003174:	b672      	cpsid	i
}
 8003176:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003178:	2300      	movs	r3, #0
 800317a:	617b      	str	r3, [r7, #20]
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	695b      	ldr	r3, [r3, #20]
 8003182:	617b      	str	r3, [r7, #20]
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	699b      	ldr	r3, [r3, #24]
 800318a:	617b      	str	r3, [r7, #20]
 800318c:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	681a      	ldr	r2, [r3, #0]
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800319c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800319e:	b662      	cpsie	i
}
 80031a0:	e012      	b.n	80031c8 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	681a      	ldr	r2, [r3, #0]
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80031b0:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031b2:	2300      	movs	r3, #0
 80031b4:	613b      	str	r3, [r7, #16]
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	695b      	ldr	r3, [r3, #20]
 80031bc:	613b      	str	r3, [r7, #16]
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	699b      	ldr	r3, [r3, #24]
 80031c4:	613b      	str	r3, [r7, #16]
 80031c6:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80031c8:	e166      	b.n	8003498 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031ce:	2b03      	cmp	r3, #3
 80031d0:	f200 811f 	bhi.w	8003412 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031d8:	2b01      	cmp	r3, #1
 80031da:	d123      	bne.n	8003224 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031de:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80031e0:	68f8      	ldr	r0, [r7, #12]
 80031e2:	f000 fc4d 	bl	8003a80 <I2C_WaitOnRXNEFlagUntilTimeout>
 80031e6:	4603      	mov	r3, r0
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d001      	beq.n	80031f0 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 80031ec:	2301      	movs	r3, #1
 80031ee:	e167      	b.n	80034c0 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	691a      	ldr	r2, [r3, #16]
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031fa:	b2d2      	uxtb	r2, r2
 80031fc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003202:	1c5a      	adds	r2, r3, #1
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800320c:	3b01      	subs	r3, #1
 800320e:	b29a      	uxth	r2, r3
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003218:	b29b      	uxth	r3, r3
 800321a:	3b01      	subs	r3, #1
 800321c:	b29a      	uxth	r2, r3
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003222:	e139      	b.n	8003498 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003228:	2b02      	cmp	r3, #2
 800322a:	d152      	bne.n	80032d2 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800322c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800322e:	9300      	str	r3, [sp, #0]
 8003230:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003232:	2200      	movs	r2, #0
 8003234:	4906      	ldr	r1, [pc, #24]	; (8003250 <HAL_I2C_Mem_Read+0x24c>)
 8003236:	68f8      	ldr	r0, [r7, #12]
 8003238:	f000 faca 	bl	80037d0 <I2C_WaitOnFlagUntilTimeout>
 800323c:	4603      	mov	r3, r0
 800323e:	2b00      	cmp	r3, #0
 8003240:	d008      	beq.n	8003254 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8003242:	2301      	movs	r3, #1
 8003244:	e13c      	b.n	80034c0 <HAL_I2C_Mem_Read+0x4bc>
 8003246:	bf00      	nop
 8003248:	00100002 	.word	0x00100002
 800324c:	ffff0000 	.word	0xffff0000
 8003250:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8003254:	b672      	cpsid	i
}
 8003256:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	681a      	ldr	r2, [r3, #0]
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003266:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	691a      	ldr	r2, [r3, #16]
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003272:	b2d2      	uxtb	r2, r2
 8003274:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800327a:	1c5a      	adds	r2, r3, #1
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003284:	3b01      	subs	r3, #1
 8003286:	b29a      	uxth	r2, r3
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003290:	b29b      	uxth	r3, r3
 8003292:	3b01      	subs	r3, #1
 8003294:	b29a      	uxth	r2, r3
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800329a:	b662      	cpsie	i
}
 800329c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	691a      	ldr	r2, [r3, #16]
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032a8:	b2d2      	uxtb	r2, r2
 80032aa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b0:	1c5a      	adds	r2, r3, #1
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032ba:	3b01      	subs	r3, #1
 80032bc:	b29a      	uxth	r2, r3
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032c6:	b29b      	uxth	r3, r3
 80032c8:	3b01      	subs	r3, #1
 80032ca:	b29a      	uxth	r2, r3
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	855a      	strh	r2, [r3, #42]	; 0x2a
 80032d0:	e0e2      	b.n	8003498 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80032d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032d4:	9300      	str	r3, [sp, #0]
 80032d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032d8:	2200      	movs	r2, #0
 80032da:	497b      	ldr	r1, [pc, #492]	; (80034c8 <HAL_I2C_Mem_Read+0x4c4>)
 80032dc:	68f8      	ldr	r0, [r7, #12]
 80032de:	f000 fa77 	bl	80037d0 <I2C_WaitOnFlagUntilTimeout>
 80032e2:	4603      	mov	r3, r0
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d001      	beq.n	80032ec <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 80032e8:	2301      	movs	r3, #1
 80032ea:	e0e9      	b.n	80034c0 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	681a      	ldr	r2, [r3, #0]
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032fa:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80032fc:	b672      	cpsid	i
}
 80032fe:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	691a      	ldr	r2, [r3, #16]
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800330a:	b2d2      	uxtb	r2, r2
 800330c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003312:	1c5a      	adds	r2, r3, #1
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800331c:	3b01      	subs	r3, #1
 800331e:	b29a      	uxth	r2, r3
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003328:	b29b      	uxth	r3, r3
 800332a:	3b01      	subs	r3, #1
 800332c:	b29a      	uxth	r2, r3
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003332:	4b66      	ldr	r3, [pc, #408]	; (80034cc <HAL_I2C_Mem_Read+0x4c8>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	08db      	lsrs	r3, r3, #3
 8003338:	4a65      	ldr	r2, [pc, #404]	; (80034d0 <HAL_I2C_Mem_Read+0x4cc>)
 800333a:	fba2 2303 	umull	r2, r3, r2, r3
 800333e:	0a1a      	lsrs	r2, r3, #8
 8003340:	4613      	mov	r3, r2
 8003342:	009b      	lsls	r3, r3, #2
 8003344:	4413      	add	r3, r2
 8003346:	00da      	lsls	r2, r3, #3
 8003348:	1ad3      	subs	r3, r2, r3
 800334a:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 800334c:	6a3b      	ldr	r3, [r7, #32]
 800334e:	3b01      	subs	r3, #1
 8003350:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8003352:	6a3b      	ldr	r3, [r7, #32]
 8003354:	2b00      	cmp	r3, #0
 8003356:	d118      	bne.n	800338a <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	2200      	movs	r2, #0
 800335c:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	2220      	movs	r2, #32
 8003362:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	2200      	movs	r2, #0
 800336a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003372:	f043 0220 	orr.w	r2, r3, #32
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800337a:	b662      	cpsie	i
}
 800337c:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	2200      	movs	r2, #0
 8003382:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8003386:	2301      	movs	r3, #1
 8003388:	e09a      	b.n	80034c0 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	695b      	ldr	r3, [r3, #20]
 8003390:	f003 0304 	and.w	r3, r3, #4
 8003394:	2b04      	cmp	r3, #4
 8003396:	d1d9      	bne.n	800334c <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	681a      	ldr	r2, [r3, #0]
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033a6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	691a      	ldr	r2, [r3, #16]
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033b2:	b2d2      	uxtb	r2, r2
 80033b4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ba:	1c5a      	adds	r2, r3, #1
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033c4:	3b01      	subs	r3, #1
 80033c6:	b29a      	uxth	r2, r3
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033d0:	b29b      	uxth	r3, r3
 80033d2:	3b01      	subs	r3, #1
 80033d4:	b29a      	uxth	r2, r3
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80033da:	b662      	cpsie	i
}
 80033dc:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	691a      	ldr	r2, [r3, #16]
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033e8:	b2d2      	uxtb	r2, r2
 80033ea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033f0:	1c5a      	adds	r2, r3, #1
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033fa:	3b01      	subs	r3, #1
 80033fc:	b29a      	uxth	r2, r3
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003406:	b29b      	uxth	r3, r3
 8003408:	3b01      	subs	r3, #1
 800340a:	b29a      	uxth	r2, r3
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003410:	e042      	b.n	8003498 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003412:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003414:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003416:	68f8      	ldr	r0, [r7, #12]
 8003418:	f000 fb32 	bl	8003a80 <I2C_WaitOnRXNEFlagUntilTimeout>
 800341c:	4603      	mov	r3, r0
 800341e:	2b00      	cmp	r3, #0
 8003420:	d001      	beq.n	8003426 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8003422:	2301      	movs	r3, #1
 8003424:	e04c      	b.n	80034c0 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	691a      	ldr	r2, [r3, #16]
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003430:	b2d2      	uxtb	r2, r2
 8003432:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003438:	1c5a      	adds	r2, r3, #1
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003442:	3b01      	subs	r3, #1
 8003444:	b29a      	uxth	r2, r3
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800344e:	b29b      	uxth	r3, r3
 8003450:	3b01      	subs	r3, #1
 8003452:	b29a      	uxth	r2, r3
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	695b      	ldr	r3, [r3, #20]
 800345e:	f003 0304 	and.w	r3, r3, #4
 8003462:	2b04      	cmp	r3, #4
 8003464:	d118      	bne.n	8003498 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	691a      	ldr	r2, [r3, #16]
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003470:	b2d2      	uxtb	r2, r2
 8003472:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003478:	1c5a      	adds	r2, r3, #1
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003482:	3b01      	subs	r3, #1
 8003484:	b29a      	uxth	r2, r3
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800348e:	b29b      	uxth	r3, r3
 8003490:	3b01      	subs	r3, #1
 8003492:	b29a      	uxth	r2, r3
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800349c:	2b00      	cmp	r3, #0
 800349e:	f47f ae94 	bne.w	80031ca <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	2220      	movs	r2, #32
 80034a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	2200      	movs	r2, #0
 80034ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	2200      	movs	r2, #0
 80034b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80034ba:	2300      	movs	r3, #0
 80034bc:	e000      	b.n	80034c0 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 80034be:	2302      	movs	r3, #2
  }
}
 80034c0:	4618      	mov	r0, r3
 80034c2:	3728      	adds	r7, #40	; 0x28
 80034c4:	46bd      	mov	sp, r7
 80034c6:	bd80      	pop	{r7, pc}
 80034c8:	00010004 	.word	0x00010004
 80034cc:	20000030 	.word	0x20000030
 80034d0:	14f8b589 	.word	0x14f8b589

080034d4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b088      	sub	sp, #32
 80034d8:	af02      	add	r7, sp, #8
 80034da:	60f8      	str	r0, [r7, #12]
 80034dc:	4608      	mov	r0, r1
 80034de:	4611      	mov	r1, r2
 80034e0:	461a      	mov	r2, r3
 80034e2:	4603      	mov	r3, r0
 80034e4:	817b      	strh	r3, [r7, #10]
 80034e6:	460b      	mov	r3, r1
 80034e8:	813b      	strh	r3, [r7, #8]
 80034ea:	4613      	mov	r3, r2
 80034ec:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	681a      	ldr	r2, [r3, #0]
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80034fc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80034fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003500:	9300      	str	r3, [sp, #0]
 8003502:	6a3b      	ldr	r3, [r7, #32]
 8003504:	2200      	movs	r2, #0
 8003506:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800350a:	68f8      	ldr	r0, [r7, #12]
 800350c:	f000 f960 	bl	80037d0 <I2C_WaitOnFlagUntilTimeout>
 8003510:	4603      	mov	r3, r0
 8003512:	2b00      	cmp	r3, #0
 8003514:	d00d      	beq.n	8003532 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003520:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003524:	d103      	bne.n	800352e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	f44f 7200 	mov.w	r2, #512	; 0x200
 800352c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800352e:	2303      	movs	r3, #3
 8003530:	e05f      	b.n	80035f2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003532:	897b      	ldrh	r3, [r7, #10]
 8003534:	b2db      	uxtb	r3, r3
 8003536:	461a      	mov	r2, r3
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003540:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003544:	6a3a      	ldr	r2, [r7, #32]
 8003546:	492d      	ldr	r1, [pc, #180]	; (80035fc <I2C_RequestMemoryWrite+0x128>)
 8003548:	68f8      	ldr	r0, [r7, #12]
 800354a:	f000 f998 	bl	800387e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800354e:	4603      	mov	r3, r0
 8003550:	2b00      	cmp	r3, #0
 8003552:	d001      	beq.n	8003558 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003554:	2301      	movs	r3, #1
 8003556:	e04c      	b.n	80035f2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003558:	2300      	movs	r3, #0
 800355a:	617b      	str	r3, [r7, #20]
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	695b      	ldr	r3, [r3, #20]
 8003562:	617b      	str	r3, [r7, #20]
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	699b      	ldr	r3, [r3, #24]
 800356a:	617b      	str	r3, [r7, #20]
 800356c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800356e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003570:	6a39      	ldr	r1, [r7, #32]
 8003572:	68f8      	ldr	r0, [r7, #12]
 8003574:	f000 fa02 	bl	800397c <I2C_WaitOnTXEFlagUntilTimeout>
 8003578:	4603      	mov	r3, r0
 800357a:	2b00      	cmp	r3, #0
 800357c:	d00d      	beq.n	800359a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003582:	2b04      	cmp	r3, #4
 8003584:	d107      	bne.n	8003596 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	681a      	ldr	r2, [r3, #0]
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003594:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003596:	2301      	movs	r3, #1
 8003598:	e02b      	b.n	80035f2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800359a:	88fb      	ldrh	r3, [r7, #6]
 800359c:	2b01      	cmp	r3, #1
 800359e:	d105      	bne.n	80035ac <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80035a0:	893b      	ldrh	r3, [r7, #8]
 80035a2:	b2da      	uxtb	r2, r3
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	611a      	str	r2, [r3, #16]
 80035aa:	e021      	b.n	80035f0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80035ac:	893b      	ldrh	r3, [r7, #8]
 80035ae:	0a1b      	lsrs	r3, r3, #8
 80035b0:	b29b      	uxth	r3, r3
 80035b2:	b2da      	uxtb	r2, r3
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80035ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035bc:	6a39      	ldr	r1, [r7, #32]
 80035be:	68f8      	ldr	r0, [r7, #12]
 80035c0:	f000 f9dc 	bl	800397c <I2C_WaitOnTXEFlagUntilTimeout>
 80035c4:	4603      	mov	r3, r0
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d00d      	beq.n	80035e6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ce:	2b04      	cmp	r3, #4
 80035d0:	d107      	bne.n	80035e2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	681a      	ldr	r2, [r3, #0]
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035e0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80035e2:	2301      	movs	r3, #1
 80035e4:	e005      	b.n	80035f2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80035e6:	893b      	ldrh	r3, [r7, #8]
 80035e8:	b2da      	uxtb	r2, r3
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80035f0:	2300      	movs	r3, #0
}
 80035f2:	4618      	mov	r0, r3
 80035f4:	3718      	adds	r7, #24
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bd80      	pop	{r7, pc}
 80035fa:	bf00      	nop
 80035fc:	00010002 	.word	0x00010002

08003600 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b088      	sub	sp, #32
 8003604:	af02      	add	r7, sp, #8
 8003606:	60f8      	str	r0, [r7, #12]
 8003608:	4608      	mov	r0, r1
 800360a:	4611      	mov	r1, r2
 800360c:	461a      	mov	r2, r3
 800360e:	4603      	mov	r3, r0
 8003610:	817b      	strh	r3, [r7, #10]
 8003612:	460b      	mov	r3, r1
 8003614:	813b      	strh	r3, [r7, #8]
 8003616:	4613      	mov	r3, r2
 8003618:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	681a      	ldr	r2, [r3, #0]
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003628:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	681a      	ldr	r2, [r3, #0]
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003638:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800363a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800363c:	9300      	str	r3, [sp, #0]
 800363e:	6a3b      	ldr	r3, [r7, #32]
 8003640:	2200      	movs	r2, #0
 8003642:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003646:	68f8      	ldr	r0, [r7, #12]
 8003648:	f000 f8c2 	bl	80037d0 <I2C_WaitOnFlagUntilTimeout>
 800364c:	4603      	mov	r3, r0
 800364e:	2b00      	cmp	r3, #0
 8003650:	d00d      	beq.n	800366e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800365c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003660:	d103      	bne.n	800366a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003668:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800366a:	2303      	movs	r3, #3
 800366c:	e0aa      	b.n	80037c4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800366e:	897b      	ldrh	r3, [r7, #10]
 8003670:	b2db      	uxtb	r3, r3
 8003672:	461a      	mov	r2, r3
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800367c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800367e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003680:	6a3a      	ldr	r2, [r7, #32]
 8003682:	4952      	ldr	r1, [pc, #328]	; (80037cc <I2C_RequestMemoryRead+0x1cc>)
 8003684:	68f8      	ldr	r0, [r7, #12]
 8003686:	f000 f8fa 	bl	800387e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800368a:	4603      	mov	r3, r0
 800368c:	2b00      	cmp	r3, #0
 800368e:	d001      	beq.n	8003694 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003690:	2301      	movs	r3, #1
 8003692:	e097      	b.n	80037c4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003694:	2300      	movs	r3, #0
 8003696:	617b      	str	r3, [r7, #20]
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	695b      	ldr	r3, [r3, #20]
 800369e:	617b      	str	r3, [r7, #20]
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	699b      	ldr	r3, [r3, #24]
 80036a6:	617b      	str	r3, [r7, #20]
 80036a8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80036aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036ac:	6a39      	ldr	r1, [r7, #32]
 80036ae:	68f8      	ldr	r0, [r7, #12]
 80036b0:	f000 f964 	bl	800397c <I2C_WaitOnTXEFlagUntilTimeout>
 80036b4:	4603      	mov	r3, r0
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d00d      	beq.n	80036d6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036be:	2b04      	cmp	r3, #4
 80036c0:	d107      	bne.n	80036d2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	681a      	ldr	r2, [r3, #0]
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036d0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80036d2:	2301      	movs	r3, #1
 80036d4:	e076      	b.n	80037c4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80036d6:	88fb      	ldrh	r3, [r7, #6]
 80036d8:	2b01      	cmp	r3, #1
 80036da:	d105      	bne.n	80036e8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80036dc:	893b      	ldrh	r3, [r7, #8]
 80036de:	b2da      	uxtb	r2, r3
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	611a      	str	r2, [r3, #16]
 80036e6:	e021      	b.n	800372c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80036e8:	893b      	ldrh	r3, [r7, #8]
 80036ea:	0a1b      	lsrs	r3, r3, #8
 80036ec:	b29b      	uxth	r3, r3
 80036ee:	b2da      	uxtb	r2, r3
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80036f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036f8:	6a39      	ldr	r1, [r7, #32]
 80036fa:	68f8      	ldr	r0, [r7, #12]
 80036fc:	f000 f93e 	bl	800397c <I2C_WaitOnTXEFlagUntilTimeout>
 8003700:	4603      	mov	r3, r0
 8003702:	2b00      	cmp	r3, #0
 8003704:	d00d      	beq.n	8003722 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800370a:	2b04      	cmp	r3, #4
 800370c:	d107      	bne.n	800371e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	681a      	ldr	r2, [r3, #0]
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800371c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800371e:	2301      	movs	r3, #1
 8003720:	e050      	b.n	80037c4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003722:	893b      	ldrh	r3, [r7, #8]
 8003724:	b2da      	uxtb	r2, r3
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800372c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800372e:	6a39      	ldr	r1, [r7, #32]
 8003730:	68f8      	ldr	r0, [r7, #12]
 8003732:	f000 f923 	bl	800397c <I2C_WaitOnTXEFlagUntilTimeout>
 8003736:	4603      	mov	r3, r0
 8003738:	2b00      	cmp	r3, #0
 800373a:	d00d      	beq.n	8003758 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003740:	2b04      	cmp	r3, #4
 8003742:	d107      	bne.n	8003754 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	681a      	ldr	r2, [r3, #0]
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003752:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003754:	2301      	movs	r3, #1
 8003756:	e035      	b.n	80037c4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	681a      	ldr	r2, [r3, #0]
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003766:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800376a:	9300      	str	r3, [sp, #0]
 800376c:	6a3b      	ldr	r3, [r7, #32]
 800376e:	2200      	movs	r2, #0
 8003770:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003774:	68f8      	ldr	r0, [r7, #12]
 8003776:	f000 f82b 	bl	80037d0 <I2C_WaitOnFlagUntilTimeout>
 800377a:	4603      	mov	r3, r0
 800377c:	2b00      	cmp	r3, #0
 800377e:	d00d      	beq.n	800379c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800378a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800378e:	d103      	bne.n	8003798 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003796:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003798:	2303      	movs	r3, #3
 800379a:	e013      	b.n	80037c4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800379c:	897b      	ldrh	r3, [r7, #10]
 800379e:	b2db      	uxtb	r3, r3
 80037a0:	f043 0301 	orr.w	r3, r3, #1
 80037a4:	b2da      	uxtb	r2, r3
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80037ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ae:	6a3a      	ldr	r2, [r7, #32]
 80037b0:	4906      	ldr	r1, [pc, #24]	; (80037cc <I2C_RequestMemoryRead+0x1cc>)
 80037b2:	68f8      	ldr	r0, [r7, #12]
 80037b4:	f000 f863 	bl	800387e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80037b8:	4603      	mov	r3, r0
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d001      	beq.n	80037c2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80037be:	2301      	movs	r3, #1
 80037c0:	e000      	b.n	80037c4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80037c2:	2300      	movs	r3, #0
}
 80037c4:	4618      	mov	r0, r3
 80037c6:	3718      	adds	r7, #24
 80037c8:	46bd      	mov	sp, r7
 80037ca:	bd80      	pop	{r7, pc}
 80037cc:	00010002 	.word	0x00010002

080037d0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b084      	sub	sp, #16
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	60f8      	str	r0, [r7, #12]
 80037d8:	60b9      	str	r1, [r7, #8]
 80037da:	603b      	str	r3, [r7, #0]
 80037dc:	4613      	mov	r3, r2
 80037de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80037e0:	e025      	b.n	800382e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037e8:	d021      	beq.n	800382e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037ea:	f7fe febf 	bl	800256c <HAL_GetTick>
 80037ee:	4602      	mov	r2, r0
 80037f0:	69bb      	ldr	r3, [r7, #24]
 80037f2:	1ad3      	subs	r3, r2, r3
 80037f4:	683a      	ldr	r2, [r7, #0]
 80037f6:	429a      	cmp	r2, r3
 80037f8:	d302      	bcc.n	8003800 <I2C_WaitOnFlagUntilTimeout+0x30>
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d116      	bne.n	800382e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	2200      	movs	r2, #0
 8003804:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	2220      	movs	r2, #32
 800380a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	2200      	movs	r2, #0
 8003812:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800381a:	f043 0220 	orr.w	r2, r3, #32
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	2200      	movs	r2, #0
 8003826:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800382a:	2301      	movs	r3, #1
 800382c:	e023      	b.n	8003876 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800382e:	68bb      	ldr	r3, [r7, #8]
 8003830:	0c1b      	lsrs	r3, r3, #16
 8003832:	b2db      	uxtb	r3, r3
 8003834:	2b01      	cmp	r3, #1
 8003836:	d10d      	bne.n	8003854 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	695b      	ldr	r3, [r3, #20]
 800383e:	43da      	mvns	r2, r3
 8003840:	68bb      	ldr	r3, [r7, #8]
 8003842:	4013      	ands	r3, r2
 8003844:	b29b      	uxth	r3, r3
 8003846:	2b00      	cmp	r3, #0
 8003848:	bf0c      	ite	eq
 800384a:	2301      	moveq	r3, #1
 800384c:	2300      	movne	r3, #0
 800384e:	b2db      	uxtb	r3, r3
 8003850:	461a      	mov	r2, r3
 8003852:	e00c      	b.n	800386e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	699b      	ldr	r3, [r3, #24]
 800385a:	43da      	mvns	r2, r3
 800385c:	68bb      	ldr	r3, [r7, #8]
 800385e:	4013      	ands	r3, r2
 8003860:	b29b      	uxth	r3, r3
 8003862:	2b00      	cmp	r3, #0
 8003864:	bf0c      	ite	eq
 8003866:	2301      	moveq	r3, #1
 8003868:	2300      	movne	r3, #0
 800386a:	b2db      	uxtb	r3, r3
 800386c:	461a      	mov	r2, r3
 800386e:	79fb      	ldrb	r3, [r7, #7]
 8003870:	429a      	cmp	r2, r3
 8003872:	d0b6      	beq.n	80037e2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003874:	2300      	movs	r3, #0
}
 8003876:	4618      	mov	r0, r3
 8003878:	3710      	adds	r7, #16
 800387a:	46bd      	mov	sp, r7
 800387c:	bd80      	pop	{r7, pc}

0800387e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800387e:	b580      	push	{r7, lr}
 8003880:	b084      	sub	sp, #16
 8003882:	af00      	add	r7, sp, #0
 8003884:	60f8      	str	r0, [r7, #12]
 8003886:	60b9      	str	r1, [r7, #8]
 8003888:	607a      	str	r2, [r7, #4]
 800388a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800388c:	e051      	b.n	8003932 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	695b      	ldr	r3, [r3, #20]
 8003894:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003898:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800389c:	d123      	bne.n	80038e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	681a      	ldr	r2, [r3, #0]
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038ac:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80038b6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	2200      	movs	r2, #0
 80038bc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	2220      	movs	r2, #32
 80038c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	2200      	movs	r2, #0
 80038ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038d2:	f043 0204 	orr.w	r2, r3, #4
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	2200      	movs	r2, #0
 80038de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80038e2:	2301      	movs	r3, #1
 80038e4:	e046      	b.n	8003974 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038ec:	d021      	beq.n	8003932 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038ee:	f7fe fe3d 	bl	800256c <HAL_GetTick>
 80038f2:	4602      	mov	r2, r0
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	1ad3      	subs	r3, r2, r3
 80038f8:	687a      	ldr	r2, [r7, #4]
 80038fa:	429a      	cmp	r2, r3
 80038fc:	d302      	bcc.n	8003904 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d116      	bne.n	8003932 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	2200      	movs	r2, #0
 8003908:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	2220      	movs	r2, #32
 800390e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	2200      	movs	r2, #0
 8003916:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800391e:	f043 0220 	orr.w	r2, r3, #32
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	2200      	movs	r2, #0
 800392a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800392e:	2301      	movs	r3, #1
 8003930:	e020      	b.n	8003974 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003932:	68bb      	ldr	r3, [r7, #8]
 8003934:	0c1b      	lsrs	r3, r3, #16
 8003936:	b2db      	uxtb	r3, r3
 8003938:	2b01      	cmp	r3, #1
 800393a:	d10c      	bne.n	8003956 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	695b      	ldr	r3, [r3, #20]
 8003942:	43da      	mvns	r2, r3
 8003944:	68bb      	ldr	r3, [r7, #8]
 8003946:	4013      	ands	r3, r2
 8003948:	b29b      	uxth	r3, r3
 800394a:	2b00      	cmp	r3, #0
 800394c:	bf14      	ite	ne
 800394e:	2301      	movne	r3, #1
 8003950:	2300      	moveq	r3, #0
 8003952:	b2db      	uxtb	r3, r3
 8003954:	e00b      	b.n	800396e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	699b      	ldr	r3, [r3, #24]
 800395c:	43da      	mvns	r2, r3
 800395e:	68bb      	ldr	r3, [r7, #8]
 8003960:	4013      	ands	r3, r2
 8003962:	b29b      	uxth	r3, r3
 8003964:	2b00      	cmp	r3, #0
 8003966:	bf14      	ite	ne
 8003968:	2301      	movne	r3, #1
 800396a:	2300      	moveq	r3, #0
 800396c:	b2db      	uxtb	r3, r3
 800396e:	2b00      	cmp	r3, #0
 8003970:	d18d      	bne.n	800388e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003972:	2300      	movs	r3, #0
}
 8003974:	4618      	mov	r0, r3
 8003976:	3710      	adds	r7, #16
 8003978:	46bd      	mov	sp, r7
 800397a:	bd80      	pop	{r7, pc}

0800397c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b084      	sub	sp, #16
 8003980:	af00      	add	r7, sp, #0
 8003982:	60f8      	str	r0, [r7, #12]
 8003984:	60b9      	str	r1, [r7, #8]
 8003986:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003988:	e02d      	b.n	80039e6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800398a:	68f8      	ldr	r0, [r7, #12]
 800398c:	f000 f8ce 	bl	8003b2c <I2C_IsAcknowledgeFailed>
 8003990:	4603      	mov	r3, r0
 8003992:	2b00      	cmp	r3, #0
 8003994:	d001      	beq.n	800399a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003996:	2301      	movs	r3, #1
 8003998:	e02d      	b.n	80039f6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800399a:	68bb      	ldr	r3, [r7, #8]
 800399c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039a0:	d021      	beq.n	80039e6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039a2:	f7fe fde3 	bl	800256c <HAL_GetTick>
 80039a6:	4602      	mov	r2, r0
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	1ad3      	subs	r3, r2, r3
 80039ac:	68ba      	ldr	r2, [r7, #8]
 80039ae:	429a      	cmp	r2, r3
 80039b0:	d302      	bcc.n	80039b8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80039b2:	68bb      	ldr	r3, [r7, #8]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d116      	bne.n	80039e6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	2200      	movs	r2, #0
 80039bc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	2220      	movs	r2, #32
 80039c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	2200      	movs	r2, #0
 80039ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039d2:	f043 0220 	orr.w	r2, r3, #32
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	2200      	movs	r2, #0
 80039de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80039e2:	2301      	movs	r3, #1
 80039e4:	e007      	b.n	80039f6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	695b      	ldr	r3, [r3, #20]
 80039ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039f0:	2b80      	cmp	r3, #128	; 0x80
 80039f2:	d1ca      	bne.n	800398a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80039f4:	2300      	movs	r3, #0
}
 80039f6:	4618      	mov	r0, r3
 80039f8:	3710      	adds	r7, #16
 80039fa:	46bd      	mov	sp, r7
 80039fc:	bd80      	pop	{r7, pc}

080039fe <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80039fe:	b580      	push	{r7, lr}
 8003a00:	b084      	sub	sp, #16
 8003a02:	af00      	add	r7, sp, #0
 8003a04:	60f8      	str	r0, [r7, #12]
 8003a06:	60b9      	str	r1, [r7, #8]
 8003a08:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003a0a:	e02d      	b.n	8003a68 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003a0c:	68f8      	ldr	r0, [r7, #12]
 8003a0e:	f000 f88d 	bl	8003b2c <I2C_IsAcknowledgeFailed>
 8003a12:	4603      	mov	r3, r0
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d001      	beq.n	8003a1c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003a18:	2301      	movs	r3, #1
 8003a1a:	e02d      	b.n	8003a78 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a1c:	68bb      	ldr	r3, [r7, #8]
 8003a1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a22:	d021      	beq.n	8003a68 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a24:	f7fe fda2 	bl	800256c <HAL_GetTick>
 8003a28:	4602      	mov	r2, r0
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	1ad3      	subs	r3, r2, r3
 8003a2e:	68ba      	ldr	r2, [r7, #8]
 8003a30:	429a      	cmp	r2, r3
 8003a32:	d302      	bcc.n	8003a3a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003a34:	68bb      	ldr	r3, [r7, #8]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d116      	bne.n	8003a68 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	2220      	movs	r2, #32
 8003a44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a54:	f043 0220 	orr.w	r2, r3, #32
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	2200      	movs	r2, #0
 8003a60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003a64:	2301      	movs	r3, #1
 8003a66:	e007      	b.n	8003a78 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	695b      	ldr	r3, [r3, #20]
 8003a6e:	f003 0304 	and.w	r3, r3, #4
 8003a72:	2b04      	cmp	r3, #4
 8003a74:	d1ca      	bne.n	8003a0c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003a76:	2300      	movs	r3, #0
}
 8003a78:	4618      	mov	r0, r3
 8003a7a:	3710      	adds	r7, #16
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	bd80      	pop	{r7, pc}

08003a80 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b084      	sub	sp, #16
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	60f8      	str	r0, [r7, #12]
 8003a88:	60b9      	str	r1, [r7, #8]
 8003a8a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003a8c:	e042      	b.n	8003b14 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	695b      	ldr	r3, [r3, #20]
 8003a94:	f003 0310 	and.w	r3, r3, #16
 8003a98:	2b10      	cmp	r3, #16
 8003a9a:	d119      	bne.n	8003ad0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f06f 0210 	mvn.w	r2, #16
 8003aa4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	2220      	movs	r2, #32
 8003ab0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003acc:	2301      	movs	r3, #1
 8003ace:	e029      	b.n	8003b24 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ad0:	f7fe fd4c 	bl	800256c <HAL_GetTick>
 8003ad4:	4602      	mov	r2, r0
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	1ad3      	subs	r3, r2, r3
 8003ada:	68ba      	ldr	r2, [r7, #8]
 8003adc:	429a      	cmp	r2, r3
 8003ade:	d302      	bcc.n	8003ae6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003ae0:	68bb      	ldr	r3, [r7, #8]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d116      	bne.n	8003b14 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	2200      	movs	r2, #0
 8003aea:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	2220      	movs	r2, #32
 8003af0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	2200      	movs	r2, #0
 8003af8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b00:	f043 0220 	orr.w	r2, r3, #32
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003b10:	2301      	movs	r3, #1
 8003b12:	e007      	b.n	8003b24 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	695b      	ldr	r3, [r3, #20]
 8003b1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b1e:	2b40      	cmp	r3, #64	; 0x40
 8003b20:	d1b5      	bne.n	8003a8e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003b22:	2300      	movs	r3, #0
}
 8003b24:	4618      	mov	r0, r3
 8003b26:	3710      	adds	r7, #16
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	bd80      	pop	{r7, pc}

08003b2c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003b2c:	b480      	push	{r7}
 8003b2e:	b083      	sub	sp, #12
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	695b      	ldr	r3, [r3, #20]
 8003b3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b42:	d11b      	bne.n	8003b7c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003b4c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2200      	movs	r2, #0
 8003b52:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2220      	movs	r2, #32
 8003b58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2200      	movs	r2, #0
 8003b60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b68:	f043 0204 	orr.w	r2, r3, #4
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2200      	movs	r2, #0
 8003b74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003b78:	2301      	movs	r3, #1
 8003b7a:	e000      	b.n	8003b7e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003b7c:	2300      	movs	r3, #0
}
 8003b7e:	4618      	mov	r0, r3
 8003b80:	370c      	adds	r7, #12
 8003b82:	46bd      	mov	sp, r7
 8003b84:	bc80      	pop	{r7}
 8003b86:	4770      	bx	lr

08003b88 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b086      	sub	sp, #24
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d101      	bne.n	8003b9a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003b96:	2301      	movs	r3, #1
 8003b98:	e272      	b.n	8004080 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f003 0301 	and.w	r3, r3, #1
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	f000 8087 	beq.w	8003cb6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003ba8:	4b92      	ldr	r3, [pc, #584]	; (8003df4 <HAL_RCC_OscConfig+0x26c>)
 8003baa:	685b      	ldr	r3, [r3, #4]
 8003bac:	f003 030c 	and.w	r3, r3, #12
 8003bb0:	2b04      	cmp	r3, #4
 8003bb2:	d00c      	beq.n	8003bce <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003bb4:	4b8f      	ldr	r3, [pc, #572]	; (8003df4 <HAL_RCC_OscConfig+0x26c>)
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	f003 030c 	and.w	r3, r3, #12
 8003bbc:	2b08      	cmp	r3, #8
 8003bbe:	d112      	bne.n	8003be6 <HAL_RCC_OscConfig+0x5e>
 8003bc0:	4b8c      	ldr	r3, [pc, #560]	; (8003df4 <HAL_RCC_OscConfig+0x26c>)
 8003bc2:	685b      	ldr	r3, [r3, #4]
 8003bc4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bcc:	d10b      	bne.n	8003be6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bce:	4b89      	ldr	r3, [pc, #548]	; (8003df4 <HAL_RCC_OscConfig+0x26c>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d06c      	beq.n	8003cb4 <HAL_RCC_OscConfig+0x12c>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	685b      	ldr	r3, [r3, #4]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d168      	bne.n	8003cb4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003be2:	2301      	movs	r3, #1
 8003be4:	e24c      	b.n	8004080 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	685b      	ldr	r3, [r3, #4]
 8003bea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bee:	d106      	bne.n	8003bfe <HAL_RCC_OscConfig+0x76>
 8003bf0:	4b80      	ldr	r3, [pc, #512]	; (8003df4 <HAL_RCC_OscConfig+0x26c>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4a7f      	ldr	r2, [pc, #508]	; (8003df4 <HAL_RCC_OscConfig+0x26c>)
 8003bf6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bfa:	6013      	str	r3, [r2, #0]
 8003bfc:	e02e      	b.n	8003c5c <HAL_RCC_OscConfig+0xd4>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	685b      	ldr	r3, [r3, #4]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d10c      	bne.n	8003c20 <HAL_RCC_OscConfig+0x98>
 8003c06:	4b7b      	ldr	r3, [pc, #492]	; (8003df4 <HAL_RCC_OscConfig+0x26c>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	4a7a      	ldr	r2, [pc, #488]	; (8003df4 <HAL_RCC_OscConfig+0x26c>)
 8003c0c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c10:	6013      	str	r3, [r2, #0]
 8003c12:	4b78      	ldr	r3, [pc, #480]	; (8003df4 <HAL_RCC_OscConfig+0x26c>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4a77      	ldr	r2, [pc, #476]	; (8003df4 <HAL_RCC_OscConfig+0x26c>)
 8003c18:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c1c:	6013      	str	r3, [r2, #0]
 8003c1e:	e01d      	b.n	8003c5c <HAL_RCC_OscConfig+0xd4>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	685b      	ldr	r3, [r3, #4]
 8003c24:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c28:	d10c      	bne.n	8003c44 <HAL_RCC_OscConfig+0xbc>
 8003c2a:	4b72      	ldr	r3, [pc, #456]	; (8003df4 <HAL_RCC_OscConfig+0x26c>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4a71      	ldr	r2, [pc, #452]	; (8003df4 <HAL_RCC_OscConfig+0x26c>)
 8003c30:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c34:	6013      	str	r3, [r2, #0]
 8003c36:	4b6f      	ldr	r3, [pc, #444]	; (8003df4 <HAL_RCC_OscConfig+0x26c>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4a6e      	ldr	r2, [pc, #440]	; (8003df4 <HAL_RCC_OscConfig+0x26c>)
 8003c3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c40:	6013      	str	r3, [r2, #0]
 8003c42:	e00b      	b.n	8003c5c <HAL_RCC_OscConfig+0xd4>
 8003c44:	4b6b      	ldr	r3, [pc, #428]	; (8003df4 <HAL_RCC_OscConfig+0x26c>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4a6a      	ldr	r2, [pc, #424]	; (8003df4 <HAL_RCC_OscConfig+0x26c>)
 8003c4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c4e:	6013      	str	r3, [r2, #0]
 8003c50:	4b68      	ldr	r3, [pc, #416]	; (8003df4 <HAL_RCC_OscConfig+0x26c>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	4a67      	ldr	r2, [pc, #412]	; (8003df4 <HAL_RCC_OscConfig+0x26c>)
 8003c56:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c5a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	685b      	ldr	r3, [r3, #4]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d013      	beq.n	8003c8c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c64:	f7fe fc82 	bl	800256c <HAL_GetTick>
 8003c68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c6a:	e008      	b.n	8003c7e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c6c:	f7fe fc7e 	bl	800256c <HAL_GetTick>
 8003c70:	4602      	mov	r2, r0
 8003c72:	693b      	ldr	r3, [r7, #16]
 8003c74:	1ad3      	subs	r3, r2, r3
 8003c76:	2b64      	cmp	r3, #100	; 0x64
 8003c78:	d901      	bls.n	8003c7e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003c7a:	2303      	movs	r3, #3
 8003c7c:	e200      	b.n	8004080 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c7e:	4b5d      	ldr	r3, [pc, #372]	; (8003df4 <HAL_RCC_OscConfig+0x26c>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d0f0      	beq.n	8003c6c <HAL_RCC_OscConfig+0xe4>
 8003c8a:	e014      	b.n	8003cb6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c8c:	f7fe fc6e 	bl	800256c <HAL_GetTick>
 8003c90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c92:	e008      	b.n	8003ca6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c94:	f7fe fc6a 	bl	800256c <HAL_GetTick>
 8003c98:	4602      	mov	r2, r0
 8003c9a:	693b      	ldr	r3, [r7, #16]
 8003c9c:	1ad3      	subs	r3, r2, r3
 8003c9e:	2b64      	cmp	r3, #100	; 0x64
 8003ca0:	d901      	bls.n	8003ca6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003ca2:	2303      	movs	r3, #3
 8003ca4:	e1ec      	b.n	8004080 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ca6:	4b53      	ldr	r3, [pc, #332]	; (8003df4 <HAL_RCC_OscConfig+0x26c>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d1f0      	bne.n	8003c94 <HAL_RCC_OscConfig+0x10c>
 8003cb2:	e000      	b.n	8003cb6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cb4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f003 0302 	and.w	r3, r3, #2
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d063      	beq.n	8003d8a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003cc2:	4b4c      	ldr	r3, [pc, #304]	; (8003df4 <HAL_RCC_OscConfig+0x26c>)
 8003cc4:	685b      	ldr	r3, [r3, #4]
 8003cc6:	f003 030c 	and.w	r3, r3, #12
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d00b      	beq.n	8003ce6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003cce:	4b49      	ldr	r3, [pc, #292]	; (8003df4 <HAL_RCC_OscConfig+0x26c>)
 8003cd0:	685b      	ldr	r3, [r3, #4]
 8003cd2:	f003 030c 	and.w	r3, r3, #12
 8003cd6:	2b08      	cmp	r3, #8
 8003cd8:	d11c      	bne.n	8003d14 <HAL_RCC_OscConfig+0x18c>
 8003cda:	4b46      	ldr	r3, [pc, #280]	; (8003df4 <HAL_RCC_OscConfig+0x26c>)
 8003cdc:	685b      	ldr	r3, [r3, #4]
 8003cde:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d116      	bne.n	8003d14 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ce6:	4b43      	ldr	r3, [pc, #268]	; (8003df4 <HAL_RCC_OscConfig+0x26c>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f003 0302 	and.w	r3, r3, #2
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d005      	beq.n	8003cfe <HAL_RCC_OscConfig+0x176>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	691b      	ldr	r3, [r3, #16]
 8003cf6:	2b01      	cmp	r3, #1
 8003cf8:	d001      	beq.n	8003cfe <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	e1c0      	b.n	8004080 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cfe:	4b3d      	ldr	r3, [pc, #244]	; (8003df4 <HAL_RCC_OscConfig+0x26c>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	695b      	ldr	r3, [r3, #20]
 8003d0a:	00db      	lsls	r3, r3, #3
 8003d0c:	4939      	ldr	r1, [pc, #228]	; (8003df4 <HAL_RCC_OscConfig+0x26c>)
 8003d0e:	4313      	orrs	r3, r2
 8003d10:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d12:	e03a      	b.n	8003d8a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	691b      	ldr	r3, [r3, #16]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d020      	beq.n	8003d5e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d1c:	4b36      	ldr	r3, [pc, #216]	; (8003df8 <HAL_RCC_OscConfig+0x270>)
 8003d1e:	2201      	movs	r2, #1
 8003d20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d22:	f7fe fc23 	bl	800256c <HAL_GetTick>
 8003d26:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d28:	e008      	b.n	8003d3c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d2a:	f7fe fc1f 	bl	800256c <HAL_GetTick>
 8003d2e:	4602      	mov	r2, r0
 8003d30:	693b      	ldr	r3, [r7, #16]
 8003d32:	1ad3      	subs	r3, r2, r3
 8003d34:	2b02      	cmp	r3, #2
 8003d36:	d901      	bls.n	8003d3c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003d38:	2303      	movs	r3, #3
 8003d3a:	e1a1      	b.n	8004080 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d3c:	4b2d      	ldr	r3, [pc, #180]	; (8003df4 <HAL_RCC_OscConfig+0x26c>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f003 0302 	and.w	r3, r3, #2
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d0f0      	beq.n	8003d2a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d48:	4b2a      	ldr	r3, [pc, #168]	; (8003df4 <HAL_RCC_OscConfig+0x26c>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	695b      	ldr	r3, [r3, #20]
 8003d54:	00db      	lsls	r3, r3, #3
 8003d56:	4927      	ldr	r1, [pc, #156]	; (8003df4 <HAL_RCC_OscConfig+0x26c>)
 8003d58:	4313      	orrs	r3, r2
 8003d5a:	600b      	str	r3, [r1, #0]
 8003d5c:	e015      	b.n	8003d8a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d5e:	4b26      	ldr	r3, [pc, #152]	; (8003df8 <HAL_RCC_OscConfig+0x270>)
 8003d60:	2200      	movs	r2, #0
 8003d62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d64:	f7fe fc02 	bl	800256c <HAL_GetTick>
 8003d68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d6a:	e008      	b.n	8003d7e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d6c:	f7fe fbfe 	bl	800256c <HAL_GetTick>
 8003d70:	4602      	mov	r2, r0
 8003d72:	693b      	ldr	r3, [r7, #16]
 8003d74:	1ad3      	subs	r3, r2, r3
 8003d76:	2b02      	cmp	r3, #2
 8003d78:	d901      	bls.n	8003d7e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003d7a:	2303      	movs	r3, #3
 8003d7c:	e180      	b.n	8004080 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d7e:	4b1d      	ldr	r3, [pc, #116]	; (8003df4 <HAL_RCC_OscConfig+0x26c>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f003 0302 	and.w	r3, r3, #2
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d1f0      	bne.n	8003d6c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f003 0308 	and.w	r3, r3, #8
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d03a      	beq.n	8003e0c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	699b      	ldr	r3, [r3, #24]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d019      	beq.n	8003dd2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d9e:	4b17      	ldr	r3, [pc, #92]	; (8003dfc <HAL_RCC_OscConfig+0x274>)
 8003da0:	2201      	movs	r2, #1
 8003da2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003da4:	f7fe fbe2 	bl	800256c <HAL_GetTick>
 8003da8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003daa:	e008      	b.n	8003dbe <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003dac:	f7fe fbde 	bl	800256c <HAL_GetTick>
 8003db0:	4602      	mov	r2, r0
 8003db2:	693b      	ldr	r3, [r7, #16]
 8003db4:	1ad3      	subs	r3, r2, r3
 8003db6:	2b02      	cmp	r3, #2
 8003db8:	d901      	bls.n	8003dbe <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003dba:	2303      	movs	r3, #3
 8003dbc:	e160      	b.n	8004080 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003dbe:	4b0d      	ldr	r3, [pc, #52]	; (8003df4 <HAL_RCC_OscConfig+0x26c>)
 8003dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dc2:	f003 0302 	and.w	r3, r3, #2
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d0f0      	beq.n	8003dac <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003dca:	2001      	movs	r0, #1
 8003dcc:	f000 fad8 	bl	8004380 <RCC_Delay>
 8003dd0:	e01c      	b.n	8003e0c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003dd2:	4b0a      	ldr	r3, [pc, #40]	; (8003dfc <HAL_RCC_OscConfig+0x274>)
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003dd8:	f7fe fbc8 	bl	800256c <HAL_GetTick>
 8003ddc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003dde:	e00f      	b.n	8003e00 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003de0:	f7fe fbc4 	bl	800256c <HAL_GetTick>
 8003de4:	4602      	mov	r2, r0
 8003de6:	693b      	ldr	r3, [r7, #16]
 8003de8:	1ad3      	subs	r3, r2, r3
 8003dea:	2b02      	cmp	r3, #2
 8003dec:	d908      	bls.n	8003e00 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003dee:	2303      	movs	r3, #3
 8003df0:	e146      	b.n	8004080 <HAL_RCC_OscConfig+0x4f8>
 8003df2:	bf00      	nop
 8003df4:	40021000 	.word	0x40021000
 8003df8:	42420000 	.word	0x42420000
 8003dfc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e00:	4b92      	ldr	r3, [pc, #584]	; (800404c <HAL_RCC_OscConfig+0x4c4>)
 8003e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e04:	f003 0302 	and.w	r3, r3, #2
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d1e9      	bne.n	8003de0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f003 0304 	and.w	r3, r3, #4
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	f000 80a6 	beq.w	8003f66 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e1e:	4b8b      	ldr	r3, [pc, #556]	; (800404c <HAL_RCC_OscConfig+0x4c4>)
 8003e20:	69db      	ldr	r3, [r3, #28]
 8003e22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d10d      	bne.n	8003e46 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e2a:	4b88      	ldr	r3, [pc, #544]	; (800404c <HAL_RCC_OscConfig+0x4c4>)
 8003e2c:	69db      	ldr	r3, [r3, #28]
 8003e2e:	4a87      	ldr	r2, [pc, #540]	; (800404c <HAL_RCC_OscConfig+0x4c4>)
 8003e30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e34:	61d3      	str	r3, [r2, #28]
 8003e36:	4b85      	ldr	r3, [pc, #532]	; (800404c <HAL_RCC_OscConfig+0x4c4>)
 8003e38:	69db      	ldr	r3, [r3, #28]
 8003e3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e3e:	60bb      	str	r3, [r7, #8]
 8003e40:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e42:	2301      	movs	r3, #1
 8003e44:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e46:	4b82      	ldr	r3, [pc, #520]	; (8004050 <HAL_RCC_OscConfig+0x4c8>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d118      	bne.n	8003e84 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e52:	4b7f      	ldr	r3, [pc, #508]	; (8004050 <HAL_RCC_OscConfig+0x4c8>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4a7e      	ldr	r2, [pc, #504]	; (8004050 <HAL_RCC_OscConfig+0x4c8>)
 8003e58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e5c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e5e:	f7fe fb85 	bl	800256c <HAL_GetTick>
 8003e62:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e64:	e008      	b.n	8003e78 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e66:	f7fe fb81 	bl	800256c <HAL_GetTick>
 8003e6a:	4602      	mov	r2, r0
 8003e6c:	693b      	ldr	r3, [r7, #16]
 8003e6e:	1ad3      	subs	r3, r2, r3
 8003e70:	2b64      	cmp	r3, #100	; 0x64
 8003e72:	d901      	bls.n	8003e78 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003e74:	2303      	movs	r3, #3
 8003e76:	e103      	b.n	8004080 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e78:	4b75      	ldr	r3, [pc, #468]	; (8004050 <HAL_RCC_OscConfig+0x4c8>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d0f0      	beq.n	8003e66 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	68db      	ldr	r3, [r3, #12]
 8003e88:	2b01      	cmp	r3, #1
 8003e8a:	d106      	bne.n	8003e9a <HAL_RCC_OscConfig+0x312>
 8003e8c:	4b6f      	ldr	r3, [pc, #444]	; (800404c <HAL_RCC_OscConfig+0x4c4>)
 8003e8e:	6a1b      	ldr	r3, [r3, #32]
 8003e90:	4a6e      	ldr	r2, [pc, #440]	; (800404c <HAL_RCC_OscConfig+0x4c4>)
 8003e92:	f043 0301 	orr.w	r3, r3, #1
 8003e96:	6213      	str	r3, [r2, #32]
 8003e98:	e02d      	b.n	8003ef6 <HAL_RCC_OscConfig+0x36e>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	68db      	ldr	r3, [r3, #12]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d10c      	bne.n	8003ebc <HAL_RCC_OscConfig+0x334>
 8003ea2:	4b6a      	ldr	r3, [pc, #424]	; (800404c <HAL_RCC_OscConfig+0x4c4>)
 8003ea4:	6a1b      	ldr	r3, [r3, #32]
 8003ea6:	4a69      	ldr	r2, [pc, #420]	; (800404c <HAL_RCC_OscConfig+0x4c4>)
 8003ea8:	f023 0301 	bic.w	r3, r3, #1
 8003eac:	6213      	str	r3, [r2, #32]
 8003eae:	4b67      	ldr	r3, [pc, #412]	; (800404c <HAL_RCC_OscConfig+0x4c4>)
 8003eb0:	6a1b      	ldr	r3, [r3, #32]
 8003eb2:	4a66      	ldr	r2, [pc, #408]	; (800404c <HAL_RCC_OscConfig+0x4c4>)
 8003eb4:	f023 0304 	bic.w	r3, r3, #4
 8003eb8:	6213      	str	r3, [r2, #32]
 8003eba:	e01c      	b.n	8003ef6 <HAL_RCC_OscConfig+0x36e>
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	68db      	ldr	r3, [r3, #12]
 8003ec0:	2b05      	cmp	r3, #5
 8003ec2:	d10c      	bne.n	8003ede <HAL_RCC_OscConfig+0x356>
 8003ec4:	4b61      	ldr	r3, [pc, #388]	; (800404c <HAL_RCC_OscConfig+0x4c4>)
 8003ec6:	6a1b      	ldr	r3, [r3, #32]
 8003ec8:	4a60      	ldr	r2, [pc, #384]	; (800404c <HAL_RCC_OscConfig+0x4c4>)
 8003eca:	f043 0304 	orr.w	r3, r3, #4
 8003ece:	6213      	str	r3, [r2, #32]
 8003ed0:	4b5e      	ldr	r3, [pc, #376]	; (800404c <HAL_RCC_OscConfig+0x4c4>)
 8003ed2:	6a1b      	ldr	r3, [r3, #32]
 8003ed4:	4a5d      	ldr	r2, [pc, #372]	; (800404c <HAL_RCC_OscConfig+0x4c4>)
 8003ed6:	f043 0301 	orr.w	r3, r3, #1
 8003eda:	6213      	str	r3, [r2, #32]
 8003edc:	e00b      	b.n	8003ef6 <HAL_RCC_OscConfig+0x36e>
 8003ede:	4b5b      	ldr	r3, [pc, #364]	; (800404c <HAL_RCC_OscConfig+0x4c4>)
 8003ee0:	6a1b      	ldr	r3, [r3, #32]
 8003ee2:	4a5a      	ldr	r2, [pc, #360]	; (800404c <HAL_RCC_OscConfig+0x4c4>)
 8003ee4:	f023 0301 	bic.w	r3, r3, #1
 8003ee8:	6213      	str	r3, [r2, #32]
 8003eea:	4b58      	ldr	r3, [pc, #352]	; (800404c <HAL_RCC_OscConfig+0x4c4>)
 8003eec:	6a1b      	ldr	r3, [r3, #32]
 8003eee:	4a57      	ldr	r2, [pc, #348]	; (800404c <HAL_RCC_OscConfig+0x4c4>)
 8003ef0:	f023 0304 	bic.w	r3, r3, #4
 8003ef4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	68db      	ldr	r3, [r3, #12]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d015      	beq.n	8003f2a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003efe:	f7fe fb35 	bl	800256c <HAL_GetTick>
 8003f02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f04:	e00a      	b.n	8003f1c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f06:	f7fe fb31 	bl	800256c <HAL_GetTick>
 8003f0a:	4602      	mov	r2, r0
 8003f0c:	693b      	ldr	r3, [r7, #16]
 8003f0e:	1ad3      	subs	r3, r2, r3
 8003f10:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d901      	bls.n	8003f1c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003f18:	2303      	movs	r3, #3
 8003f1a:	e0b1      	b.n	8004080 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f1c:	4b4b      	ldr	r3, [pc, #300]	; (800404c <HAL_RCC_OscConfig+0x4c4>)
 8003f1e:	6a1b      	ldr	r3, [r3, #32]
 8003f20:	f003 0302 	and.w	r3, r3, #2
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d0ee      	beq.n	8003f06 <HAL_RCC_OscConfig+0x37e>
 8003f28:	e014      	b.n	8003f54 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f2a:	f7fe fb1f 	bl	800256c <HAL_GetTick>
 8003f2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f30:	e00a      	b.n	8003f48 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f32:	f7fe fb1b 	bl	800256c <HAL_GetTick>
 8003f36:	4602      	mov	r2, r0
 8003f38:	693b      	ldr	r3, [r7, #16]
 8003f3a:	1ad3      	subs	r3, r2, r3
 8003f3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d901      	bls.n	8003f48 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003f44:	2303      	movs	r3, #3
 8003f46:	e09b      	b.n	8004080 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f48:	4b40      	ldr	r3, [pc, #256]	; (800404c <HAL_RCC_OscConfig+0x4c4>)
 8003f4a:	6a1b      	ldr	r3, [r3, #32]
 8003f4c:	f003 0302 	and.w	r3, r3, #2
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d1ee      	bne.n	8003f32 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003f54:	7dfb      	ldrb	r3, [r7, #23]
 8003f56:	2b01      	cmp	r3, #1
 8003f58:	d105      	bne.n	8003f66 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f5a:	4b3c      	ldr	r3, [pc, #240]	; (800404c <HAL_RCC_OscConfig+0x4c4>)
 8003f5c:	69db      	ldr	r3, [r3, #28]
 8003f5e:	4a3b      	ldr	r2, [pc, #236]	; (800404c <HAL_RCC_OscConfig+0x4c4>)
 8003f60:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f64:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	69db      	ldr	r3, [r3, #28]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	f000 8087 	beq.w	800407e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003f70:	4b36      	ldr	r3, [pc, #216]	; (800404c <HAL_RCC_OscConfig+0x4c4>)
 8003f72:	685b      	ldr	r3, [r3, #4]
 8003f74:	f003 030c 	and.w	r3, r3, #12
 8003f78:	2b08      	cmp	r3, #8
 8003f7a:	d061      	beq.n	8004040 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	69db      	ldr	r3, [r3, #28]
 8003f80:	2b02      	cmp	r3, #2
 8003f82:	d146      	bne.n	8004012 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f84:	4b33      	ldr	r3, [pc, #204]	; (8004054 <HAL_RCC_OscConfig+0x4cc>)
 8003f86:	2200      	movs	r2, #0
 8003f88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f8a:	f7fe faef 	bl	800256c <HAL_GetTick>
 8003f8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f90:	e008      	b.n	8003fa4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f92:	f7fe faeb 	bl	800256c <HAL_GetTick>
 8003f96:	4602      	mov	r2, r0
 8003f98:	693b      	ldr	r3, [r7, #16]
 8003f9a:	1ad3      	subs	r3, r2, r3
 8003f9c:	2b02      	cmp	r3, #2
 8003f9e:	d901      	bls.n	8003fa4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003fa0:	2303      	movs	r3, #3
 8003fa2:	e06d      	b.n	8004080 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003fa4:	4b29      	ldr	r3, [pc, #164]	; (800404c <HAL_RCC_OscConfig+0x4c4>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d1f0      	bne.n	8003f92 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6a1b      	ldr	r3, [r3, #32]
 8003fb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fb8:	d108      	bne.n	8003fcc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003fba:	4b24      	ldr	r3, [pc, #144]	; (800404c <HAL_RCC_OscConfig+0x4c4>)
 8003fbc:	685b      	ldr	r3, [r3, #4]
 8003fbe:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	689b      	ldr	r3, [r3, #8]
 8003fc6:	4921      	ldr	r1, [pc, #132]	; (800404c <HAL_RCC_OscConfig+0x4c4>)
 8003fc8:	4313      	orrs	r3, r2
 8003fca:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003fcc:	4b1f      	ldr	r3, [pc, #124]	; (800404c <HAL_RCC_OscConfig+0x4c4>)
 8003fce:	685b      	ldr	r3, [r3, #4]
 8003fd0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6a19      	ldr	r1, [r3, #32]
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fdc:	430b      	orrs	r3, r1
 8003fde:	491b      	ldr	r1, [pc, #108]	; (800404c <HAL_RCC_OscConfig+0x4c4>)
 8003fe0:	4313      	orrs	r3, r2
 8003fe2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003fe4:	4b1b      	ldr	r3, [pc, #108]	; (8004054 <HAL_RCC_OscConfig+0x4cc>)
 8003fe6:	2201      	movs	r2, #1
 8003fe8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fea:	f7fe fabf 	bl	800256c <HAL_GetTick>
 8003fee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003ff0:	e008      	b.n	8004004 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ff2:	f7fe fabb 	bl	800256c <HAL_GetTick>
 8003ff6:	4602      	mov	r2, r0
 8003ff8:	693b      	ldr	r3, [r7, #16]
 8003ffa:	1ad3      	subs	r3, r2, r3
 8003ffc:	2b02      	cmp	r3, #2
 8003ffe:	d901      	bls.n	8004004 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004000:	2303      	movs	r3, #3
 8004002:	e03d      	b.n	8004080 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004004:	4b11      	ldr	r3, [pc, #68]	; (800404c <HAL_RCC_OscConfig+0x4c4>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800400c:	2b00      	cmp	r3, #0
 800400e:	d0f0      	beq.n	8003ff2 <HAL_RCC_OscConfig+0x46a>
 8004010:	e035      	b.n	800407e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004012:	4b10      	ldr	r3, [pc, #64]	; (8004054 <HAL_RCC_OscConfig+0x4cc>)
 8004014:	2200      	movs	r2, #0
 8004016:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004018:	f7fe faa8 	bl	800256c <HAL_GetTick>
 800401c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800401e:	e008      	b.n	8004032 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004020:	f7fe faa4 	bl	800256c <HAL_GetTick>
 8004024:	4602      	mov	r2, r0
 8004026:	693b      	ldr	r3, [r7, #16]
 8004028:	1ad3      	subs	r3, r2, r3
 800402a:	2b02      	cmp	r3, #2
 800402c:	d901      	bls.n	8004032 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800402e:	2303      	movs	r3, #3
 8004030:	e026      	b.n	8004080 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004032:	4b06      	ldr	r3, [pc, #24]	; (800404c <HAL_RCC_OscConfig+0x4c4>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800403a:	2b00      	cmp	r3, #0
 800403c:	d1f0      	bne.n	8004020 <HAL_RCC_OscConfig+0x498>
 800403e:	e01e      	b.n	800407e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	69db      	ldr	r3, [r3, #28]
 8004044:	2b01      	cmp	r3, #1
 8004046:	d107      	bne.n	8004058 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004048:	2301      	movs	r3, #1
 800404a:	e019      	b.n	8004080 <HAL_RCC_OscConfig+0x4f8>
 800404c:	40021000 	.word	0x40021000
 8004050:	40007000 	.word	0x40007000
 8004054:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004058:	4b0b      	ldr	r3, [pc, #44]	; (8004088 <HAL_RCC_OscConfig+0x500>)
 800405a:	685b      	ldr	r3, [r3, #4]
 800405c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6a1b      	ldr	r3, [r3, #32]
 8004068:	429a      	cmp	r2, r3
 800406a:	d106      	bne.n	800407a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004076:	429a      	cmp	r2, r3
 8004078:	d001      	beq.n	800407e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800407a:	2301      	movs	r3, #1
 800407c:	e000      	b.n	8004080 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800407e:	2300      	movs	r3, #0
}
 8004080:	4618      	mov	r0, r3
 8004082:	3718      	adds	r7, #24
 8004084:	46bd      	mov	sp, r7
 8004086:	bd80      	pop	{r7, pc}
 8004088:	40021000 	.word	0x40021000

0800408c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b084      	sub	sp, #16
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
 8004094:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2b00      	cmp	r3, #0
 800409a:	d101      	bne.n	80040a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800409c:	2301      	movs	r3, #1
 800409e:	e0d0      	b.n	8004242 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80040a0:	4b6a      	ldr	r3, [pc, #424]	; (800424c <HAL_RCC_ClockConfig+0x1c0>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f003 0307 	and.w	r3, r3, #7
 80040a8:	683a      	ldr	r2, [r7, #0]
 80040aa:	429a      	cmp	r2, r3
 80040ac:	d910      	bls.n	80040d0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040ae:	4b67      	ldr	r3, [pc, #412]	; (800424c <HAL_RCC_ClockConfig+0x1c0>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f023 0207 	bic.w	r2, r3, #7
 80040b6:	4965      	ldr	r1, [pc, #404]	; (800424c <HAL_RCC_ClockConfig+0x1c0>)
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	4313      	orrs	r3, r2
 80040bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80040be:	4b63      	ldr	r3, [pc, #396]	; (800424c <HAL_RCC_ClockConfig+0x1c0>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f003 0307 	and.w	r3, r3, #7
 80040c6:	683a      	ldr	r2, [r7, #0]
 80040c8:	429a      	cmp	r2, r3
 80040ca:	d001      	beq.n	80040d0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80040cc:	2301      	movs	r3, #1
 80040ce:	e0b8      	b.n	8004242 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f003 0302 	and.w	r3, r3, #2
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d020      	beq.n	800411e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f003 0304 	and.w	r3, r3, #4
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d005      	beq.n	80040f4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80040e8:	4b59      	ldr	r3, [pc, #356]	; (8004250 <HAL_RCC_ClockConfig+0x1c4>)
 80040ea:	685b      	ldr	r3, [r3, #4]
 80040ec:	4a58      	ldr	r2, [pc, #352]	; (8004250 <HAL_RCC_ClockConfig+0x1c4>)
 80040ee:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80040f2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f003 0308 	and.w	r3, r3, #8
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d005      	beq.n	800410c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004100:	4b53      	ldr	r3, [pc, #332]	; (8004250 <HAL_RCC_ClockConfig+0x1c4>)
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	4a52      	ldr	r2, [pc, #328]	; (8004250 <HAL_RCC_ClockConfig+0x1c4>)
 8004106:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800410a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800410c:	4b50      	ldr	r3, [pc, #320]	; (8004250 <HAL_RCC_ClockConfig+0x1c4>)
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	689b      	ldr	r3, [r3, #8]
 8004118:	494d      	ldr	r1, [pc, #308]	; (8004250 <HAL_RCC_ClockConfig+0x1c4>)
 800411a:	4313      	orrs	r3, r2
 800411c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f003 0301 	and.w	r3, r3, #1
 8004126:	2b00      	cmp	r3, #0
 8004128:	d040      	beq.n	80041ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	685b      	ldr	r3, [r3, #4]
 800412e:	2b01      	cmp	r3, #1
 8004130:	d107      	bne.n	8004142 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004132:	4b47      	ldr	r3, [pc, #284]	; (8004250 <HAL_RCC_ClockConfig+0x1c4>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800413a:	2b00      	cmp	r3, #0
 800413c:	d115      	bne.n	800416a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800413e:	2301      	movs	r3, #1
 8004140:	e07f      	b.n	8004242 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	685b      	ldr	r3, [r3, #4]
 8004146:	2b02      	cmp	r3, #2
 8004148:	d107      	bne.n	800415a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800414a:	4b41      	ldr	r3, [pc, #260]	; (8004250 <HAL_RCC_ClockConfig+0x1c4>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004152:	2b00      	cmp	r3, #0
 8004154:	d109      	bne.n	800416a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004156:	2301      	movs	r3, #1
 8004158:	e073      	b.n	8004242 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800415a:	4b3d      	ldr	r3, [pc, #244]	; (8004250 <HAL_RCC_ClockConfig+0x1c4>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f003 0302 	and.w	r3, r3, #2
 8004162:	2b00      	cmp	r3, #0
 8004164:	d101      	bne.n	800416a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004166:	2301      	movs	r3, #1
 8004168:	e06b      	b.n	8004242 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800416a:	4b39      	ldr	r3, [pc, #228]	; (8004250 <HAL_RCC_ClockConfig+0x1c4>)
 800416c:	685b      	ldr	r3, [r3, #4]
 800416e:	f023 0203 	bic.w	r2, r3, #3
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	685b      	ldr	r3, [r3, #4]
 8004176:	4936      	ldr	r1, [pc, #216]	; (8004250 <HAL_RCC_ClockConfig+0x1c4>)
 8004178:	4313      	orrs	r3, r2
 800417a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800417c:	f7fe f9f6 	bl	800256c <HAL_GetTick>
 8004180:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004182:	e00a      	b.n	800419a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004184:	f7fe f9f2 	bl	800256c <HAL_GetTick>
 8004188:	4602      	mov	r2, r0
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	1ad3      	subs	r3, r2, r3
 800418e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004192:	4293      	cmp	r3, r2
 8004194:	d901      	bls.n	800419a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004196:	2303      	movs	r3, #3
 8004198:	e053      	b.n	8004242 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800419a:	4b2d      	ldr	r3, [pc, #180]	; (8004250 <HAL_RCC_ClockConfig+0x1c4>)
 800419c:	685b      	ldr	r3, [r3, #4]
 800419e:	f003 020c 	and.w	r2, r3, #12
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	685b      	ldr	r3, [r3, #4]
 80041a6:	009b      	lsls	r3, r3, #2
 80041a8:	429a      	cmp	r2, r3
 80041aa:	d1eb      	bne.n	8004184 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80041ac:	4b27      	ldr	r3, [pc, #156]	; (800424c <HAL_RCC_ClockConfig+0x1c0>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f003 0307 	and.w	r3, r3, #7
 80041b4:	683a      	ldr	r2, [r7, #0]
 80041b6:	429a      	cmp	r2, r3
 80041b8:	d210      	bcs.n	80041dc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041ba:	4b24      	ldr	r3, [pc, #144]	; (800424c <HAL_RCC_ClockConfig+0x1c0>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f023 0207 	bic.w	r2, r3, #7
 80041c2:	4922      	ldr	r1, [pc, #136]	; (800424c <HAL_RCC_ClockConfig+0x1c0>)
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	4313      	orrs	r3, r2
 80041c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80041ca:	4b20      	ldr	r3, [pc, #128]	; (800424c <HAL_RCC_ClockConfig+0x1c0>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f003 0307 	and.w	r3, r3, #7
 80041d2:	683a      	ldr	r2, [r7, #0]
 80041d4:	429a      	cmp	r2, r3
 80041d6:	d001      	beq.n	80041dc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80041d8:	2301      	movs	r3, #1
 80041da:	e032      	b.n	8004242 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f003 0304 	and.w	r3, r3, #4
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d008      	beq.n	80041fa <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80041e8:	4b19      	ldr	r3, [pc, #100]	; (8004250 <HAL_RCC_ClockConfig+0x1c4>)
 80041ea:	685b      	ldr	r3, [r3, #4]
 80041ec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	68db      	ldr	r3, [r3, #12]
 80041f4:	4916      	ldr	r1, [pc, #88]	; (8004250 <HAL_RCC_ClockConfig+0x1c4>)
 80041f6:	4313      	orrs	r3, r2
 80041f8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f003 0308 	and.w	r3, r3, #8
 8004202:	2b00      	cmp	r3, #0
 8004204:	d009      	beq.n	800421a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004206:	4b12      	ldr	r3, [pc, #72]	; (8004250 <HAL_RCC_ClockConfig+0x1c4>)
 8004208:	685b      	ldr	r3, [r3, #4]
 800420a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	691b      	ldr	r3, [r3, #16]
 8004212:	00db      	lsls	r3, r3, #3
 8004214:	490e      	ldr	r1, [pc, #56]	; (8004250 <HAL_RCC_ClockConfig+0x1c4>)
 8004216:	4313      	orrs	r3, r2
 8004218:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800421a:	f000 f821 	bl	8004260 <HAL_RCC_GetSysClockFreq>
 800421e:	4602      	mov	r2, r0
 8004220:	4b0b      	ldr	r3, [pc, #44]	; (8004250 <HAL_RCC_ClockConfig+0x1c4>)
 8004222:	685b      	ldr	r3, [r3, #4]
 8004224:	091b      	lsrs	r3, r3, #4
 8004226:	f003 030f 	and.w	r3, r3, #15
 800422a:	490a      	ldr	r1, [pc, #40]	; (8004254 <HAL_RCC_ClockConfig+0x1c8>)
 800422c:	5ccb      	ldrb	r3, [r1, r3]
 800422e:	fa22 f303 	lsr.w	r3, r2, r3
 8004232:	4a09      	ldr	r2, [pc, #36]	; (8004258 <HAL_RCC_ClockConfig+0x1cc>)
 8004234:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004236:	4b09      	ldr	r3, [pc, #36]	; (800425c <HAL_RCC_ClockConfig+0x1d0>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4618      	mov	r0, r3
 800423c:	f7fe f954 	bl	80024e8 <HAL_InitTick>

  return HAL_OK;
 8004240:	2300      	movs	r3, #0
}
 8004242:	4618      	mov	r0, r3
 8004244:	3710      	adds	r7, #16
 8004246:	46bd      	mov	sp, r7
 8004248:	bd80      	pop	{r7, pc}
 800424a:	bf00      	nop
 800424c:	40022000 	.word	0x40022000
 8004250:	40021000 	.word	0x40021000
 8004254:	0800a050 	.word	0x0800a050
 8004258:	20000030 	.word	0x20000030
 800425c:	20000034 	.word	0x20000034

08004260 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004260:	b490      	push	{r4, r7}
 8004262:	b08a      	sub	sp, #40	; 0x28
 8004264:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004266:	4b29      	ldr	r3, [pc, #164]	; (800430c <HAL_RCC_GetSysClockFreq+0xac>)
 8004268:	1d3c      	adds	r4, r7, #4
 800426a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800426c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004270:	f240 2301 	movw	r3, #513	; 0x201
 8004274:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004276:	2300      	movs	r3, #0
 8004278:	61fb      	str	r3, [r7, #28]
 800427a:	2300      	movs	r3, #0
 800427c:	61bb      	str	r3, [r7, #24]
 800427e:	2300      	movs	r3, #0
 8004280:	627b      	str	r3, [r7, #36]	; 0x24
 8004282:	2300      	movs	r3, #0
 8004284:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004286:	2300      	movs	r3, #0
 8004288:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800428a:	4b21      	ldr	r3, [pc, #132]	; (8004310 <HAL_RCC_GetSysClockFreq+0xb0>)
 800428c:	685b      	ldr	r3, [r3, #4]
 800428e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004290:	69fb      	ldr	r3, [r7, #28]
 8004292:	f003 030c 	and.w	r3, r3, #12
 8004296:	2b04      	cmp	r3, #4
 8004298:	d002      	beq.n	80042a0 <HAL_RCC_GetSysClockFreq+0x40>
 800429a:	2b08      	cmp	r3, #8
 800429c:	d003      	beq.n	80042a6 <HAL_RCC_GetSysClockFreq+0x46>
 800429e:	e02b      	b.n	80042f8 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80042a0:	4b1c      	ldr	r3, [pc, #112]	; (8004314 <HAL_RCC_GetSysClockFreq+0xb4>)
 80042a2:	623b      	str	r3, [r7, #32]
      break;
 80042a4:	e02b      	b.n	80042fe <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80042a6:	69fb      	ldr	r3, [r7, #28]
 80042a8:	0c9b      	lsrs	r3, r3, #18
 80042aa:	f003 030f 	and.w	r3, r3, #15
 80042ae:	3328      	adds	r3, #40	; 0x28
 80042b0:	443b      	add	r3, r7
 80042b2:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80042b6:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80042b8:	69fb      	ldr	r3, [r7, #28]
 80042ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d012      	beq.n	80042e8 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80042c2:	4b13      	ldr	r3, [pc, #76]	; (8004310 <HAL_RCC_GetSysClockFreq+0xb0>)
 80042c4:	685b      	ldr	r3, [r3, #4]
 80042c6:	0c5b      	lsrs	r3, r3, #17
 80042c8:	f003 0301 	and.w	r3, r3, #1
 80042cc:	3328      	adds	r3, #40	; 0x28
 80042ce:	443b      	add	r3, r7
 80042d0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80042d4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80042d6:	697b      	ldr	r3, [r7, #20]
 80042d8:	4a0e      	ldr	r2, [pc, #56]	; (8004314 <HAL_RCC_GetSysClockFreq+0xb4>)
 80042da:	fb03 f202 	mul.w	r2, r3, r2
 80042de:	69bb      	ldr	r3, [r7, #24]
 80042e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80042e4:	627b      	str	r3, [r7, #36]	; 0x24
 80042e6:	e004      	b.n	80042f2 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80042e8:	697b      	ldr	r3, [r7, #20]
 80042ea:	4a0b      	ldr	r2, [pc, #44]	; (8004318 <HAL_RCC_GetSysClockFreq+0xb8>)
 80042ec:	fb02 f303 	mul.w	r3, r2, r3
 80042f0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80042f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042f4:	623b      	str	r3, [r7, #32]
      break;
 80042f6:	e002      	b.n	80042fe <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80042f8:	4b06      	ldr	r3, [pc, #24]	; (8004314 <HAL_RCC_GetSysClockFreq+0xb4>)
 80042fa:	623b      	str	r3, [r7, #32]
      break;
 80042fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80042fe:	6a3b      	ldr	r3, [r7, #32]
}
 8004300:	4618      	mov	r0, r3
 8004302:	3728      	adds	r7, #40	; 0x28
 8004304:	46bd      	mov	sp, r7
 8004306:	bc90      	pop	{r4, r7}
 8004308:	4770      	bx	lr
 800430a:	bf00      	nop
 800430c:	0800a040 	.word	0x0800a040
 8004310:	40021000 	.word	0x40021000
 8004314:	007a1200 	.word	0x007a1200
 8004318:	003d0900 	.word	0x003d0900

0800431c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800431c:	b480      	push	{r7}
 800431e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004320:	4b02      	ldr	r3, [pc, #8]	; (800432c <HAL_RCC_GetHCLKFreq+0x10>)
 8004322:	681b      	ldr	r3, [r3, #0]
}
 8004324:	4618      	mov	r0, r3
 8004326:	46bd      	mov	sp, r7
 8004328:	bc80      	pop	{r7}
 800432a:	4770      	bx	lr
 800432c:	20000030 	.word	0x20000030

08004330 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004334:	f7ff fff2 	bl	800431c <HAL_RCC_GetHCLKFreq>
 8004338:	4602      	mov	r2, r0
 800433a:	4b05      	ldr	r3, [pc, #20]	; (8004350 <HAL_RCC_GetPCLK1Freq+0x20>)
 800433c:	685b      	ldr	r3, [r3, #4]
 800433e:	0a1b      	lsrs	r3, r3, #8
 8004340:	f003 0307 	and.w	r3, r3, #7
 8004344:	4903      	ldr	r1, [pc, #12]	; (8004354 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004346:	5ccb      	ldrb	r3, [r1, r3]
 8004348:	fa22 f303 	lsr.w	r3, r2, r3
}
 800434c:	4618      	mov	r0, r3
 800434e:	bd80      	pop	{r7, pc}
 8004350:	40021000 	.word	0x40021000
 8004354:	0800a060 	.word	0x0800a060

08004358 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004358:	b580      	push	{r7, lr}
 800435a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800435c:	f7ff ffde 	bl	800431c <HAL_RCC_GetHCLKFreq>
 8004360:	4602      	mov	r2, r0
 8004362:	4b05      	ldr	r3, [pc, #20]	; (8004378 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004364:	685b      	ldr	r3, [r3, #4]
 8004366:	0adb      	lsrs	r3, r3, #11
 8004368:	f003 0307 	and.w	r3, r3, #7
 800436c:	4903      	ldr	r1, [pc, #12]	; (800437c <HAL_RCC_GetPCLK2Freq+0x24>)
 800436e:	5ccb      	ldrb	r3, [r1, r3]
 8004370:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004374:	4618      	mov	r0, r3
 8004376:	bd80      	pop	{r7, pc}
 8004378:	40021000 	.word	0x40021000
 800437c:	0800a060 	.word	0x0800a060

08004380 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004380:	b480      	push	{r7}
 8004382:	b085      	sub	sp, #20
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004388:	4b0a      	ldr	r3, [pc, #40]	; (80043b4 <RCC_Delay+0x34>)
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4a0a      	ldr	r2, [pc, #40]	; (80043b8 <RCC_Delay+0x38>)
 800438e:	fba2 2303 	umull	r2, r3, r2, r3
 8004392:	0a5b      	lsrs	r3, r3, #9
 8004394:	687a      	ldr	r2, [r7, #4]
 8004396:	fb02 f303 	mul.w	r3, r2, r3
 800439a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800439c:	bf00      	nop
  }
  while (Delay --);
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	1e5a      	subs	r2, r3, #1
 80043a2:	60fa      	str	r2, [r7, #12]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d1f9      	bne.n	800439c <RCC_Delay+0x1c>
}
 80043a8:	bf00      	nop
 80043aa:	bf00      	nop
 80043ac:	3714      	adds	r7, #20
 80043ae:	46bd      	mov	sp, r7
 80043b0:	bc80      	pop	{r7}
 80043b2:	4770      	bx	lr
 80043b4:	20000030 	.word	0x20000030
 80043b8:	10624dd3 	.word	0x10624dd3

080043bc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	b082      	sub	sp, #8
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d101      	bne.n	80043ce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80043ca:	2301      	movs	r3, #1
 80043cc:	e041      	b.n	8004452 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043d4:	b2db      	uxtb	r3, r3
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d106      	bne.n	80043e8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2200      	movs	r2, #0
 80043de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80043e2:	6878      	ldr	r0, [r7, #4]
 80043e4:	f7fd fe84 	bl	80020f0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2202      	movs	r2, #2
 80043ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681a      	ldr	r2, [r3, #0]
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	3304      	adds	r3, #4
 80043f8:	4619      	mov	r1, r3
 80043fa:	4610      	mov	r0, r2
 80043fc:	f000 fc72 	bl	8004ce4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2201      	movs	r2, #1
 8004404:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2201      	movs	r2, #1
 800440c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2201      	movs	r2, #1
 8004414:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2201      	movs	r2, #1
 800441c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2201      	movs	r2, #1
 8004424:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2201      	movs	r2, #1
 800442c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2201      	movs	r2, #1
 8004434:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2201      	movs	r2, #1
 800443c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2201      	movs	r2, #1
 8004444:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2201      	movs	r2, #1
 800444c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004450:	2300      	movs	r3, #0
}
 8004452:	4618      	mov	r0, r3
 8004454:	3708      	adds	r7, #8
 8004456:	46bd      	mov	sp, r7
 8004458:	bd80      	pop	{r7, pc}
	...

0800445c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800445c:	b480      	push	{r7}
 800445e:	b085      	sub	sp, #20
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800446a:	b2db      	uxtb	r3, r3
 800446c:	2b01      	cmp	r3, #1
 800446e:	d001      	beq.n	8004474 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004470:	2301      	movs	r3, #1
 8004472:	e032      	b.n	80044da <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2202      	movs	r2, #2
 8004478:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	4a18      	ldr	r2, [pc, #96]	; (80044e4 <HAL_TIM_Base_Start+0x88>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d00e      	beq.n	80044a4 <HAL_TIM_Base_Start+0x48>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800448e:	d009      	beq.n	80044a4 <HAL_TIM_Base_Start+0x48>
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	4a14      	ldr	r2, [pc, #80]	; (80044e8 <HAL_TIM_Base_Start+0x8c>)
 8004496:	4293      	cmp	r3, r2
 8004498:	d004      	beq.n	80044a4 <HAL_TIM_Base_Start+0x48>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	4a13      	ldr	r2, [pc, #76]	; (80044ec <HAL_TIM_Base_Start+0x90>)
 80044a0:	4293      	cmp	r3, r2
 80044a2:	d111      	bne.n	80044c8 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	689b      	ldr	r3, [r3, #8]
 80044aa:	f003 0307 	and.w	r3, r3, #7
 80044ae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	2b06      	cmp	r3, #6
 80044b4:	d010      	beq.n	80044d8 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	681a      	ldr	r2, [r3, #0]
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f042 0201 	orr.w	r2, r2, #1
 80044c4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044c6:	e007      	b.n	80044d8 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	681a      	ldr	r2, [r3, #0]
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f042 0201 	orr.w	r2, r2, #1
 80044d6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80044d8:	2300      	movs	r3, #0
}
 80044da:	4618      	mov	r0, r3
 80044dc:	3714      	adds	r7, #20
 80044de:	46bd      	mov	sp, r7
 80044e0:	bc80      	pop	{r7}
 80044e2:	4770      	bx	lr
 80044e4:	40012c00 	.word	0x40012c00
 80044e8:	40000400 	.word	0x40000400
 80044ec:	40000800 	.word	0x40000800

080044f0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80044f0:	b480      	push	{r7}
 80044f2:	b085      	sub	sp, #20
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044fe:	b2db      	uxtb	r3, r3
 8004500:	2b01      	cmp	r3, #1
 8004502:	d001      	beq.n	8004508 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004504:	2301      	movs	r3, #1
 8004506:	e03a      	b.n	800457e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2202      	movs	r2, #2
 800450c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	68da      	ldr	r2, [r3, #12]
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f042 0201 	orr.w	r2, r2, #1
 800451e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	4a18      	ldr	r2, [pc, #96]	; (8004588 <HAL_TIM_Base_Start_IT+0x98>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d00e      	beq.n	8004548 <HAL_TIM_Base_Start_IT+0x58>
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004532:	d009      	beq.n	8004548 <HAL_TIM_Base_Start_IT+0x58>
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	4a14      	ldr	r2, [pc, #80]	; (800458c <HAL_TIM_Base_Start_IT+0x9c>)
 800453a:	4293      	cmp	r3, r2
 800453c:	d004      	beq.n	8004548 <HAL_TIM_Base_Start_IT+0x58>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	4a13      	ldr	r2, [pc, #76]	; (8004590 <HAL_TIM_Base_Start_IT+0xa0>)
 8004544:	4293      	cmp	r3, r2
 8004546:	d111      	bne.n	800456c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	689b      	ldr	r3, [r3, #8]
 800454e:	f003 0307 	and.w	r3, r3, #7
 8004552:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	2b06      	cmp	r3, #6
 8004558:	d010      	beq.n	800457c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	681a      	ldr	r2, [r3, #0]
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f042 0201 	orr.w	r2, r2, #1
 8004568:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800456a:	e007      	b.n	800457c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	681a      	ldr	r2, [r3, #0]
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f042 0201 	orr.w	r2, r2, #1
 800457a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800457c:	2300      	movs	r3, #0
}
 800457e:	4618      	mov	r0, r3
 8004580:	3714      	adds	r7, #20
 8004582:	46bd      	mov	sp, r7
 8004584:	bc80      	pop	{r7}
 8004586:	4770      	bx	lr
 8004588:	40012c00 	.word	0x40012c00
 800458c:	40000400 	.word	0x40000400
 8004590:	40000800 	.word	0x40000800

08004594 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b082      	sub	sp, #8
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d101      	bne.n	80045a6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80045a2:	2301      	movs	r3, #1
 80045a4:	e041      	b.n	800462a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045ac:	b2db      	uxtb	r3, r3
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d106      	bne.n	80045c0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2200      	movs	r2, #0
 80045b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80045ba:	6878      	ldr	r0, [r7, #4]
 80045bc:	f000 f839 	bl	8004632 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2202      	movs	r2, #2
 80045c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681a      	ldr	r2, [r3, #0]
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	3304      	adds	r3, #4
 80045d0:	4619      	mov	r1, r3
 80045d2:	4610      	mov	r0, r2
 80045d4:	f000 fb86 	bl	8004ce4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2201      	movs	r2, #1
 80045dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2201      	movs	r2, #1
 80045e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2201      	movs	r2, #1
 80045ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2201      	movs	r2, #1
 80045f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2201      	movs	r2, #1
 80045fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2201      	movs	r2, #1
 8004604:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2201      	movs	r2, #1
 800460c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2201      	movs	r2, #1
 8004614:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2201      	movs	r2, #1
 800461c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2201      	movs	r2, #1
 8004624:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004628:	2300      	movs	r3, #0
}
 800462a:	4618      	mov	r0, r3
 800462c:	3708      	adds	r7, #8
 800462e:	46bd      	mov	sp, r7
 8004630:	bd80      	pop	{r7, pc}

08004632 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004632:	b480      	push	{r7}
 8004634:	b083      	sub	sp, #12
 8004636:	af00      	add	r7, sp, #0
 8004638:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800463a:	bf00      	nop
 800463c:	370c      	adds	r7, #12
 800463e:	46bd      	mov	sp, r7
 8004640:	bc80      	pop	{r7}
 8004642:	4770      	bx	lr

08004644 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004644:	b580      	push	{r7, lr}
 8004646:	b084      	sub	sp, #16
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
 800464c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	2b00      	cmp	r3, #0
 8004652:	d109      	bne.n	8004668 <HAL_TIM_PWM_Start+0x24>
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800465a:	b2db      	uxtb	r3, r3
 800465c:	2b01      	cmp	r3, #1
 800465e:	bf14      	ite	ne
 8004660:	2301      	movne	r3, #1
 8004662:	2300      	moveq	r3, #0
 8004664:	b2db      	uxtb	r3, r3
 8004666:	e022      	b.n	80046ae <HAL_TIM_PWM_Start+0x6a>
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	2b04      	cmp	r3, #4
 800466c:	d109      	bne.n	8004682 <HAL_TIM_PWM_Start+0x3e>
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004674:	b2db      	uxtb	r3, r3
 8004676:	2b01      	cmp	r3, #1
 8004678:	bf14      	ite	ne
 800467a:	2301      	movne	r3, #1
 800467c:	2300      	moveq	r3, #0
 800467e:	b2db      	uxtb	r3, r3
 8004680:	e015      	b.n	80046ae <HAL_TIM_PWM_Start+0x6a>
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	2b08      	cmp	r3, #8
 8004686:	d109      	bne.n	800469c <HAL_TIM_PWM_Start+0x58>
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800468e:	b2db      	uxtb	r3, r3
 8004690:	2b01      	cmp	r3, #1
 8004692:	bf14      	ite	ne
 8004694:	2301      	movne	r3, #1
 8004696:	2300      	moveq	r3, #0
 8004698:	b2db      	uxtb	r3, r3
 800469a:	e008      	b.n	80046ae <HAL_TIM_PWM_Start+0x6a>
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80046a2:	b2db      	uxtb	r3, r3
 80046a4:	2b01      	cmp	r3, #1
 80046a6:	bf14      	ite	ne
 80046a8:	2301      	movne	r3, #1
 80046aa:	2300      	moveq	r3, #0
 80046ac:	b2db      	uxtb	r3, r3
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d001      	beq.n	80046b6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80046b2:	2301      	movs	r3, #1
 80046b4:	e05e      	b.n	8004774 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d104      	bne.n	80046c6 <HAL_TIM_PWM_Start+0x82>
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2202      	movs	r2, #2
 80046c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80046c4:	e013      	b.n	80046ee <HAL_TIM_PWM_Start+0xaa>
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	2b04      	cmp	r3, #4
 80046ca:	d104      	bne.n	80046d6 <HAL_TIM_PWM_Start+0x92>
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2202      	movs	r2, #2
 80046d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80046d4:	e00b      	b.n	80046ee <HAL_TIM_PWM_Start+0xaa>
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	2b08      	cmp	r3, #8
 80046da:	d104      	bne.n	80046e6 <HAL_TIM_PWM_Start+0xa2>
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2202      	movs	r2, #2
 80046e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80046e4:	e003      	b.n	80046ee <HAL_TIM_PWM_Start+0xaa>
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2202      	movs	r2, #2
 80046ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	2201      	movs	r2, #1
 80046f4:	6839      	ldr	r1, [r7, #0]
 80046f6:	4618      	mov	r0, r3
 80046f8:	f000 fd74 	bl	80051e4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	4a1e      	ldr	r2, [pc, #120]	; (800477c <HAL_TIM_PWM_Start+0x138>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d107      	bne.n	8004716 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004714:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	4a18      	ldr	r2, [pc, #96]	; (800477c <HAL_TIM_PWM_Start+0x138>)
 800471c:	4293      	cmp	r3, r2
 800471e:	d00e      	beq.n	800473e <HAL_TIM_PWM_Start+0xfa>
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004728:	d009      	beq.n	800473e <HAL_TIM_PWM_Start+0xfa>
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	4a14      	ldr	r2, [pc, #80]	; (8004780 <HAL_TIM_PWM_Start+0x13c>)
 8004730:	4293      	cmp	r3, r2
 8004732:	d004      	beq.n	800473e <HAL_TIM_PWM_Start+0xfa>
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	4a12      	ldr	r2, [pc, #72]	; (8004784 <HAL_TIM_PWM_Start+0x140>)
 800473a:	4293      	cmp	r3, r2
 800473c:	d111      	bne.n	8004762 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	689b      	ldr	r3, [r3, #8]
 8004744:	f003 0307 	and.w	r3, r3, #7
 8004748:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	2b06      	cmp	r3, #6
 800474e:	d010      	beq.n	8004772 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	681a      	ldr	r2, [r3, #0]
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f042 0201 	orr.w	r2, r2, #1
 800475e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004760:	e007      	b.n	8004772 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	681a      	ldr	r2, [r3, #0]
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f042 0201 	orr.w	r2, r2, #1
 8004770:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004772:	2300      	movs	r3, #0
}
 8004774:	4618      	mov	r0, r3
 8004776:	3710      	adds	r7, #16
 8004778:	46bd      	mov	sp, r7
 800477a:	bd80      	pop	{r7, pc}
 800477c:	40012c00 	.word	0x40012c00
 8004780:	40000400 	.word	0x40000400
 8004784:	40000800 	.word	0x40000800

08004788 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004788:	b580      	push	{r7, lr}
 800478a:	b082      	sub	sp, #8
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	691b      	ldr	r3, [r3, #16]
 8004796:	f003 0302 	and.w	r3, r3, #2
 800479a:	2b02      	cmp	r3, #2
 800479c:	d122      	bne.n	80047e4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	68db      	ldr	r3, [r3, #12]
 80047a4:	f003 0302 	and.w	r3, r3, #2
 80047a8:	2b02      	cmp	r3, #2
 80047aa:	d11b      	bne.n	80047e4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f06f 0202 	mvn.w	r2, #2
 80047b4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2201      	movs	r2, #1
 80047ba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	699b      	ldr	r3, [r3, #24]
 80047c2:	f003 0303 	and.w	r3, r3, #3
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d003      	beq.n	80047d2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80047ca:	6878      	ldr	r0, [r7, #4]
 80047cc:	f000 fa6f 	bl	8004cae <HAL_TIM_IC_CaptureCallback>
 80047d0:	e005      	b.n	80047de <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80047d2:	6878      	ldr	r0, [r7, #4]
 80047d4:	f000 fa62 	bl	8004c9c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047d8:	6878      	ldr	r0, [r7, #4]
 80047da:	f000 fa71 	bl	8004cc0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2200      	movs	r2, #0
 80047e2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	691b      	ldr	r3, [r3, #16]
 80047ea:	f003 0304 	and.w	r3, r3, #4
 80047ee:	2b04      	cmp	r3, #4
 80047f0:	d122      	bne.n	8004838 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	68db      	ldr	r3, [r3, #12]
 80047f8:	f003 0304 	and.w	r3, r3, #4
 80047fc:	2b04      	cmp	r3, #4
 80047fe:	d11b      	bne.n	8004838 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f06f 0204 	mvn.w	r2, #4
 8004808:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	2202      	movs	r2, #2
 800480e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	699b      	ldr	r3, [r3, #24]
 8004816:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800481a:	2b00      	cmp	r3, #0
 800481c:	d003      	beq.n	8004826 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800481e:	6878      	ldr	r0, [r7, #4]
 8004820:	f000 fa45 	bl	8004cae <HAL_TIM_IC_CaptureCallback>
 8004824:	e005      	b.n	8004832 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004826:	6878      	ldr	r0, [r7, #4]
 8004828:	f000 fa38 	bl	8004c9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800482c:	6878      	ldr	r0, [r7, #4]
 800482e:	f000 fa47 	bl	8004cc0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2200      	movs	r2, #0
 8004836:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	691b      	ldr	r3, [r3, #16]
 800483e:	f003 0308 	and.w	r3, r3, #8
 8004842:	2b08      	cmp	r3, #8
 8004844:	d122      	bne.n	800488c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	68db      	ldr	r3, [r3, #12]
 800484c:	f003 0308 	and.w	r3, r3, #8
 8004850:	2b08      	cmp	r3, #8
 8004852:	d11b      	bne.n	800488c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f06f 0208 	mvn.w	r2, #8
 800485c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	2204      	movs	r2, #4
 8004862:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	69db      	ldr	r3, [r3, #28]
 800486a:	f003 0303 	and.w	r3, r3, #3
 800486e:	2b00      	cmp	r3, #0
 8004870:	d003      	beq.n	800487a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004872:	6878      	ldr	r0, [r7, #4]
 8004874:	f000 fa1b 	bl	8004cae <HAL_TIM_IC_CaptureCallback>
 8004878:	e005      	b.n	8004886 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800487a:	6878      	ldr	r0, [r7, #4]
 800487c:	f000 fa0e 	bl	8004c9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004880:	6878      	ldr	r0, [r7, #4]
 8004882:	f000 fa1d 	bl	8004cc0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2200      	movs	r2, #0
 800488a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	691b      	ldr	r3, [r3, #16]
 8004892:	f003 0310 	and.w	r3, r3, #16
 8004896:	2b10      	cmp	r3, #16
 8004898:	d122      	bne.n	80048e0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	68db      	ldr	r3, [r3, #12]
 80048a0:	f003 0310 	and.w	r3, r3, #16
 80048a4:	2b10      	cmp	r3, #16
 80048a6:	d11b      	bne.n	80048e0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f06f 0210 	mvn.w	r2, #16
 80048b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	2208      	movs	r2, #8
 80048b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	69db      	ldr	r3, [r3, #28]
 80048be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d003      	beq.n	80048ce <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048c6:	6878      	ldr	r0, [r7, #4]
 80048c8:	f000 f9f1 	bl	8004cae <HAL_TIM_IC_CaptureCallback>
 80048cc:	e005      	b.n	80048da <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048ce:	6878      	ldr	r0, [r7, #4]
 80048d0:	f000 f9e4 	bl	8004c9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048d4:	6878      	ldr	r0, [r7, #4]
 80048d6:	f000 f9f3 	bl	8004cc0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2200      	movs	r2, #0
 80048de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	691b      	ldr	r3, [r3, #16]
 80048e6:	f003 0301 	and.w	r3, r3, #1
 80048ea:	2b01      	cmp	r3, #1
 80048ec:	d10e      	bne.n	800490c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	68db      	ldr	r3, [r3, #12]
 80048f4:	f003 0301 	and.w	r3, r3, #1
 80048f8:	2b01      	cmp	r3, #1
 80048fa:	d107      	bne.n	800490c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f06f 0201 	mvn.w	r2, #1
 8004904:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004906:	6878      	ldr	r0, [r7, #4]
 8004908:	f7fd fa38 	bl	8001d7c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	691b      	ldr	r3, [r3, #16]
 8004912:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004916:	2b80      	cmp	r3, #128	; 0x80
 8004918:	d10e      	bne.n	8004938 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	68db      	ldr	r3, [r3, #12]
 8004920:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004924:	2b80      	cmp	r3, #128	; 0x80
 8004926:	d107      	bne.n	8004938 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004930:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004932:	6878      	ldr	r0, [r7, #4]
 8004934:	f000 fd32 	bl	800539c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	691b      	ldr	r3, [r3, #16]
 800493e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004942:	2b40      	cmp	r3, #64	; 0x40
 8004944:	d10e      	bne.n	8004964 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	68db      	ldr	r3, [r3, #12]
 800494c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004950:	2b40      	cmp	r3, #64	; 0x40
 8004952:	d107      	bne.n	8004964 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800495c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800495e:	6878      	ldr	r0, [r7, #4]
 8004960:	f000 f9b7 	bl	8004cd2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	691b      	ldr	r3, [r3, #16]
 800496a:	f003 0320 	and.w	r3, r3, #32
 800496e:	2b20      	cmp	r3, #32
 8004970:	d10e      	bne.n	8004990 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	68db      	ldr	r3, [r3, #12]
 8004978:	f003 0320 	and.w	r3, r3, #32
 800497c:	2b20      	cmp	r3, #32
 800497e:	d107      	bne.n	8004990 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f06f 0220 	mvn.w	r2, #32
 8004988:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800498a:	6878      	ldr	r0, [r7, #4]
 800498c:	f000 fcfd 	bl	800538a <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004990:	bf00      	nop
 8004992:	3708      	adds	r7, #8
 8004994:	46bd      	mov	sp, r7
 8004996:	bd80      	pop	{r7, pc}

08004998 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004998:	b580      	push	{r7, lr}
 800499a:	b084      	sub	sp, #16
 800499c:	af00      	add	r7, sp, #0
 800499e:	60f8      	str	r0, [r7, #12]
 80049a0:	60b9      	str	r1, [r7, #8]
 80049a2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049aa:	2b01      	cmp	r3, #1
 80049ac:	d101      	bne.n	80049b2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80049ae:	2302      	movs	r3, #2
 80049b0:	e0ac      	b.n	8004b0c <HAL_TIM_PWM_ConfigChannel+0x174>
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	2201      	movs	r2, #1
 80049b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2b0c      	cmp	r3, #12
 80049be:	f200 809f 	bhi.w	8004b00 <HAL_TIM_PWM_ConfigChannel+0x168>
 80049c2:	a201      	add	r2, pc, #4	; (adr r2, 80049c8 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80049c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049c8:	080049fd 	.word	0x080049fd
 80049cc:	08004b01 	.word	0x08004b01
 80049d0:	08004b01 	.word	0x08004b01
 80049d4:	08004b01 	.word	0x08004b01
 80049d8:	08004a3d 	.word	0x08004a3d
 80049dc:	08004b01 	.word	0x08004b01
 80049e0:	08004b01 	.word	0x08004b01
 80049e4:	08004b01 	.word	0x08004b01
 80049e8:	08004a7f 	.word	0x08004a7f
 80049ec:	08004b01 	.word	0x08004b01
 80049f0:	08004b01 	.word	0x08004b01
 80049f4:	08004b01 	.word	0x08004b01
 80049f8:	08004abf 	.word	0x08004abf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	68b9      	ldr	r1, [r7, #8]
 8004a02:	4618      	mov	r0, r3
 8004a04:	f000 f9d0 	bl	8004da8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	699a      	ldr	r2, [r3, #24]
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f042 0208 	orr.w	r2, r2, #8
 8004a16:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	699a      	ldr	r2, [r3, #24]
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f022 0204 	bic.w	r2, r2, #4
 8004a26:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	6999      	ldr	r1, [r3, #24]
 8004a2e:	68bb      	ldr	r3, [r7, #8]
 8004a30:	691a      	ldr	r2, [r3, #16]
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	430a      	orrs	r2, r1
 8004a38:	619a      	str	r2, [r3, #24]
      break;
 8004a3a:	e062      	b.n	8004b02 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	68b9      	ldr	r1, [r7, #8]
 8004a42:	4618      	mov	r0, r3
 8004a44:	f000 fa16 	bl	8004e74 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	699a      	ldr	r2, [r3, #24]
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004a56:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	699a      	ldr	r2, [r3, #24]
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a66:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	6999      	ldr	r1, [r3, #24]
 8004a6e:	68bb      	ldr	r3, [r7, #8]
 8004a70:	691b      	ldr	r3, [r3, #16]
 8004a72:	021a      	lsls	r2, r3, #8
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	430a      	orrs	r2, r1
 8004a7a:	619a      	str	r2, [r3, #24]
      break;
 8004a7c:	e041      	b.n	8004b02 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	68b9      	ldr	r1, [r7, #8]
 8004a84:	4618      	mov	r0, r3
 8004a86:	f000 fa5f 	bl	8004f48 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	69da      	ldr	r2, [r3, #28]
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f042 0208 	orr.w	r2, r2, #8
 8004a98:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	69da      	ldr	r2, [r3, #28]
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f022 0204 	bic.w	r2, r2, #4
 8004aa8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	69d9      	ldr	r1, [r3, #28]
 8004ab0:	68bb      	ldr	r3, [r7, #8]
 8004ab2:	691a      	ldr	r2, [r3, #16]
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	430a      	orrs	r2, r1
 8004aba:	61da      	str	r2, [r3, #28]
      break;
 8004abc:	e021      	b.n	8004b02 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	68b9      	ldr	r1, [r7, #8]
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	f000 faa9 	bl	800501c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	69da      	ldr	r2, [r3, #28]
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004ad8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	69da      	ldr	r2, [r3, #28]
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ae8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	69d9      	ldr	r1, [r3, #28]
 8004af0:	68bb      	ldr	r3, [r7, #8]
 8004af2:	691b      	ldr	r3, [r3, #16]
 8004af4:	021a      	lsls	r2, r3, #8
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	430a      	orrs	r2, r1
 8004afc:	61da      	str	r2, [r3, #28]
      break;
 8004afe:	e000      	b.n	8004b02 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8004b00:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	2200      	movs	r2, #0
 8004b06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004b0a:	2300      	movs	r3, #0
}
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	3710      	adds	r7, #16
 8004b10:	46bd      	mov	sp, r7
 8004b12:	bd80      	pop	{r7, pc}

08004b14 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b084      	sub	sp, #16
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
 8004b1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b24:	2b01      	cmp	r3, #1
 8004b26:	d101      	bne.n	8004b2c <HAL_TIM_ConfigClockSource+0x18>
 8004b28:	2302      	movs	r3, #2
 8004b2a:	e0b3      	b.n	8004c94 <HAL_TIM_ConfigClockSource+0x180>
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2201      	movs	r2, #1
 8004b30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2202      	movs	r2, #2
 8004b38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	689b      	ldr	r3, [r3, #8]
 8004b42:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004b4a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004b52:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	68fa      	ldr	r2, [r7, #12]
 8004b5a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b64:	d03e      	beq.n	8004be4 <HAL_TIM_ConfigClockSource+0xd0>
 8004b66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b6a:	f200 8087 	bhi.w	8004c7c <HAL_TIM_ConfigClockSource+0x168>
 8004b6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b72:	f000 8085 	beq.w	8004c80 <HAL_TIM_ConfigClockSource+0x16c>
 8004b76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b7a:	d87f      	bhi.n	8004c7c <HAL_TIM_ConfigClockSource+0x168>
 8004b7c:	2b70      	cmp	r3, #112	; 0x70
 8004b7e:	d01a      	beq.n	8004bb6 <HAL_TIM_ConfigClockSource+0xa2>
 8004b80:	2b70      	cmp	r3, #112	; 0x70
 8004b82:	d87b      	bhi.n	8004c7c <HAL_TIM_ConfigClockSource+0x168>
 8004b84:	2b60      	cmp	r3, #96	; 0x60
 8004b86:	d050      	beq.n	8004c2a <HAL_TIM_ConfigClockSource+0x116>
 8004b88:	2b60      	cmp	r3, #96	; 0x60
 8004b8a:	d877      	bhi.n	8004c7c <HAL_TIM_ConfigClockSource+0x168>
 8004b8c:	2b50      	cmp	r3, #80	; 0x50
 8004b8e:	d03c      	beq.n	8004c0a <HAL_TIM_ConfigClockSource+0xf6>
 8004b90:	2b50      	cmp	r3, #80	; 0x50
 8004b92:	d873      	bhi.n	8004c7c <HAL_TIM_ConfigClockSource+0x168>
 8004b94:	2b40      	cmp	r3, #64	; 0x40
 8004b96:	d058      	beq.n	8004c4a <HAL_TIM_ConfigClockSource+0x136>
 8004b98:	2b40      	cmp	r3, #64	; 0x40
 8004b9a:	d86f      	bhi.n	8004c7c <HAL_TIM_ConfigClockSource+0x168>
 8004b9c:	2b30      	cmp	r3, #48	; 0x30
 8004b9e:	d064      	beq.n	8004c6a <HAL_TIM_ConfigClockSource+0x156>
 8004ba0:	2b30      	cmp	r3, #48	; 0x30
 8004ba2:	d86b      	bhi.n	8004c7c <HAL_TIM_ConfigClockSource+0x168>
 8004ba4:	2b20      	cmp	r3, #32
 8004ba6:	d060      	beq.n	8004c6a <HAL_TIM_ConfigClockSource+0x156>
 8004ba8:	2b20      	cmp	r3, #32
 8004baa:	d867      	bhi.n	8004c7c <HAL_TIM_ConfigClockSource+0x168>
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d05c      	beq.n	8004c6a <HAL_TIM_ConfigClockSource+0x156>
 8004bb0:	2b10      	cmp	r3, #16
 8004bb2:	d05a      	beq.n	8004c6a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004bb4:	e062      	b.n	8004c7c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6818      	ldr	r0, [r3, #0]
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	6899      	ldr	r1, [r3, #8]
 8004bbe:	683b      	ldr	r3, [r7, #0]
 8004bc0:	685a      	ldr	r2, [r3, #4]
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	68db      	ldr	r3, [r3, #12]
 8004bc6:	f000 faee 	bl	80051a6 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	689b      	ldr	r3, [r3, #8]
 8004bd0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004bd8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	68fa      	ldr	r2, [r7, #12]
 8004be0:	609a      	str	r2, [r3, #8]
      break;
 8004be2:	e04e      	b.n	8004c82 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6818      	ldr	r0, [r3, #0]
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	6899      	ldr	r1, [r3, #8]
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	685a      	ldr	r2, [r3, #4]
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	68db      	ldr	r3, [r3, #12]
 8004bf4:	f000 fad7 	bl	80051a6 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	689a      	ldr	r2, [r3, #8]
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004c06:	609a      	str	r2, [r3, #8]
      break;
 8004c08:	e03b      	b.n	8004c82 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6818      	ldr	r0, [r3, #0]
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	6859      	ldr	r1, [r3, #4]
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	68db      	ldr	r3, [r3, #12]
 8004c16:	461a      	mov	r2, r3
 8004c18:	f000 fa4e 	bl	80050b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	2150      	movs	r1, #80	; 0x50
 8004c22:	4618      	mov	r0, r3
 8004c24:	f000 faa5 	bl	8005172 <TIM_ITRx_SetConfig>
      break;
 8004c28:	e02b      	b.n	8004c82 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6818      	ldr	r0, [r3, #0]
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	6859      	ldr	r1, [r3, #4]
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	68db      	ldr	r3, [r3, #12]
 8004c36:	461a      	mov	r2, r3
 8004c38:	f000 fa6c 	bl	8005114 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	2160      	movs	r1, #96	; 0x60
 8004c42:	4618      	mov	r0, r3
 8004c44:	f000 fa95 	bl	8005172 <TIM_ITRx_SetConfig>
      break;
 8004c48:	e01b      	b.n	8004c82 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6818      	ldr	r0, [r3, #0]
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	6859      	ldr	r1, [r3, #4]
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	68db      	ldr	r3, [r3, #12]
 8004c56:	461a      	mov	r2, r3
 8004c58:	f000 fa2e 	bl	80050b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	2140      	movs	r1, #64	; 0x40
 8004c62:	4618      	mov	r0, r3
 8004c64:	f000 fa85 	bl	8005172 <TIM_ITRx_SetConfig>
      break;
 8004c68:	e00b      	b.n	8004c82 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681a      	ldr	r2, [r3, #0]
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	4619      	mov	r1, r3
 8004c74:	4610      	mov	r0, r2
 8004c76:	f000 fa7c 	bl	8005172 <TIM_ITRx_SetConfig>
        break;
 8004c7a:	e002      	b.n	8004c82 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004c7c:	bf00      	nop
 8004c7e:	e000      	b.n	8004c82 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004c80:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2201      	movs	r2, #1
 8004c86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004c92:	2300      	movs	r3, #0
}
 8004c94:	4618      	mov	r0, r3
 8004c96:	3710      	adds	r7, #16
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	bd80      	pop	{r7, pc}

08004c9c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004c9c:	b480      	push	{r7}
 8004c9e:	b083      	sub	sp, #12
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004ca4:	bf00      	nop
 8004ca6:	370c      	adds	r7, #12
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	bc80      	pop	{r7}
 8004cac:	4770      	bx	lr

08004cae <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004cae:	b480      	push	{r7}
 8004cb0:	b083      	sub	sp, #12
 8004cb2:	af00      	add	r7, sp, #0
 8004cb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004cb6:	bf00      	nop
 8004cb8:	370c      	adds	r7, #12
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	bc80      	pop	{r7}
 8004cbe:	4770      	bx	lr

08004cc0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004cc0:	b480      	push	{r7}
 8004cc2:	b083      	sub	sp, #12
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004cc8:	bf00      	nop
 8004cca:	370c      	adds	r7, #12
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	bc80      	pop	{r7}
 8004cd0:	4770      	bx	lr

08004cd2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004cd2:	b480      	push	{r7}
 8004cd4:	b083      	sub	sp, #12
 8004cd6:	af00      	add	r7, sp, #0
 8004cd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004cda:	bf00      	nop
 8004cdc:	370c      	adds	r7, #12
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	bc80      	pop	{r7}
 8004ce2:	4770      	bx	lr

08004ce4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004ce4:	b480      	push	{r7}
 8004ce6:	b085      	sub	sp, #20
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
 8004cec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	4a29      	ldr	r2, [pc, #164]	; (8004d9c <TIM_Base_SetConfig+0xb8>)
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d00b      	beq.n	8004d14 <TIM_Base_SetConfig+0x30>
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d02:	d007      	beq.n	8004d14 <TIM_Base_SetConfig+0x30>
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	4a26      	ldr	r2, [pc, #152]	; (8004da0 <TIM_Base_SetConfig+0xbc>)
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d003      	beq.n	8004d14 <TIM_Base_SetConfig+0x30>
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	4a25      	ldr	r2, [pc, #148]	; (8004da4 <TIM_Base_SetConfig+0xc0>)
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d108      	bne.n	8004d26 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d1a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	685b      	ldr	r3, [r3, #4]
 8004d20:	68fa      	ldr	r2, [r7, #12]
 8004d22:	4313      	orrs	r3, r2
 8004d24:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	4a1c      	ldr	r2, [pc, #112]	; (8004d9c <TIM_Base_SetConfig+0xb8>)
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d00b      	beq.n	8004d46 <TIM_Base_SetConfig+0x62>
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d34:	d007      	beq.n	8004d46 <TIM_Base_SetConfig+0x62>
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	4a19      	ldr	r2, [pc, #100]	; (8004da0 <TIM_Base_SetConfig+0xbc>)
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	d003      	beq.n	8004d46 <TIM_Base_SetConfig+0x62>
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	4a18      	ldr	r2, [pc, #96]	; (8004da4 <TIM_Base_SetConfig+0xc0>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d108      	bne.n	8004d58 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d4c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	68db      	ldr	r3, [r3, #12]
 8004d52:	68fa      	ldr	r2, [r7, #12]
 8004d54:	4313      	orrs	r3, r2
 8004d56:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	695b      	ldr	r3, [r3, #20]
 8004d62:	4313      	orrs	r3, r2
 8004d64:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	68fa      	ldr	r2, [r7, #12]
 8004d6a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	689a      	ldr	r2, [r3, #8]
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	681a      	ldr	r2, [r3, #0]
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	4a07      	ldr	r2, [pc, #28]	; (8004d9c <TIM_Base_SetConfig+0xb8>)
 8004d80:	4293      	cmp	r3, r2
 8004d82:	d103      	bne.n	8004d8c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	691a      	ldr	r2, [r3, #16]
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2201      	movs	r2, #1
 8004d90:	615a      	str	r2, [r3, #20]
}
 8004d92:	bf00      	nop
 8004d94:	3714      	adds	r7, #20
 8004d96:	46bd      	mov	sp, r7
 8004d98:	bc80      	pop	{r7}
 8004d9a:	4770      	bx	lr
 8004d9c:	40012c00 	.word	0x40012c00
 8004da0:	40000400 	.word	0x40000400
 8004da4:	40000800 	.word	0x40000800

08004da8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004da8:	b480      	push	{r7}
 8004daa:	b087      	sub	sp, #28
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
 8004db0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6a1b      	ldr	r3, [r3, #32]
 8004db6:	f023 0201 	bic.w	r2, r3, #1
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6a1b      	ldr	r3, [r3, #32]
 8004dc2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	685b      	ldr	r3, [r3, #4]
 8004dc8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	699b      	ldr	r3, [r3, #24]
 8004dce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	f023 0303 	bic.w	r3, r3, #3
 8004dde:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	68fa      	ldr	r2, [r7, #12]
 8004de6:	4313      	orrs	r3, r2
 8004de8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004dea:	697b      	ldr	r3, [r7, #20]
 8004dec:	f023 0302 	bic.w	r3, r3, #2
 8004df0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	689b      	ldr	r3, [r3, #8]
 8004df6:	697a      	ldr	r2, [r7, #20]
 8004df8:	4313      	orrs	r3, r2
 8004dfa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	4a1c      	ldr	r2, [pc, #112]	; (8004e70 <TIM_OC1_SetConfig+0xc8>)
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d10c      	bne.n	8004e1e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004e04:	697b      	ldr	r3, [r7, #20]
 8004e06:	f023 0308 	bic.w	r3, r3, #8
 8004e0a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	68db      	ldr	r3, [r3, #12]
 8004e10:	697a      	ldr	r2, [r7, #20]
 8004e12:	4313      	orrs	r3, r2
 8004e14:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004e16:	697b      	ldr	r3, [r7, #20]
 8004e18:	f023 0304 	bic.w	r3, r3, #4
 8004e1c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	4a13      	ldr	r2, [pc, #76]	; (8004e70 <TIM_OC1_SetConfig+0xc8>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d111      	bne.n	8004e4a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004e26:	693b      	ldr	r3, [r7, #16]
 8004e28:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e2c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004e2e:	693b      	ldr	r3, [r7, #16]
 8004e30:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004e34:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	695b      	ldr	r3, [r3, #20]
 8004e3a:	693a      	ldr	r2, [r7, #16]
 8004e3c:	4313      	orrs	r3, r2
 8004e3e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	699b      	ldr	r3, [r3, #24]
 8004e44:	693a      	ldr	r2, [r7, #16]
 8004e46:	4313      	orrs	r3, r2
 8004e48:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	693a      	ldr	r2, [r7, #16]
 8004e4e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	68fa      	ldr	r2, [r7, #12]
 8004e54:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	685a      	ldr	r2, [r3, #4]
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	697a      	ldr	r2, [r7, #20]
 8004e62:	621a      	str	r2, [r3, #32]
}
 8004e64:	bf00      	nop
 8004e66:	371c      	adds	r7, #28
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	bc80      	pop	{r7}
 8004e6c:	4770      	bx	lr
 8004e6e:	bf00      	nop
 8004e70:	40012c00 	.word	0x40012c00

08004e74 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004e74:	b480      	push	{r7}
 8004e76:	b087      	sub	sp, #28
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
 8004e7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6a1b      	ldr	r3, [r3, #32]
 8004e82:	f023 0210 	bic.w	r2, r3, #16
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6a1b      	ldr	r3, [r3, #32]
 8004e8e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	685b      	ldr	r3, [r3, #4]
 8004e94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	699b      	ldr	r3, [r3, #24]
 8004e9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ea2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004eaa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	021b      	lsls	r3, r3, #8
 8004eb2:	68fa      	ldr	r2, [r7, #12]
 8004eb4:	4313      	orrs	r3, r2
 8004eb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004eb8:	697b      	ldr	r3, [r7, #20]
 8004eba:	f023 0320 	bic.w	r3, r3, #32
 8004ebe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	689b      	ldr	r3, [r3, #8]
 8004ec4:	011b      	lsls	r3, r3, #4
 8004ec6:	697a      	ldr	r2, [r7, #20]
 8004ec8:	4313      	orrs	r3, r2
 8004eca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	4a1d      	ldr	r2, [pc, #116]	; (8004f44 <TIM_OC2_SetConfig+0xd0>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d10d      	bne.n	8004ef0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004ed4:	697b      	ldr	r3, [r7, #20]
 8004ed6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004eda:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	68db      	ldr	r3, [r3, #12]
 8004ee0:	011b      	lsls	r3, r3, #4
 8004ee2:	697a      	ldr	r2, [r7, #20]
 8004ee4:	4313      	orrs	r3, r2
 8004ee6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004ee8:	697b      	ldr	r3, [r7, #20]
 8004eea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004eee:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	4a14      	ldr	r2, [pc, #80]	; (8004f44 <TIM_OC2_SetConfig+0xd0>)
 8004ef4:	4293      	cmp	r3, r2
 8004ef6:	d113      	bne.n	8004f20 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004ef8:	693b      	ldr	r3, [r7, #16]
 8004efa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004efe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004f00:	693b      	ldr	r3, [r7, #16]
 8004f02:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004f06:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	695b      	ldr	r3, [r3, #20]
 8004f0c:	009b      	lsls	r3, r3, #2
 8004f0e:	693a      	ldr	r2, [r7, #16]
 8004f10:	4313      	orrs	r3, r2
 8004f12:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	699b      	ldr	r3, [r3, #24]
 8004f18:	009b      	lsls	r3, r3, #2
 8004f1a:	693a      	ldr	r2, [r7, #16]
 8004f1c:	4313      	orrs	r3, r2
 8004f1e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	693a      	ldr	r2, [r7, #16]
 8004f24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	68fa      	ldr	r2, [r7, #12]
 8004f2a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	685a      	ldr	r2, [r3, #4]
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	697a      	ldr	r2, [r7, #20]
 8004f38:	621a      	str	r2, [r3, #32]
}
 8004f3a:	bf00      	nop
 8004f3c:	371c      	adds	r7, #28
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	bc80      	pop	{r7}
 8004f42:	4770      	bx	lr
 8004f44:	40012c00 	.word	0x40012c00

08004f48 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004f48:	b480      	push	{r7}
 8004f4a:	b087      	sub	sp, #28
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
 8004f50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6a1b      	ldr	r3, [r3, #32]
 8004f56:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6a1b      	ldr	r3, [r3, #32]
 8004f62:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	685b      	ldr	r3, [r3, #4]
 8004f68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	69db      	ldr	r3, [r3, #28]
 8004f6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	f023 0303 	bic.w	r3, r3, #3
 8004f7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	68fa      	ldr	r2, [r7, #12]
 8004f86:	4313      	orrs	r3, r2
 8004f88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004f8a:	697b      	ldr	r3, [r7, #20]
 8004f8c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004f90:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	689b      	ldr	r3, [r3, #8]
 8004f96:	021b      	lsls	r3, r3, #8
 8004f98:	697a      	ldr	r2, [r7, #20]
 8004f9a:	4313      	orrs	r3, r2
 8004f9c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	4a1d      	ldr	r2, [pc, #116]	; (8005018 <TIM_OC3_SetConfig+0xd0>)
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d10d      	bne.n	8004fc2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004fa6:	697b      	ldr	r3, [r7, #20]
 8004fa8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004fac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	68db      	ldr	r3, [r3, #12]
 8004fb2:	021b      	lsls	r3, r3, #8
 8004fb4:	697a      	ldr	r2, [r7, #20]
 8004fb6:	4313      	orrs	r3, r2
 8004fb8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004fba:	697b      	ldr	r3, [r7, #20]
 8004fbc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004fc0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	4a14      	ldr	r2, [pc, #80]	; (8005018 <TIM_OC3_SetConfig+0xd0>)
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	d113      	bne.n	8004ff2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004fca:	693b      	ldr	r3, [r7, #16]
 8004fcc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004fd0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004fd2:	693b      	ldr	r3, [r7, #16]
 8004fd4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004fd8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	695b      	ldr	r3, [r3, #20]
 8004fde:	011b      	lsls	r3, r3, #4
 8004fe0:	693a      	ldr	r2, [r7, #16]
 8004fe2:	4313      	orrs	r3, r2
 8004fe4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	699b      	ldr	r3, [r3, #24]
 8004fea:	011b      	lsls	r3, r3, #4
 8004fec:	693a      	ldr	r2, [r7, #16]
 8004fee:	4313      	orrs	r3, r2
 8004ff0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	693a      	ldr	r2, [r7, #16]
 8004ff6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	68fa      	ldr	r2, [r7, #12]
 8004ffc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	685a      	ldr	r2, [r3, #4]
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	697a      	ldr	r2, [r7, #20]
 800500a:	621a      	str	r2, [r3, #32]
}
 800500c:	bf00      	nop
 800500e:	371c      	adds	r7, #28
 8005010:	46bd      	mov	sp, r7
 8005012:	bc80      	pop	{r7}
 8005014:	4770      	bx	lr
 8005016:	bf00      	nop
 8005018:	40012c00 	.word	0x40012c00

0800501c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800501c:	b480      	push	{r7}
 800501e:	b087      	sub	sp, #28
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
 8005024:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6a1b      	ldr	r3, [r3, #32]
 800502a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6a1b      	ldr	r3, [r3, #32]
 8005036:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	685b      	ldr	r3, [r3, #4]
 800503c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	69db      	ldr	r3, [r3, #28]
 8005042:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800504a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005052:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	021b      	lsls	r3, r3, #8
 800505a:	68fa      	ldr	r2, [r7, #12]
 800505c:	4313      	orrs	r3, r2
 800505e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005060:	693b      	ldr	r3, [r7, #16]
 8005062:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005066:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	689b      	ldr	r3, [r3, #8]
 800506c:	031b      	lsls	r3, r3, #12
 800506e:	693a      	ldr	r2, [r7, #16]
 8005070:	4313      	orrs	r3, r2
 8005072:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	4a0f      	ldr	r2, [pc, #60]	; (80050b4 <TIM_OC4_SetConfig+0x98>)
 8005078:	4293      	cmp	r3, r2
 800507a:	d109      	bne.n	8005090 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800507c:	697b      	ldr	r3, [r7, #20]
 800507e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005082:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	695b      	ldr	r3, [r3, #20]
 8005088:	019b      	lsls	r3, r3, #6
 800508a:	697a      	ldr	r2, [r7, #20]
 800508c:	4313      	orrs	r3, r2
 800508e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	697a      	ldr	r2, [r7, #20]
 8005094:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	68fa      	ldr	r2, [r7, #12]
 800509a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	685a      	ldr	r2, [r3, #4]
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	693a      	ldr	r2, [r7, #16]
 80050a8:	621a      	str	r2, [r3, #32]
}
 80050aa:	bf00      	nop
 80050ac:	371c      	adds	r7, #28
 80050ae:	46bd      	mov	sp, r7
 80050b0:	bc80      	pop	{r7}
 80050b2:	4770      	bx	lr
 80050b4:	40012c00 	.word	0x40012c00

080050b8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80050b8:	b480      	push	{r7}
 80050ba:	b087      	sub	sp, #28
 80050bc:	af00      	add	r7, sp, #0
 80050be:	60f8      	str	r0, [r7, #12]
 80050c0:	60b9      	str	r1, [r7, #8]
 80050c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	6a1b      	ldr	r3, [r3, #32]
 80050c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	6a1b      	ldr	r3, [r3, #32]
 80050ce:	f023 0201 	bic.w	r2, r3, #1
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	699b      	ldr	r3, [r3, #24]
 80050da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80050dc:	693b      	ldr	r3, [r7, #16]
 80050de:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80050e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	011b      	lsls	r3, r3, #4
 80050e8:	693a      	ldr	r2, [r7, #16]
 80050ea:	4313      	orrs	r3, r2
 80050ec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80050ee:	697b      	ldr	r3, [r7, #20]
 80050f0:	f023 030a 	bic.w	r3, r3, #10
 80050f4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80050f6:	697a      	ldr	r2, [r7, #20]
 80050f8:	68bb      	ldr	r3, [r7, #8]
 80050fa:	4313      	orrs	r3, r2
 80050fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	693a      	ldr	r2, [r7, #16]
 8005102:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	697a      	ldr	r2, [r7, #20]
 8005108:	621a      	str	r2, [r3, #32]
}
 800510a:	bf00      	nop
 800510c:	371c      	adds	r7, #28
 800510e:	46bd      	mov	sp, r7
 8005110:	bc80      	pop	{r7}
 8005112:	4770      	bx	lr

08005114 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005114:	b480      	push	{r7}
 8005116:	b087      	sub	sp, #28
 8005118:	af00      	add	r7, sp, #0
 800511a:	60f8      	str	r0, [r7, #12]
 800511c:	60b9      	str	r1, [r7, #8]
 800511e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	6a1b      	ldr	r3, [r3, #32]
 8005124:	f023 0210 	bic.w	r2, r3, #16
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	699b      	ldr	r3, [r3, #24]
 8005130:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	6a1b      	ldr	r3, [r3, #32]
 8005136:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005138:	697b      	ldr	r3, [r7, #20]
 800513a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800513e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	031b      	lsls	r3, r3, #12
 8005144:	697a      	ldr	r2, [r7, #20]
 8005146:	4313      	orrs	r3, r2
 8005148:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800514a:	693b      	ldr	r3, [r7, #16]
 800514c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005150:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005152:	68bb      	ldr	r3, [r7, #8]
 8005154:	011b      	lsls	r3, r3, #4
 8005156:	693a      	ldr	r2, [r7, #16]
 8005158:	4313      	orrs	r3, r2
 800515a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	697a      	ldr	r2, [r7, #20]
 8005160:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	693a      	ldr	r2, [r7, #16]
 8005166:	621a      	str	r2, [r3, #32]
}
 8005168:	bf00      	nop
 800516a:	371c      	adds	r7, #28
 800516c:	46bd      	mov	sp, r7
 800516e:	bc80      	pop	{r7}
 8005170:	4770      	bx	lr

08005172 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005172:	b480      	push	{r7}
 8005174:	b085      	sub	sp, #20
 8005176:	af00      	add	r7, sp, #0
 8005178:	6078      	str	r0, [r7, #4]
 800517a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	689b      	ldr	r3, [r3, #8]
 8005180:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005188:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800518a:	683a      	ldr	r2, [r7, #0]
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	4313      	orrs	r3, r2
 8005190:	f043 0307 	orr.w	r3, r3, #7
 8005194:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	68fa      	ldr	r2, [r7, #12]
 800519a:	609a      	str	r2, [r3, #8]
}
 800519c:	bf00      	nop
 800519e:	3714      	adds	r7, #20
 80051a0:	46bd      	mov	sp, r7
 80051a2:	bc80      	pop	{r7}
 80051a4:	4770      	bx	lr

080051a6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80051a6:	b480      	push	{r7}
 80051a8:	b087      	sub	sp, #28
 80051aa:	af00      	add	r7, sp, #0
 80051ac:	60f8      	str	r0, [r7, #12]
 80051ae:	60b9      	str	r1, [r7, #8]
 80051b0:	607a      	str	r2, [r7, #4]
 80051b2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	689b      	ldr	r3, [r3, #8]
 80051b8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80051ba:	697b      	ldr	r3, [r7, #20]
 80051bc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80051c0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	021a      	lsls	r2, r3, #8
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	431a      	orrs	r2, r3
 80051ca:	68bb      	ldr	r3, [r7, #8]
 80051cc:	4313      	orrs	r3, r2
 80051ce:	697a      	ldr	r2, [r7, #20]
 80051d0:	4313      	orrs	r3, r2
 80051d2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	697a      	ldr	r2, [r7, #20]
 80051d8:	609a      	str	r2, [r3, #8]
}
 80051da:	bf00      	nop
 80051dc:	371c      	adds	r7, #28
 80051de:	46bd      	mov	sp, r7
 80051e0:	bc80      	pop	{r7}
 80051e2:	4770      	bx	lr

080051e4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80051e4:	b480      	push	{r7}
 80051e6:	b087      	sub	sp, #28
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	60f8      	str	r0, [r7, #12]
 80051ec:	60b9      	str	r1, [r7, #8]
 80051ee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80051f0:	68bb      	ldr	r3, [r7, #8]
 80051f2:	f003 031f 	and.w	r3, r3, #31
 80051f6:	2201      	movs	r2, #1
 80051f8:	fa02 f303 	lsl.w	r3, r2, r3
 80051fc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	6a1a      	ldr	r2, [r3, #32]
 8005202:	697b      	ldr	r3, [r7, #20]
 8005204:	43db      	mvns	r3, r3
 8005206:	401a      	ands	r2, r3
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	6a1a      	ldr	r2, [r3, #32]
 8005210:	68bb      	ldr	r3, [r7, #8]
 8005212:	f003 031f 	and.w	r3, r3, #31
 8005216:	6879      	ldr	r1, [r7, #4]
 8005218:	fa01 f303 	lsl.w	r3, r1, r3
 800521c:	431a      	orrs	r2, r3
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	621a      	str	r2, [r3, #32]
}
 8005222:	bf00      	nop
 8005224:	371c      	adds	r7, #28
 8005226:	46bd      	mov	sp, r7
 8005228:	bc80      	pop	{r7}
 800522a:	4770      	bx	lr

0800522c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800522c:	b480      	push	{r7}
 800522e:	b085      	sub	sp, #20
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
 8005234:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800523c:	2b01      	cmp	r3, #1
 800523e:	d101      	bne.n	8005244 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005240:	2302      	movs	r3, #2
 8005242:	e046      	b.n	80052d2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2201      	movs	r2, #1
 8005248:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2202      	movs	r2, #2
 8005250:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	685b      	ldr	r3, [r3, #4]
 800525a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	689b      	ldr	r3, [r3, #8]
 8005262:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800526a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	68fa      	ldr	r2, [r7, #12]
 8005272:	4313      	orrs	r3, r2
 8005274:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	68fa      	ldr	r2, [r7, #12]
 800527c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	4a16      	ldr	r2, [pc, #88]	; (80052dc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005284:	4293      	cmp	r3, r2
 8005286:	d00e      	beq.n	80052a6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005290:	d009      	beq.n	80052a6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	4a12      	ldr	r2, [pc, #72]	; (80052e0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005298:	4293      	cmp	r3, r2
 800529a:	d004      	beq.n	80052a6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	4a10      	ldr	r2, [pc, #64]	; (80052e4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d10c      	bne.n	80052c0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80052a6:	68bb      	ldr	r3, [r7, #8]
 80052a8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80052ac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	685b      	ldr	r3, [r3, #4]
 80052b2:	68ba      	ldr	r2, [r7, #8]
 80052b4:	4313      	orrs	r3, r2
 80052b6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	68ba      	ldr	r2, [r7, #8]
 80052be:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2201      	movs	r2, #1
 80052c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2200      	movs	r2, #0
 80052cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80052d0:	2300      	movs	r3, #0
}
 80052d2:	4618      	mov	r0, r3
 80052d4:	3714      	adds	r7, #20
 80052d6:	46bd      	mov	sp, r7
 80052d8:	bc80      	pop	{r7}
 80052da:	4770      	bx	lr
 80052dc:	40012c00 	.word	0x40012c00
 80052e0:	40000400 	.word	0x40000400
 80052e4:	40000800 	.word	0x40000800

080052e8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80052e8:	b480      	push	{r7}
 80052ea:	b085      	sub	sp, #20
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
 80052f0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80052f2:	2300      	movs	r3, #0
 80052f4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052fc:	2b01      	cmp	r3, #1
 80052fe:	d101      	bne.n	8005304 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005300:	2302      	movs	r3, #2
 8005302:	e03d      	b.n	8005380 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2201      	movs	r2, #1
 8005308:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	68db      	ldr	r3, [r3, #12]
 8005316:	4313      	orrs	r3, r2
 8005318:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	689b      	ldr	r3, [r3, #8]
 8005324:	4313      	orrs	r3, r2
 8005326:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800532e:	683b      	ldr	r3, [r7, #0]
 8005330:	685b      	ldr	r3, [r3, #4]
 8005332:	4313      	orrs	r3, r2
 8005334:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800533c:	683b      	ldr	r3, [r7, #0]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	4313      	orrs	r3, r2
 8005342:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	691b      	ldr	r3, [r3, #16]
 800534e:	4313      	orrs	r3, r2
 8005350:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	695b      	ldr	r3, [r3, #20]
 800535c:	4313      	orrs	r3, r2
 800535e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	69db      	ldr	r3, [r3, #28]
 800536a:	4313      	orrs	r3, r2
 800536c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	68fa      	ldr	r2, [r7, #12]
 8005374:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	2200      	movs	r2, #0
 800537a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800537e:	2300      	movs	r3, #0
}
 8005380:	4618      	mov	r0, r3
 8005382:	3714      	adds	r7, #20
 8005384:	46bd      	mov	sp, r7
 8005386:	bc80      	pop	{r7}
 8005388:	4770      	bx	lr

0800538a <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800538a:	b480      	push	{r7}
 800538c:	b083      	sub	sp, #12
 800538e:	af00      	add	r7, sp, #0
 8005390:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005392:	bf00      	nop
 8005394:	370c      	adds	r7, #12
 8005396:	46bd      	mov	sp, r7
 8005398:	bc80      	pop	{r7}
 800539a:	4770      	bx	lr

0800539c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800539c:	b480      	push	{r7}
 800539e:	b083      	sub	sp, #12
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80053a4:	bf00      	nop
 80053a6:	370c      	adds	r7, #12
 80053a8:	46bd      	mov	sp, r7
 80053aa:	bc80      	pop	{r7}
 80053ac:	4770      	bx	lr

080053ae <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80053ae:	b580      	push	{r7, lr}
 80053b0:	b082      	sub	sp, #8
 80053b2:	af00      	add	r7, sp, #0
 80053b4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d101      	bne.n	80053c0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80053bc:	2301      	movs	r3, #1
 80053be:	e03f      	b.n	8005440 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053c6:	b2db      	uxtb	r3, r3
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d106      	bne.n	80053da <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2200      	movs	r2, #0
 80053d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80053d4:	6878      	ldr	r0, [r7, #4]
 80053d6:	f7fc feff 	bl	80021d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	2224      	movs	r2, #36	; 0x24
 80053de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	68da      	ldr	r2, [r3, #12]
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80053f0:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80053f2:	6878      	ldr	r0, [r7, #4]
 80053f4:	f000 f904 	bl	8005600 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	691a      	ldr	r2, [r3, #16]
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005406:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	695a      	ldr	r2, [r3, #20]
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005416:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	68da      	ldr	r2, [r3, #12]
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005426:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2200      	movs	r2, #0
 800542c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	2220      	movs	r2, #32
 8005432:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2220      	movs	r2, #32
 800543a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800543e:	2300      	movs	r3, #0
}
 8005440:	4618      	mov	r0, r3
 8005442:	3708      	adds	r7, #8
 8005444:	46bd      	mov	sp, r7
 8005446:	bd80      	pop	{r7, pc}

08005448 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005448:	b580      	push	{r7, lr}
 800544a:	b08a      	sub	sp, #40	; 0x28
 800544c:	af02      	add	r7, sp, #8
 800544e:	60f8      	str	r0, [r7, #12]
 8005450:	60b9      	str	r1, [r7, #8]
 8005452:	603b      	str	r3, [r7, #0]
 8005454:	4613      	mov	r3, r2
 8005456:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005458:	2300      	movs	r3, #0
 800545a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005462:	b2db      	uxtb	r3, r3
 8005464:	2b20      	cmp	r3, #32
 8005466:	d17c      	bne.n	8005562 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005468:	68bb      	ldr	r3, [r7, #8]
 800546a:	2b00      	cmp	r3, #0
 800546c:	d002      	beq.n	8005474 <HAL_UART_Transmit+0x2c>
 800546e:	88fb      	ldrh	r3, [r7, #6]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d101      	bne.n	8005478 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005474:	2301      	movs	r3, #1
 8005476:	e075      	b.n	8005564 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800547e:	2b01      	cmp	r3, #1
 8005480:	d101      	bne.n	8005486 <HAL_UART_Transmit+0x3e>
 8005482:	2302      	movs	r3, #2
 8005484:	e06e      	b.n	8005564 <HAL_UART_Transmit+0x11c>
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	2201      	movs	r2, #1
 800548a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	2200      	movs	r2, #0
 8005492:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	2221      	movs	r2, #33	; 0x21
 8005498:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800549c:	f7fd f866 	bl	800256c <HAL_GetTick>
 80054a0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	88fa      	ldrh	r2, [r7, #6]
 80054a6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	88fa      	ldrh	r2, [r7, #6]
 80054ac:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	689b      	ldr	r3, [r3, #8]
 80054b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054b6:	d108      	bne.n	80054ca <HAL_UART_Transmit+0x82>
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	691b      	ldr	r3, [r3, #16]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d104      	bne.n	80054ca <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80054c0:	2300      	movs	r3, #0
 80054c2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80054c4:	68bb      	ldr	r3, [r7, #8]
 80054c6:	61bb      	str	r3, [r7, #24]
 80054c8:	e003      	b.n	80054d2 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80054ca:	68bb      	ldr	r3, [r7, #8]
 80054cc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80054ce:	2300      	movs	r3, #0
 80054d0:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	2200      	movs	r2, #0
 80054d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80054da:	e02a      	b.n	8005532 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80054dc:	683b      	ldr	r3, [r7, #0]
 80054de:	9300      	str	r3, [sp, #0]
 80054e0:	697b      	ldr	r3, [r7, #20]
 80054e2:	2200      	movs	r2, #0
 80054e4:	2180      	movs	r1, #128	; 0x80
 80054e6:	68f8      	ldr	r0, [r7, #12]
 80054e8:	f000 f840 	bl	800556c <UART_WaitOnFlagUntilTimeout>
 80054ec:	4603      	mov	r3, r0
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d001      	beq.n	80054f6 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80054f2:	2303      	movs	r3, #3
 80054f4:	e036      	b.n	8005564 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80054f6:	69fb      	ldr	r3, [r7, #28]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d10b      	bne.n	8005514 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80054fc:	69bb      	ldr	r3, [r7, #24]
 80054fe:	881b      	ldrh	r3, [r3, #0]
 8005500:	461a      	mov	r2, r3
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800550a:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800550c:	69bb      	ldr	r3, [r7, #24]
 800550e:	3302      	adds	r3, #2
 8005510:	61bb      	str	r3, [r7, #24]
 8005512:	e007      	b.n	8005524 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005514:	69fb      	ldr	r3, [r7, #28]
 8005516:	781a      	ldrb	r2, [r3, #0]
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800551e:	69fb      	ldr	r3, [r7, #28]
 8005520:	3301      	adds	r3, #1
 8005522:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005528:	b29b      	uxth	r3, r3
 800552a:	3b01      	subs	r3, #1
 800552c:	b29a      	uxth	r2, r3
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005536:	b29b      	uxth	r3, r3
 8005538:	2b00      	cmp	r3, #0
 800553a:	d1cf      	bne.n	80054dc <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	9300      	str	r3, [sp, #0]
 8005540:	697b      	ldr	r3, [r7, #20]
 8005542:	2200      	movs	r2, #0
 8005544:	2140      	movs	r1, #64	; 0x40
 8005546:	68f8      	ldr	r0, [r7, #12]
 8005548:	f000 f810 	bl	800556c <UART_WaitOnFlagUntilTimeout>
 800554c:	4603      	mov	r3, r0
 800554e:	2b00      	cmp	r3, #0
 8005550:	d001      	beq.n	8005556 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005552:	2303      	movs	r3, #3
 8005554:	e006      	b.n	8005564 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	2220      	movs	r2, #32
 800555a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800555e:	2300      	movs	r3, #0
 8005560:	e000      	b.n	8005564 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005562:	2302      	movs	r3, #2
  }
}
 8005564:	4618      	mov	r0, r3
 8005566:	3720      	adds	r7, #32
 8005568:	46bd      	mov	sp, r7
 800556a:	bd80      	pop	{r7, pc}

0800556c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800556c:	b580      	push	{r7, lr}
 800556e:	b084      	sub	sp, #16
 8005570:	af00      	add	r7, sp, #0
 8005572:	60f8      	str	r0, [r7, #12]
 8005574:	60b9      	str	r1, [r7, #8]
 8005576:	603b      	str	r3, [r7, #0]
 8005578:	4613      	mov	r3, r2
 800557a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800557c:	e02c      	b.n	80055d8 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800557e:	69bb      	ldr	r3, [r7, #24]
 8005580:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005584:	d028      	beq.n	80055d8 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005586:	69bb      	ldr	r3, [r7, #24]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d007      	beq.n	800559c <UART_WaitOnFlagUntilTimeout+0x30>
 800558c:	f7fc ffee 	bl	800256c <HAL_GetTick>
 8005590:	4602      	mov	r2, r0
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	1ad3      	subs	r3, r2, r3
 8005596:	69ba      	ldr	r2, [r7, #24]
 8005598:	429a      	cmp	r2, r3
 800559a:	d21d      	bcs.n	80055d8 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	68da      	ldr	r2, [r3, #12]
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80055aa:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	695a      	ldr	r2, [r3, #20]
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f022 0201 	bic.w	r2, r2, #1
 80055ba:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	2220      	movs	r2, #32
 80055c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	2220      	movs	r2, #32
 80055c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	2200      	movs	r2, #0
 80055d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80055d4:	2303      	movs	r3, #3
 80055d6:	e00f      	b.n	80055f8 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	681a      	ldr	r2, [r3, #0]
 80055de:	68bb      	ldr	r3, [r7, #8]
 80055e0:	4013      	ands	r3, r2
 80055e2:	68ba      	ldr	r2, [r7, #8]
 80055e4:	429a      	cmp	r2, r3
 80055e6:	bf0c      	ite	eq
 80055e8:	2301      	moveq	r3, #1
 80055ea:	2300      	movne	r3, #0
 80055ec:	b2db      	uxtb	r3, r3
 80055ee:	461a      	mov	r2, r3
 80055f0:	79fb      	ldrb	r3, [r7, #7]
 80055f2:	429a      	cmp	r2, r3
 80055f4:	d0c3      	beq.n	800557e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80055f6:	2300      	movs	r3, #0
}
 80055f8:	4618      	mov	r0, r3
 80055fa:	3710      	adds	r7, #16
 80055fc:	46bd      	mov	sp, r7
 80055fe:	bd80      	pop	{r7, pc}

08005600 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005600:	b580      	push	{r7, lr}
 8005602:	b084      	sub	sp, #16
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	691b      	ldr	r3, [r3, #16]
 800560e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	68da      	ldr	r2, [r3, #12]
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	430a      	orrs	r2, r1
 800561c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	689a      	ldr	r2, [r3, #8]
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	691b      	ldr	r3, [r3, #16]
 8005626:	431a      	orrs	r2, r3
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	695b      	ldr	r3, [r3, #20]
 800562c:	4313      	orrs	r3, r2
 800562e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	68db      	ldr	r3, [r3, #12]
 8005636:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800563a:	f023 030c 	bic.w	r3, r3, #12
 800563e:	687a      	ldr	r2, [r7, #4]
 8005640:	6812      	ldr	r2, [r2, #0]
 8005642:	68b9      	ldr	r1, [r7, #8]
 8005644:	430b      	orrs	r3, r1
 8005646:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	695b      	ldr	r3, [r3, #20]
 800564e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	699a      	ldr	r2, [r3, #24]
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	430a      	orrs	r2, r1
 800565c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	4a2c      	ldr	r2, [pc, #176]	; (8005714 <UART_SetConfig+0x114>)
 8005664:	4293      	cmp	r3, r2
 8005666:	d103      	bne.n	8005670 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005668:	f7fe fe76 	bl	8004358 <HAL_RCC_GetPCLK2Freq>
 800566c:	60f8      	str	r0, [r7, #12]
 800566e:	e002      	b.n	8005676 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005670:	f7fe fe5e 	bl	8004330 <HAL_RCC_GetPCLK1Freq>
 8005674:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005676:	68fa      	ldr	r2, [r7, #12]
 8005678:	4613      	mov	r3, r2
 800567a:	009b      	lsls	r3, r3, #2
 800567c:	4413      	add	r3, r2
 800567e:	009a      	lsls	r2, r3, #2
 8005680:	441a      	add	r2, r3
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	685b      	ldr	r3, [r3, #4]
 8005686:	009b      	lsls	r3, r3, #2
 8005688:	fbb2 f3f3 	udiv	r3, r2, r3
 800568c:	4a22      	ldr	r2, [pc, #136]	; (8005718 <UART_SetConfig+0x118>)
 800568e:	fba2 2303 	umull	r2, r3, r2, r3
 8005692:	095b      	lsrs	r3, r3, #5
 8005694:	0119      	lsls	r1, r3, #4
 8005696:	68fa      	ldr	r2, [r7, #12]
 8005698:	4613      	mov	r3, r2
 800569a:	009b      	lsls	r3, r3, #2
 800569c:	4413      	add	r3, r2
 800569e:	009a      	lsls	r2, r3, #2
 80056a0:	441a      	add	r2, r3
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	685b      	ldr	r3, [r3, #4]
 80056a6:	009b      	lsls	r3, r3, #2
 80056a8:	fbb2 f2f3 	udiv	r2, r2, r3
 80056ac:	4b1a      	ldr	r3, [pc, #104]	; (8005718 <UART_SetConfig+0x118>)
 80056ae:	fba3 0302 	umull	r0, r3, r3, r2
 80056b2:	095b      	lsrs	r3, r3, #5
 80056b4:	2064      	movs	r0, #100	; 0x64
 80056b6:	fb00 f303 	mul.w	r3, r0, r3
 80056ba:	1ad3      	subs	r3, r2, r3
 80056bc:	011b      	lsls	r3, r3, #4
 80056be:	3332      	adds	r3, #50	; 0x32
 80056c0:	4a15      	ldr	r2, [pc, #84]	; (8005718 <UART_SetConfig+0x118>)
 80056c2:	fba2 2303 	umull	r2, r3, r2, r3
 80056c6:	095b      	lsrs	r3, r3, #5
 80056c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80056cc:	4419      	add	r1, r3
 80056ce:	68fa      	ldr	r2, [r7, #12]
 80056d0:	4613      	mov	r3, r2
 80056d2:	009b      	lsls	r3, r3, #2
 80056d4:	4413      	add	r3, r2
 80056d6:	009a      	lsls	r2, r3, #2
 80056d8:	441a      	add	r2, r3
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	685b      	ldr	r3, [r3, #4]
 80056de:	009b      	lsls	r3, r3, #2
 80056e0:	fbb2 f2f3 	udiv	r2, r2, r3
 80056e4:	4b0c      	ldr	r3, [pc, #48]	; (8005718 <UART_SetConfig+0x118>)
 80056e6:	fba3 0302 	umull	r0, r3, r3, r2
 80056ea:	095b      	lsrs	r3, r3, #5
 80056ec:	2064      	movs	r0, #100	; 0x64
 80056ee:	fb00 f303 	mul.w	r3, r0, r3
 80056f2:	1ad3      	subs	r3, r2, r3
 80056f4:	011b      	lsls	r3, r3, #4
 80056f6:	3332      	adds	r3, #50	; 0x32
 80056f8:	4a07      	ldr	r2, [pc, #28]	; (8005718 <UART_SetConfig+0x118>)
 80056fa:	fba2 2303 	umull	r2, r3, r2, r3
 80056fe:	095b      	lsrs	r3, r3, #5
 8005700:	f003 020f 	and.w	r2, r3, #15
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	440a      	add	r2, r1
 800570a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800570c:	bf00      	nop
 800570e:	3710      	adds	r7, #16
 8005710:	46bd      	mov	sp, r7
 8005712:	bd80      	pop	{r7, pc}
 8005714:	40013800 	.word	0x40013800
 8005718:	51eb851f 	.word	0x51eb851f

0800571c <__errno>:
 800571c:	4b01      	ldr	r3, [pc, #4]	; (8005724 <__errno+0x8>)
 800571e:	6818      	ldr	r0, [r3, #0]
 8005720:	4770      	bx	lr
 8005722:	bf00      	nop
 8005724:	2000003c 	.word	0x2000003c

08005728 <__libc_init_array>:
 8005728:	b570      	push	{r4, r5, r6, lr}
 800572a:	2600      	movs	r6, #0
 800572c:	4d0c      	ldr	r5, [pc, #48]	; (8005760 <__libc_init_array+0x38>)
 800572e:	4c0d      	ldr	r4, [pc, #52]	; (8005764 <__libc_init_array+0x3c>)
 8005730:	1b64      	subs	r4, r4, r5
 8005732:	10a4      	asrs	r4, r4, #2
 8005734:	42a6      	cmp	r6, r4
 8005736:	d109      	bne.n	800574c <__libc_init_array+0x24>
 8005738:	f004 fc50 	bl	8009fdc <_init>
 800573c:	2600      	movs	r6, #0
 800573e:	4d0a      	ldr	r5, [pc, #40]	; (8005768 <__libc_init_array+0x40>)
 8005740:	4c0a      	ldr	r4, [pc, #40]	; (800576c <__libc_init_array+0x44>)
 8005742:	1b64      	subs	r4, r4, r5
 8005744:	10a4      	asrs	r4, r4, #2
 8005746:	42a6      	cmp	r6, r4
 8005748:	d105      	bne.n	8005756 <__libc_init_array+0x2e>
 800574a:	bd70      	pop	{r4, r5, r6, pc}
 800574c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005750:	4798      	blx	r3
 8005752:	3601      	adds	r6, #1
 8005754:	e7ee      	b.n	8005734 <__libc_init_array+0xc>
 8005756:	f855 3b04 	ldr.w	r3, [r5], #4
 800575a:	4798      	blx	r3
 800575c:	3601      	adds	r6, #1
 800575e:	e7f2      	b.n	8005746 <__libc_init_array+0x1e>
 8005760:	0800a50c 	.word	0x0800a50c
 8005764:	0800a50c 	.word	0x0800a50c
 8005768:	0800a50c 	.word	0x0800a50c
 800576c:	0800a510 	.word	0x0800a510

08005770 <memset>:
 8005770:	4603      	mov	r3, r0
 8005772:	4402      	add	r2, r0
 8005774:	4293      	cmp	r3, r2
 8005776:	d100      	bne.n	800577a <memset+0xa>
 8005778:	4770      	bx	lr
 800577a:	f803 1b01 	strb.w	r1, [r3], #1
 800577e:	e7f9      	b.n	8005774 <memset+0x4>

08005780 <__cvt>:
 8005780:	2b00      	cmp	r3, #0
 8005782:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005786:	461f      	mov	r7, r3
 8005788:	bfbb      	ittet	lt
 800578a:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800578e:	461f      	movlt	r7, r3
 8005790:	2300      	movge	r3, #0
 8005792:	232d      	movlt	r3, #45	; 0x2d
 8005794:	b088      	sub	sp, #32
 8005796:	4614      	mov	r4, r2
 8005798:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800579a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800579c:	7013      	strb	r3, [r2, #0]
 800579e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80057a0:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 80057a4:	f023 0820 	bic.w	r8, r3, #32
 80057a8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80057ac:	d005      	beq.n	80057ba <__cvt+0x3a>
 80057ae:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80057b2:	d100      	bne.n	80057b6 <__cvt+0x36>
 80057b4:	3501      	adds	r5, #1
 80057b6:	2302      	movs	r3, #2
 80057b8:	e000      	b.n	80057bc <__cvt+0x3c>
 80057ba:	2303      	movs	r3, #3
 80057bc:	aa07      	add	r2, sp, #28
 80057be:	9204      	str	r2, [sp, #16]
 80057c0:	aa06      	add	r2, sp, #24
 80057c2:	e9cd a202 	strd	sl, r2, [sp, #8]
 80057c6:	e9cd 3500 	strd	r3, r5, [sp]
 80057ca:	4622      	mov	r2, r4
 80057cc:	463b      	mov	r3, r7
 80057ce:	f001 fd83 	bl	80072d8 <_dtoa_r>
 80057d2:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80057d6:	4606      	mov	r6, r0
 80057d8:	d102      	bne.n	80057e0 <__cvt+0x60>
 80057da:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80057dc:	07db      	lsls	r3, r3, #31
 80057de:	d522      	bpl.n	8005826 <__cvt+0xa6>
 80057e0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80057e4:	eb06 0905 	add.w	r9, r6, r5
 80057e8:	d110      	bne.n	800580c <__cvt+0x8c>
 80057ea:	7833      	ldrb	r3, [r6, #0]
 80057ec:	2b30      	cmp	r3, #48	; 0x30
 80057ee:	d10a      	bne.n	8005806 <__cvt+0x86>
 80057f0:	2200      	movs	r2, #0
 80057f2:	2300      	movs	r3, #0
 80057f4:	4620      	mov	r0, r4
 80057f6:	4639      	mov	r1, r7
 80057f8:	f7fb f8d6 	bl	80009a8 <__aeabi_dcmpeq>
 80057fc:	b918      	cbnz	r0, 8005806 <__cvt+0x86>
 80057fe:	f1c5 0501 	rsb	r5, r5, #1
 8005802:	f8ca 5000 	str.w	r5, [sl]
 8005806:	f8da 3000 	ldr.w	r3, [sl]
 800580a:	4499      	add	r9, r3
 800580c:	2200      	movs	r2, #0
 800580e:	2300      	movs	r3, #0
 8005810:	4620      	mov	r0, r4
 8005812:	4639      	mov	r1, r7
 8005814:	f7fb f8c8 	bl	80009a8 <__aeabi_dcmpeq>
 8005818:	b108      	cbz	r0, 800581e <__cvt+0x9e>
 800581a:	f8cd 901c 	str.w	r9, [sp, #28]
 800581e:	2230      	movs	r2, #48	; 0x30
 8005820:	9b07      	ldr	r3, [sp, #28]
 8005822:	454b      	cmp	r3, r9
 8005824:	d307      	bcc.n	8005836 <__cvt+0xb6>
 8005826:	4630      	mov	r0, r6
 8005828:	9b07      	ldr	r3, [sp, #28]
 800582a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800582c:	1b9b      	subs	r3, r3, r6
 800582e:	6013      	str	r3, [r2, #0]
 8005830:	b008      	add	sp, #32
 8005832:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005836:	1c59      	adds	r1, r3, #1
 8005838:	9107      	str	r1, [sp, #28]
 800583a:	701a      	strb	r2, [r3, #0]
 800583c:	e7f0      	b.n	8005820 <__cvt+0xa0>

0800583e <__exponent>:
 800583e:	4603      	mov	r3, r0
 8005840:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005842:	2900      	cmp	r1, #0
 8005844:	f803 2b02 	strb.w	r2, [r3], #2
 8005848:	bfb6      	itet	lt
 800584a:	222d      	movlt	r2, #45	; 0x2d
 800584c:	222b      	movge	r2, #43	; 0x2b
 800584e:	4249      	neglt	r1, r1
 8005850:	2909      	cmp	r1, #9
 8005852:	7042      	strb	r2, [r0, #1]
 8005854:	dd2b      	ble.n	80058ae <__exponent+0x70>
 8005856:	f10d 0407 	add.w	r4, sp, #7
 800585a:	46a4      	mov	ip, r4
 800585c:	270a      	movs	r7, #10
 800585e:	fb91 f6f7 	sdiv	r6, r1, r7
 8005862:	460a      	mov	r2, r1
 8005864:	46a6      	mov	lr, r4
 8005866:	fb07 1516 	mls	r5, r7, r6, r1
 800586a:	2a63      	cmp	r2, #99	; 0x63
 800586c:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8005870:	4631      	mov	r1, r6
 8005872:	f104 34ff 	add.w	r4, r4, #4294967295
 8005876:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800587a:	dcf0      	bgt.n	800585e <__exponent+0x20>
 800587c:	3130      	adds	r1, #48	; 0x30
 800587e:	f1ae 0502 	sub.w	r5, lr, #2
 8005882:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005886:	4629      	mov	r1, r5
 8005888:	1c44      	adds	r4, r0, #1
 800588a:	4561      	cmp	r1, ip
 800588c:	d30a      	bcc.n	80058a4 <__exponent+0x66>
 800588e:	f10d 0209 	add.w	r2, sp, #9
 8005892:	eba2 020e 	sub.w	r2, r2, lr
 8005896:	4565      	cmp	r5, ip
 8005898:	bf88      	it	hi
 800589a:	2200      	movhi	r2, #0
 800589c:	4413      	add	r3, r2
 800589e:	1a18      	subs	r0, r3, r0
 80058a0:	b003      	add	sp, #12
 80058a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80058a4:	f811 2b01 	ldrb.w	r2, [r1], #1
 80058a8:	f804 2f01 	strb.w	r2, [r4, #1]!
 80058ac:	e7ed      	b.n	800588a <__exponent+0x4c>
 80058ae:	2330      	movs	r3, #48	; 0x30
 80058b0:	3130      	adds	r1, #48	; 0x30
 80058b2:	7083      	strb	r3, [r0, #2]
 80058b4:	70c1      	strb	r1, [r0, #3]
 80058b6:	1d03      	adds	r3, r0, #4
 80058b8:	e7f1      	b.n	800589e <__exponent+0x60>
	...

080058bc <_printf_float>:
 80058bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058c0:	b091      	sub	sp, #68	; 0x44
 80058c2:	460c      	mov	r4, r1
 80058c4:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80058c8:	4616      	mov	r6, r2
 80058ca:	461f      	mov	r7, r3
 80058cc:	4605      	mov	r5, r0
 80058ce:	f002 fe57 	bl	8008580 <_localeconv_r>
 80058d2:	6803      	ldr	r3, [r0, #0]
 80058d4:	4618      	mov	r0, r3
 80058d6:	9309      	str	r3, [sp, #36]	; 0x24
 80058d8:	f7fa fc3a 	bl	8000150 <strlen>
 80058dc:	2300      	movs	r3, #0
 80058de:	930e      	str	r3, [sp, #56]	; 0x38
 80058e0:	f8d8 3000 	ldr.w	r3, [r8]
 80058e4:	900a      	str	r0, [sp, #40]	; 0x28
 80058e6:	3307      	adds	r3, #7
 80058e8:	f023 0307 	bic.w	r3, r3, #7
 80058ec:	f103 0208 	add.w	r2, r3, #8
 80058f0:	f894 9018 	ldrb.w	r9, [r4, #24]
 80058f4:	f8d4 b000 	ldr.w	fp, [r4]
 80058f8:	f8c8 2000 	str.w	r2, [r8]
 80058fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005900:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005904:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8005908:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800590c:	930b      	str	r3, [sp, #44]	; 0x2c
 800590e:	f04f 32ff 	mov.w	r2, #4294967295
 8005912:	4640      	mov	r0, r8
 8005914:	4b9c      	ldr	r3, [pc, #624]	; (8005b88 <_printf_float+0x2cc>)
 8005916:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005918:	f7fb f878 	bl	8000a0c <__aeabi_dcmpun>
 800591c:	bb70      	cbnz	r0, 800597c <_printf_float+0xc0>
 800591e:	f04f 32ff 	mov.w	r2, #4294967295
 8005922:	4640      	mov	r0, r8
 8005924:	4b98      	ldr	r3, [pc, #608]	; (8005b88 <_printf_float+0x2cc>)
 8005926:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005928:	f7fb f852 	bl	80009d0 <__aeabi_dcmple>
 800592c:	bb30      	cbnz	r0, 800597c <_printf_float+0xc0>
 800592e:	2200      	movs	r2, #0
 8005930:	2300      	movs	r3, #0
 8005932:	4640      	mov	r0, r8
 8005934:	4651      	mov	r1, sl
 8005936:	f7fb f841 	bl	80009bc <__aeabi_dcmplt>
 800593a:	b110      	cbz	r0, 8005942 <_printf_float+0x86>
 800593c:	232d      	movs	r3, #45	; 0x2d
 800593e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005942:	4b92      	ldr	r3, [pc, #584]	; (8005b8c <_printf_float+0x2d0>)
 8005944:	4892      	ldr	r0, [pc, #584]	; (8005b90 <_printf_float+0x2d4>)
 8005946:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800594a:	bf94      	ite	ls
 800594c:	4698      	movls	r8, r3
 800594e:	4680      	movhi	r8, r0
 8005950:	2303      	movs	r3, #3
 8005952:	f04f 0a00 	mov.w	sl, #0
 8005956:	6123      	str	r3, [r4, #16]
 8005958:	f02b 0304 	bic.w	r3, fp, #4
 800595c:	6023      	str	r3, [r4, #0]
 800595e:	4633      	mov	r3, r6
 8005960:	4621      	mov	r1, r4
 8005962:	4628      	mov	r0, r5
 8005964:	9700      	str	r7, [sp, #0]
 8005966:	aa0f      	add	r2, sp, #60	; 0x3c
 8005968:	f000 f9d4 	bl	8005d14 <_printf_common>
 800596c:	3001      	adds	r0, #1
 800596e:	f040 8090 	bne.w	8005a92 <_printf_float+0x1d6>
 8005972:	f04f 30ff 	mov.w	r0, #4294967295
 8005976:	b011      	add	sp, #68	; 0x44
 8005978:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800597c:	4642      	mov	r2, r8
 800597e:	4653      	mov	r3, sl
 8005980:	4640      	mov	r0, r8
 8005982:	4651      	mov	r1, sl
 8005984:	f7fb f842 	bl	8000a0c <__aeabi_dcmpun>
 8005988:	b148      	cbz	r0, 800599e <_printf_float+0xe2>
 800598a:	f1ba 0f00 	cmp.w	sl, #0
 800598e:	bfb8      	it	lt
 8005990:	232d      	movlt	r3, #45	; 0x2d
 8005992:	4880      	ldr	r0, [pc, #512]	; (8005b94 <_printf_float+0x2d8>)
 8005994:	bfb8      	it	lt
 8005996:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800599a:	4b7f      	ldr	r3, [pc, #508]	; (8005b98 <_printf_float+0x2dc>)
 800599c:	e7d3      	b.n	8005946 <_printf_float+0x8a>
 800599e:	6863      	ldr	r3, [r4, #4]
 80059a0:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80059a4:	1c5a      	adds	r2, r3, #1
 80059a6:	d142      	bne.n	8005a2e <_printf_float+0x172>
 80059a8:	2306      	movs	r3, #6
 80059aa:	6063      	str	r3, [r4, #4]
 80059ac:	2200      	movs	r2, #0
 80059ae:	9206      	str	r2, [sp, #24]
 80059b0:	aa0e      	add	r2, sp, #56	; 0x38
 80059b2:	e9cd 9204 	strd	r9, r2, [sp, #16]
 80059b6:	aa0d      	add	r2, sp, #52	; 0x34
 80059b8:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 80059bc:	9203      	str	r2, [sp, #12]
 80059be:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 80059c2:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80059c6:	6023      	str	r3, [r4, #0]
 80059c8:	6863      	ldr	r3, [r4, #4]
 80059ca:	4642      	mov	r2, r8
 80059cc:	9300      	str	r3, [sp, #0]
 80059ce:	4628      	mov	r0, r5
 80059d0:	4653      	mov	r3, sl
 80059d2:	910b      	str	r1, [sp, #44]	; 0x2c
 80059d4:	f7ff fed4 	bl	8005780 <__cvt>
 80059d8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80059da:	4680      	mov	r8, r0
 80059dc:	2947      	cmp	r1, #71	; 0x47
 80059de:	990d      	ldr	r1, [sp, #52]	; 0x34
 80059e0:	d108      	bne.n	80059f4 <_printf_float+0x138>
 80059e2:	1cc8      	adds	r0, r1, #3
 80059e4:	db02      	blt.n	80059ec <_printf_float+0x130>
 80059e6:	6863      	ldr	r3, [r4, #4]
 80059e8:	4299      	cmp	r1, r3
 80059ea:	dd40      	ble.n	8005a6e <_printf_float+0x1b2>
 80059ec:	f1a9 0902 	sub.w	r9, r9, #2
 80059f0:	fa5f f989 	uxtb.w	r9, r9
 80059f4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80059f8:	d81f      	bhi.n	8005a3a <_printf_float+0x17e>
 80059fa:	464a      	mov	r2, r9
 80059fc:	3901      	subs	r1, #1
 80059fe:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005a02:	910d      	str	r1, [sp, #52]	; 0x34
 8005a04:	f7ff ff1b 	bl	800583e <__exponent>
 8005a08:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005a0a:	4682      	mov	sl, r0
 8005a0c:	1813      	adds	r3, r2, r0
 8005a0e:	2a01      	cmp	r2, #1
 8005a10:	6123      	str	r3, [r4, #16]
 8005a12:	dc02      	bgt.n	8005a1a <_printf_float+0x15e>
 8005a14:	6822      	ldr	r2, [r4, #0]
 8005a16:	07d2      	lsls	r2, r2, #31
 8005a18:	d501      	bpl.n	8005a1e <_printf_float+0x162>
 8005a1a:	3301      	adds	r3, #1
 8005a1c:	6123      	str	r3, [r4, #16]
 8005a1e:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d09b      	beq.n	800595e <_printf_float+0xa2>
 8005a26:	232d      	movs	r3, #45	; 0x2d
 8005a28:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005a2c:	e797      	b.n	800595e <_printf_float+0xa2>
 8005a2e:	2947      	cmp	r1, #71	; 0x47
 8005a30:	d1bc      	bne.n	80059ac <_printf_float+0xf0>
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d1ba      	bne.n	80059ac <_printf_float+0xf0>
 8005a36:	2301      	movs	r3, #1
 8005a38:	e7b7      	b.n	80059aa <_printf_float+0xee>
 8005a3a:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8005a3e:	d118      	bne.n	8005a72 <_printf_float+0x1b6>
 8005a40:	2900      	cmp	r1, #0
 8005a42:	6863      	ldr	r3, [r4, #4]
 8005a44:	dd0b      	ble.n	8005a5e <_printf_float+0x1a2>
 8005a46:	6121      	str	r1, [r4, #16]
 8005a48:	b913      	cbnz	r3, 8005a50 <_printf_float+0x194>
 8005a4a:	6822      	ldr	r2, [r4, #0]
 8005a4c:	07d0      	lsls	r0, r2, #31
 8005a4e:	d502      	bpl.n	8005a56 <_printf_float+0x19a>
 8005a50:	3301      	adds	r3, #1
 8005a52:	440b      	add	r3, r1
 8005a54:	6123      	str	r3, [r4, #16]
 8005a56:	f04f 0a00 	mov.w	sl, #0
 8005a5a:	65a1      	str	r1, [r4, #88]	; 0x58
 8005a5c:	e7df      	b.n	8005a1e <_printf_float+0x162>
 8005a5e:	b913      	cbnz	r3, 8005a66 <_printf_float+0x1aa>
 8005a60:	6822      	ldr	r2, [r4, #0]
 8005a62:	07d2      	lsls	r2, r2, #31
 8005a64:	d501      	bpl.n	8005a6a <_printf_float+0x1ae>
 8005a66:	3302      	adds	r3, #2
 8005a68:	e7f4      	b.n	8005a54 <_printf_float+0x198>
 8005a6a:	2301      	movs	r3, #1
 8005a6c:	e7f2      	b.n	8005a54 <_printf_float+0x198>
 8005a6e:	f04f 0967 	mov.w	r9, #103	; 0x67
 8005a72:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005a74:	4299      	cmp	r1, r3
 8005a76:	db05      	blt.n	8005a84 <_printf_float+0x1c8>
 8005a78:	6823      	ldr	r3, [r4, #0]
 8005a7a:	6121      	str	r1, [r4, #16]
 8005a7c:	07d8      	lsls	r0, r3, #31
 8005a7e:	d5ea      	bpl.n	8005a56 <_printf_float+0x19a>
 8005a80:	1c4b      	adds	r3, r1, #1
 8005a82:	e7e7      	b.n	8005a54 <_printf_float+0x198>
 8005a84:	2900      	cmp	r1, #0
 8005a86:	bfcc      	ite	gt
 8005a88:	2201      	movgt	r2, #1
 8005a8a:	f1c1 0202 	rsble	r2, r1, #2
 8005a8e:	4413      	add	r3, r2
 8005a90:	e7e0      	b.n	8005a54 <_printf_float+0x198>
 8005a92:	6823      	ldr	r3, [r4, #0]
 8005a94:	055a      	lsls	r2, r3, #21
 8005a96:	d407      	bmi.n	8005aa8 <_printf_float+0x1ec>
 8005a98:	6923      	ldr	r3, [r4, #16]
 8005a9a:	4642      	mov	r2, r8
 8005a9c:	4631      	mov	r1, r6
 8005a9e:	4628      	mov	r0, r5
 8005aa0:	47b8      	blx	r7
 8005aa2:	3001      	adds	r0, #1
 8005aa4:	d12b      	bne.n	8005afe <_printf_float+0x242>
 8005aa6:	e764      	b.n	8005972 <_printf_float+0xb6>
 8005aa8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005aac:	f240 80dd 	bls.w	8005c6a <_printf_float+0x3ae>
 8005ab0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	2300      	movs	r3, #0
 8005ab8:	f7fa ff76 	bl	80009a8 <__aeabi_dcmpeq>
 8005abc:	2800      	cmp	r0, #0
 8005abe:	d033      	beq.n	8005b28 <_printf_float+0x26c>
 8005ac0:	2301      	movs	r3, #1
 8005ac2:	4631      	mov	r1, r6
 8005ac4:	4628      	mov	r0, r5
 8005ac6:	4a35      	ldr	r2, [pc, #212]	; (8005b9c <_printf_float+0x2e0>)
 8005ac8:	47b8      	blx	r7
 8005aca:	3001      	adds	r0, #1
 8005acc:	f43f af51 	beq.w	8005972 <_printf_float+0xb6>
 8005ad0:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005ad4:	429a      	cmp	r2, r3
 8005ad6:	db02      	blt.n	8005ade <_printf_float+0x222>
 8005ad8:	6823      	ldr	r3, [r4, #0]
 8005ada:	07d8      	lsls	r0, r3, #31
 8005adc:	d50f      	bpl.n	8005afe <_printf_float+0x242>
 8005ade:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005ae2:	4631      	mov	r1, r6
 8005ae4:	4628      	mov	r0, r5
 8005ae6:	47b8      	blx	r7
 8005ae8:	3001      	adds	r0, #1
 8005aea:	f43f af42 	beq.w	8005972 <_printf_float+0xb6>
 8005aee:	f04f 0800 	mov.w	r8, #0
 8005af2:	f104 091a 	add.w	r9, r4, #26
 8005af6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005af8:	3b01      	subs	r3, #1
 8005afa:	4543      	cmp	r3, r8
 8005afc:	dc09      	bgt.n	8005b12 <_printf_float+0x256>
 8005afe:	6823      	ldr	r3, [r4, #0]
 8005b00:	079b      	lsls	r3, r3, #30
 8005b02:	f100 8102 	bmi.w	8005d0a <_printf_float+0x44e>
 8005b06:	68e0      	ldr	r0, [r4, #12]
 8005b08:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005b0a:	4298      	cmp	r0, r3
 8005b0c:	bfb8      	it	lt
 8005b0e:	4618      	movlt	r0, r3
 8005b10:	e731      	b.n	8005976 <_printf_float+0xba>
 8005b12:	2301      	movs	r3, #1
 8005b14:	464a      	mov	r2, r9
 8005b16:	4631      	mov	r1, r6
 8005b18:	4628      	mov	r0, r5
 8005b1a:	47b8      	blx	r7
 8005b1c:	3001      	adds	r0, #1
 8005b1e:	f43f af28 	beq.w	8005972 <_printf_float+0xb6>
 8005b22:	f108 0801 	add.w	r8, r8, #1
 8005b26:	e7e6      	b.n	8005af6 <_printf_float+0x23a>
 8005b28:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	dc38      	bgt.n	8005ba0 <_printf_float+0x2e4>
 8005b2e:	2301      	movs	r3, #1
 8005b30:	4631      	mov	r1, r6
 8005b32:	4628      	mov	r0, r5
 8005b34:	4a19      	ldr	r2, [pc, #100]	; (8005b9c <_printf_float+0x2e0>)
 8005b36:	47b8      	blx	r7
 8005b38:	3001      	adds	r0, #1
 8005b3a:	f43f af1a 	beq.w	8005972 <_printf_float+0xb6>
 8005b3e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005b42:	4313      	orrs	r3, r2
 8005b44:	d102      	bne.n	8005b4c <_printf_float+0x290>
 8005b46:	6823      	ldr	r3, [r4, #0]
 8005b48:	07d9      	lsls	r1, r3, #31
 8005b4a:	d5d8      	bpl.n	8005afe <_printf_float+0x242>
 8005b4c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005b50:	4631      	mov	r1, r6
 8005b52:	4628      	mov	r0, r5
 8005b54:	47b8      	blx	r7
 8005b56:	3001      	adds	r0, #1
 8005b58:	f43f af0b 	beq.w	8005972 <_printf_float+0xb6>
 8005b5c:	f04f 0900 	mov.w	r9, #0
 8005b60:	f104 0a1a 	add.w	sl, r4, #26
 8005b64:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005b66:	425b      	negs	r3, r3
 8005b68:	454b      	cmp	r3, r9
 8005b6a:	dc01      	bgt.n	8005b70 <_printf_float+0x2b4>
 8005b6c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005b6e:	e794      	b.n	8005a9a <_printf_float+0x1de>
 8005b70:	2301      	movs	r3, #1
 8005b72:	4652      	mov	r2, sl
 8005b74:	4631      	mov	r1, r6
 8005b76:	4628      	mov	r0, r5
 8005b78:	47b8      	blx	r7
 8005b7a:	3001      	adds	r0, #1
 8005b7c:	f43f aef9 	beq.w	8005972 <_printf_float+0xb6>
 8005b80:	f109 0901 	add.w	r9, r9, #1
 8005b84:	e7ee      	b.n	8005b64 <_printf_float+0x2a8>
 8005b86:	bf00      	nop
 8005b88:	7fefffff 	.word	0x7fefffff
 8005b8c:	0800a06c 	.word	0x0800a06c
 8005b90:	0800a070 	.word	0x0800a070
 8005b94:	0800a078 	.word	0x0800a078
 8005b98:	0800a074 	.word	0x0800a074
 8005b9c:	0800a07c 	.word	0x0800a07c
 8005ba0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005ba2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005ba4:	429a      	cmp	r2, r3
 8005ba6:	bfa8      	it	ge
 8005ba8:	461a      	movge	r2, r3
 8005baa:	2a00      	cmp	r2, #0
 8005bac:	4691      	mov	r9, r2
 8005bae:	dc37      	bgt.n	8005c20 <_printf_float+0x364>
 8005bb0:	f04f 0b00 	mov.w	fp, #0
 8005bb4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005bb8:	f104 021a 	add.w	r2, r4, #26
 8005bbc:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8005bc0:	ebaa 0309 	sub.w	r3, sl, r9
 8005bc4:	455b      	cmp	r3, fp
 8005bc6:	dc33      	bgt.n	8005c30 <_printf_float+0x374>
 8005bc8:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005bcc:	429a      	cmp	r2, r3
 8005bce:	db3b      	blt.n	8005c48 <_printf_float+0x38c>
 8005bd0:	6823      	ldr	r3, [r4, #0]
 8005bd2:	07da      	lsls	r2, r3, #31
 8005bd4:	d438      	bmi.n	8005c48 <_printf_float+0x38c>
 8005bd6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005bd8:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005bda:	eba3 020a 	sub.w	r2, r3, sl
 8005bde:	eba3 0901 	sub.w	r9, r3, r1
 8005be2:	4591      	cmp	r9, r2
 8005be4:	bfa8      	it	ge
 8005be6:	4691      	movge	r9, r2
 8005be8:	f1b9 0f00 	cmp.w	r9, #0
 8005bec:	dc34      	bgt.n	8005c58 <_printf_float+0x39c>
 8005bee:	f04f 0800 	mov.w	r8, #0
 8005bf2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005bf6:	f104 0a1a 	add.w	sl, r4, #26
 8005bfa:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005bfe:	1a9b      	subs	r3, r3, r2
 8005c00:	eba3 0309 	sub.w	r3, r3, r9
 8005c04:	4543      	cmp	r3, r8
 8005c06:	f77f af7a 	ble.w	8005afe <_printf_float+0x242>
 8005c0a:	2301      	movs	r3, #1
 8005c0c:	4652      	mov	r2, sl
 8005c0e:	4631      	mov	r1, r6
 8005c10:	4628      	mov	r0, r5
 8005c12:	47b8      	blx	r7
 8005c14:	3001      	adds	r0, #1
 8005c16:	f43f aeac 	beq.w	8005972 <_printf_float+0xb6>
 8005c1a:	f108 0801 	add.w	r8, r8, #1
 8005c1e:	e7ec      	b.n	8005bfa <_printf_float+0x33e>
 8005c20:	4613      	mov	r3, r2
 8005c22:	4631      	mov	r1, r6
 8005c24:	4642      	mov	r2, r8
 8005c26:	4628      	mov	r0, r5
 8005c28:	47b8      	blx	r7
 8005c2a:	3001      	adds	r0, #1
 8005c2c:	d1c0      	bne.n	8005bb0 <_printf_float+0x2f4>
 8005c2e:	e6a0      	b.n	8005972 <_printf_float+0xb6>
 8005c30:	2301      	movs	r3, #1
 8005c32:	4631      	mov	r1, r6
 8005c34:	4628      	mov	r0, r5
 8005c36:	920b      	str	r2, [sp, #44]	; 0x2c
 8005c38:	47b8      	blx	r7
 8005c3a:	3001      	adds	r0, #1
 8005c3c:	f43f ae99 	beq.w	8005972 <_printf_float+0xb6>
 8005c40:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005c42:	f10b 0b01 	add.w	fp, fp, #1
 8005c46:	e7b9      	b.n	8005bbc <_printf_float+0x300>
 8005c48:	4631      	mov	r1, r6
 8005c4a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005c4e:	4628      	mov	r0, r5
 8005c50:	47b8      	blx	r7
 8005c52:	3001      	adds	r0, #1
 8005c54:	d1bf      	bne.n	8005bd6 <_printf_float+0x31a>
 8005c56:	e68c      	b.n	8005972 <_printf_float+0xb6>
 8005c58:	464b      	mov	r3, r9
 8005c5a:	4631      	mov	r1, r6
 8005c5c:	4628      	mov	r0, r5
 8005c5e:	eb08 020a 	add.w	r2, r8, sl
 8005c62:	47b8      	blx	r7
 8005c64:	3001      	adds	r0, #1
 8005c66:	d1c2      	bne.n	8005bee <_printf_float+0x332>
 8005c68:	e683      	b.n	8005972 <_printf_float+0xb6>
 8005c6a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005c6c:	2a01      	cmp	r2, #1
 8005c6e:	dc01      	bgt.n	8005c74 <_printf_float+0x3b8>
 8005c70:	07db      	lsls	r3, r3, #31
 8005c72:	d537      	bpl.n	8005ce4 <_printf_float+0x428>
 8005c74:	2301      	movs	r3, #1
 8005c76:	4642      	mov	r2, r8
 8005c78:	4631      	mov	r1, r6
 8005c7a:	4628      	mov	r0, r5
 8005c7c:	47b8      	blx	r7
 8005c7e:	3001      	adds	r0, #1
 8005c80:	f43f ae77 	beq.w	8005972 <_printf_float+0xb6>
 8005c84:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005c88:	4631      	mov	r1, r6
 8005c8a:	4628      	mov	r0, r5
 8005c8c:	47b8      	blx	r7
 8005c8e:	3001      	adds	r0, #1
 8005c90:	f43f ae6f 	beq.w	8005972 <_printf_float+0xb6>
 8005c94:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005c98:	2200      	movs	r2, #0
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	f7fa fe84 	bl	80009a8 <__aeabi_dcmpeq>
 8005ca0:	b9d8      	cbnz	r0, 8005cda <_printf_float+0x41e>
 8005ca2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005ca4:	f108 0201 	add.w	r2, r8, #1
 8005ca8:	3b01      	subs	r3, #1
 8005caa:	4631      	mov	r1, r6
 8005cac:	4628      	mov	r0, r5
 8005cae:	47b8      	blx	r7
 8005cb0:	3001      	adds	r0, #1
 8005cb2:	d10e      	bne.n	8005cd2 <_printf_float+0x416>
 8005cb4:	e65d      	b.n	8005972 <_printf_float+0xb6>
 8005cb6:	2301      	movs	r3, #1
 8005cb8:	464a      	mov	r2, r9
 8005cba:	4631      	mov	r1, r6
 8005cbc:	4628      	mov	r0, r5
 8005cbe:	47b8      	blx	r7
 8005cc0:	3001      	adds	r0, #1
 8005cc2:	f43f ae56 	beq.w	8005972 <_printf_float+0xb6>
 8005cc6:	f108 0801 	add.w	r8, r8, #1
 8005cca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005ccc:	3b01      	subs	r3, #1
 8005cce:	4543      	cmp	r3, r8
 8005cd0:	dcf1      	bgt.n	8005cb6 <_printf_float+0x3fa>
 8005cd2:	4653      	mov	r3, sl
 8005cd4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005cd8:	e6e0      	b.n	8005a9c <_printf_float+0x1e0>
 8005cda:	f04f 0800 	mov.w	r8, #0
 8005cde:	f104 091a 	add.w	r9, r4, #26
 8005ce2:	e7f2      	b.n	8005cca <_printf_float+0x40e>
 8005ce4:	2301      	movs	r3, #1
 8005ce6:	4642      	mov	r2, r8
 8005ce8:	e7df      	b.n	8005caa <_printf_float+0x3ee>
 8005cea:	2301      	movs	r3, #1
 8005cec:	464a      	mov	r2, r9
 8005cee:	4631      	mov	r1, r6
 8005cf0:	4628      	mov	r0, r5
 8005cf2:	47b8      	blx	r7
 8005cf4:	3001      	adds	r0, #1
 8005cf6:	f43f ae3c 	beq.w	8005972 <_printf_float+0xb6>
 8005cfa:	f108 0801 	add.w	r8, r8, #1
 8005cfe:	68e3      	ldr	r3, [r4, #12]
 8005d00:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8005d02:	1a5b      	subs	r3, r3, r1
 8005d04:	4543      	cmp	r3, r8
 8005d06:	dcf0      	bgt.n	8005cea <_printf_float+0x42e>
 8005d08:	e6fd      	b.n	8005b06 <_printf_float+0x24a>
 8005d0a:	f04f 0800 	mov.w	r8, #0
 8005d0e:	f104 0919 	add.w	r9, r4, #25
 8005d12:	e7f4      	b.n	8005cfe <_printf_float+0x442>

08005d14 <_printf_common>:
 8005d14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d18:	4616      	mov	r6, r2
 8005d1a:	4699      	mov	r9, r3
 8005d1c:	688a      	ldr	r2, [r1, #8]
 8005d1e:	690b      	ldr	r3, [r1, #16]
 8005d20:	4607      	mov	r7, r0
 8005d22:	4293      	cmp	r3, r2
 8005d24:	bfb8      	it	lt
 8005d26:	4613      	movlt	r3, r2
 8005d28:	6033      	str	r3, [r6, #0]
 8005d2a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005d2e:	460c      	mov	r4, r1
 8005d30:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005d34:	b10a      	cbz	r2, 8005d3a <_printf_common+0x26>
 8005d36:	3301      	adds	r3, #1
 8005d38:	6033      	str	r3, [r6, #0]
 8005d3a:	6823      	ldr	r3, [r4, #0]
 8005d3c:	0699      	lsls	r1, r3, #26
 8005d3e:	bf42      	ittt	mi
 8005d40:	6833      	ldrmi	r3, [r6, #0]
 8005d42:	3302      	addmi	r3, #2
 8005d44:	6033      	strmi	r3, [r6, #0]
 8005d46:	6825      	ldr	r5, [r4, #0]
 8005d48:	f015 0506 	ands.w	r5, r5, #6
 8005d4c:	d106      	bne.n	8005d5c <_printf_common+0x48>
 8005d4e:	f104 0a19 	add.w	sl, r4, #25
 8005d52:	68e3      	ldr	r3, [r4, #12]
 8005d54:	6832      	ldr	r2, [r6, #0]
 8005d56:	1a9b      	subs	r3, r3, r2
 8005d58:	42ab      	cmp	r3, r5
 8005d5a:	dc28      	bgt.n	8005dae <_printf_common+0x9a>
 8005d5c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005d60:	1e13      	subs	r3, r2, #0
 8005d62:	6822      	ldr	r2, [r4, #0]
 8005d64:	bf18      	it	ne
 8005d66:	2301      	movne	r3, #1
 8005d68:	0692      	lsls	r2, r2, #26
 8005d6a:	d42d      	bmi.n	8005dc8 <_printf_common+0xb4>
 8005d6c:	4649      	mov	r1, r9
 8005d6e:	4638      	mov	r0, r7
 8005d70:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005d74:	47c0      	blx	r8
 8005d76:	3001      	adds	r0, #1
 8005d78:	d020      	beq.n	8005dbc <_printf_common+0xa8>
 8005d7a:	6823      	ldr	r3, [r4, #0]
 8005d7c:	68e5      	ldr	r5, [r4, #12]
 8005d7e:	f003 0306 	and.w	r3, r3, #6
 8005d82:	2b04      	cmp	r3, #4
 8005d84:	bf18      	it	ne
 8005d86:	2500      	movne	r5, #0
 8005d88:	6832      	ldr	r2, [r6, #0]
 8005d8a:	f04f 0600 	mov.w	r6, #0
 8005d8e:	68a3      	ldr	r3, [r4, #8]
 8005d90:	bf08      	it	eq
 8005d92:	1aad      	subeq	r5, r5, r2
 8005d94:	6922      	ldr	r2, [r4, #16]
 8005d96:	bf08      	it	eq
 8005d98:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005d9c:	4293      	cmp	r3, r2
 8005d9e:	bfc4      	itt	gt
 8005da0:	1a9b      	subgt	r3, r3, r2
 8005da2:	18ed      	addgt	r5, r5, r3
 8005da4:	341a      	adds	r4, #26
 8005da6:	42b5      	cmp	r5, r6
 8005da8:	d11a      	bne.n	8005de0 <_printf_common+0xcc>
 8005daa:	2000      	movs	r0, #0
 8005dac:	e008      	b.n	8005dc0 <_printf_common+0xac>
 8005dae:	2301      	movs	r3, #1
 8005db0:	4652      	mov	r2, sl
 8005db2:	4649      	mov	r1, r9
 8005db4:	4638      	mov	r0, r7
 8005db6:	47c0      	blx	r8
 8005db8:	3001      	adds	r0, #1
 8005dba:	d103      	bne.n	8005dc4 <_printf_common+0xb0>
 8005dbc:	f04f 30ff 	mov.w	r0, #4294967295
 8005dc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005dc4:	3501      	adds	r5, #1
 8005dc6:	e7c4      	b.n	8005d52 <_printf_common+0x3e>
 8005dc8:	2030      	movs	r0, #48	; 0x30
 8005dca:	18e1      	adds	r1, r4, r3
 8005dcc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005dd0:	1c5a      	adds	r2, r3, #1
 8005dd2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005dd6:	4422      	add	r2, r4
 8005dd8:	3302      	adds	r3, #2
 8005dda:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005dde:	e7c5      	b.n	8005d6c <_printf_common+0x58>
 8005de0:	2301      	movs	r3, #1
 8005de2:	4622      	mov	r2, r4
 8005de4:	4649      	mov	r1, r9
 8005de6:	4638      	mov	r0, r7
 8005de8:	47c0      	blx	r8
 8005dea:	3001      	adds	r0, #1
 8005dec:	d0e6      	beq.n	8005dbc <_printf_common+0xa8>
 8005dee:	3601      	adds	r6, #1
 8005df0:	e7d9      	b.n	8005da6 <_printf_common+0x92>
	...

08005df4 <_printf_i>:
 8005df4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005df8:	7e0f      	ldrb	r7, [r1, #24]
 8005dfa:	4691      	mov	r9, r2
 8005dfc:	2f78      	cmp	r7, #120	; 0x78
 8005dfe:	4680      	mov	r8, r0
 8005e00:	460c      	mov	r4, r1
 8005e02:	469a      	mov	sl, r3
 8005e04:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005e06:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005e0a:	d807      	bhi.n	8005e1c <_printf_i+0x28>
 8005e0c:	2f62      	cmp	r7, #98	; 0x62
 8005e0e:	d80a      	bhi.n	8005e26 <_printf_i+0x32>
 8005e10:	2f00      	cmp	r7, #0
 8005e12:	f000 80d9 	beq.w	8005fc8 <_printf_i+0x1d4>
 8005e16:	2f58      	cmp	r7, #88	; 0x58
 8005e18:	f000 80a4 	beq.w	8005f64 <_printf_i+0x170>
 8005e1c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005e20:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005e24:	e03a      	b.n	8005e9c <_printf_i+0xa8>
 8005e26:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005e2a:	2b15      	cmp	r3, #21
 8005e2c:	d8f6      	bhi.n	8005e1c <_printf_i+0x28>
 8005e2e:	a101      	add	r1, pc, #4	; (adr r1, 8005e34 <_printf_i+0x40>)
 8005e30:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005e34:	08005e8d 	.word	0x08005e8d
 8005e38:	08005ea1 	.word	0x08005ea1
 8005e3c:	08005e1d 	.word	0x08005e1d
 8005e40:	08005e1d 	.word	0x08005e1d
 8005e44:	08005e1d 	.word	0x08005e1d
 8005e48:	08005e1d 	.word	0x08005e1d
 8005e4c:	08005ea1 	.word	0x08005ea1
 8005e50:	08005e1d 	.word	0x08005e1d
 8005e54:	08005e1d 	.word	0x08005e1d
 8005e58:	08005e1d 	.word	0x08005e1d
 8005e5c:	08005e1d 	.word	0x08005e1d
 8005e60:	08005faf 	.word	0x08005faf
 8005e64:	08005ed1 	.word	0x08005ed1
 8005e68:	08005f91 	.word	0x08005f91
 8005e6c:	08005e1d 	.word	0x08005e1d
 8005e70:	08005e1d 	.word	0x08005e1d
 8005e74:	08005fd1 	.word	0x08005fd1
 8005e78:	08005e1d 	.word	0x08005e1d
 8005e7c:	08005ed1 	.word	0x08005ed1
 8005e80:	08005e1d 	.word	0x08005e1d
 8005e84:	08005e1d 	.word	0x08005e1d
 8005e88:	08005f99 	.word	0x08005f99
 8005e8c:	682b      	ldr	r3, [r5, #0]
 8005e8e:	1d1a      	adds	r2, r3, #4
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	602a      	str	r2, [r5, #0]
 8005e94:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005e98:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005e9c:	2301      	movs	r3, #1
 8005e9e:	e0a4      	b.n	8005fea <_printf_i+0x1f6>
 8005ea0:	6820      	ldr	r0, [r4, #0]
 8005ea2:	6829      	ldr	r1, [r5, #0]
 8005ea4:	0606      	lsls	r6, r0, #24
 8005ea6:	f101 0304 	add.w	r3, r1, #4
 8005eaa:	d50a      	bpl.n	8005ec2 <_printf_i+0xce>
 8005eac:	680e      	ldr	r6, [r1, #0]
 8005eae:	602b      	str	r3, [r5, #0]
 8005eb0:	2e00      	cmp	r6, #0
 8005eb2:	da03      	bge.n	8005ebc <_printf_i+0xc8>
 8005eb4:	232d      	movs	r3, #45	; 0x2d
 8005eb6:	4276      	negs	r6, r6
 8005eb8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005ebc:	230a      	movs	r3, #10
 8005ebe:	485e      	ldr	r0, [pc, #376]	; (8006038 <_printf_i+0x244>)
 8005ec0:	e019      	b.n	8005ef6 <_printf_i+0x102>
 8005ec2:	680e      	ldr	r6, [r1, #0]
 8005ec4:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005ec8:	602b      	str	r3, [r5, #0]
 8005eca:	bf18      	it	ne
 8005ecc:	b236      	sxthne	r6, r6
 8005ece:	e7ef      	b.n	8005eb0 <_printf_i+0xbc>
 8005ed0:	682b      	ldr	r3, [r5, #0]
 8005ed2:	6820      	ldr	r0, [r4, #0]
 8005ed4:	1d19      	adds	r1, r3, #4
 8005ed6:	6029      	str	r1, [r5, #0]
 8005ed8:	0601      	lsls	r1, r0, #24
 8005eda:	d501      	bpl.n	8005ee0 <_printf_i+0xec>
 8005edc:	681e      	ldr	r6, [r3, #0]
 8005ede:	e002      	b.n	8005ee6 <_printf_i+0xf2>
 8005ee0:	0646      	lsls	r6, r0, #25
 8005ee2:	d5fb      	bpl.n	8005edc <_printf_i+0xe8>
 8005ee4:	881e      	ldrh	r6, [r3, #0]
 8005ee6:	2f6f      	cmp	r7, #111	; 0x6f
 8005ee8:	bf0c      	ite	eq
 8005eea:	2308      	moveq	r3, #8
 8005eec:	230a      	movne	r3, #10
 8005eee:	4852      	ldr	r0, [pc, #328]	; (8006038 <_printf_i+0x244>)
 8005ef0:	2100      	movs	r1, #0
 8005ef2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005ef6:	6865      	ldr	r5, [r4, #4]
 8005ef8:	2d00      	cmp	r5, #0
 8005efa:	bfa8      	it	ge
 8005efc:	6821      	ldrge	r1, [r4, #0]
 8005efe:	60a5      	str	r5, [r4, #8]
 8005f00:	bfa4      	itt	ge
 8005f02:	f021 0104 	bicge.w	r1, r1, #4
 8005f06:	6021      	strge	r1, [r4, #0]
 8005f08:	b90e      	cbnz	r6, 8005f0e <_printf_i+0x11a>
 8005f0a:	2d00      	cmp	r5, #0
 8005f0c:	d04d      	beq.n	8005faa <_printf_i+0x1b6>
 8005f0e:	4615      	mov	r5, r2
 8005f10:	fbb6 f1f3 	udiv	r1, r6, r3
 8005f14:	fb03 6711 	mls	r7, r3, r1, r6
 8005f18:	5dc7      	ldrb	r7, [r0, r7]
 8005f1a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005f1e:	4637      	mov	r7, r6
 8005f20:	42bb      	cmp	r3, r7
 8005f22:	460e      	mov	r6, r1
 8005f24:	d9f4      	bls.n	8005f10 <_printf_i+0x11c>
 8005f26:	2b08      	cmp	r3, #8
 8005f28:	d10b      	bne.n	8005f42 <_printf_i+0x14e>
 8005f2a:	6823      	ldr	r3, [r4, #0]
 8005f2c:	07de      	lsls	r6, r3, #31
 8005f2e:	d508      	bpl.n	8005f42 <_printf_i+0x14e>
 8005f30:	6923      	ldr	r3, [r4, #16]
 8005f32:	6861      	ldr	r1, [r4, #4]
 8005f34:	4299      	cmp	r1, r3
 8005f36:	bfde      	ittt	le
 8005f38:	2330      	movle	r3, #48	; 0x30
 8005f3a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005f3e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005f42:	1b52      	subs	r2, r2, r5
 8005f44:	6122      	str	r2, [r4, #16]
 8005f46:	464b      	mov	r3, r9
 8005f48:	4621      	mov	r1, r4
 8005f4a:	4640      	mov	r0, r8
 8005f4c:	f8cd a000 	str.w	sl, [sp]
 8005f50:	aa03      	add	r2, sp, #12
 8005f52:	f7ff fedf 	bl	8005d14 <_printf_common>
 8005f56:	3001      	adds	r0, #1
 8005f58:	d14c      	bne.n	8005ff4 <_printf_i+0x200>
 8005f5a:	f04f 30ff 	mov.w	r0, #4294967295
 8005f5e:	b004      	add	sp, #16
 8005f60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f64:	4834      	ldr	r0, [pc, #208]	; (8006038 <_printf_i+0x244>)
 8005f66:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005f6a:	6829      	ldr	r1, [r5, #0]
 8005f6c:	6823      	ldr	r3, [r4, #0]
 8005f6e:	f851 6b04 	ldr.w	r6, [r1], #4
 8005f72:	6029      	str	r1, [r5, #0]
 8005f74:	061d      	lsls	r5, r3, #24
 8005f76:	d514      	bpl.n	8005fa2 <_printf_i+0x1ae>
 8005f78:	07df      	lsls	r7, r3, #31
 8005f7a:	bf44      	itt	mi
 8005f7c:	f043 0320 	orrmi.w	r3, r3, #32
 8005f80:	6023      	strmi	r3, [r4, #0]
 8005f82:	b91e      	cbnz	r6, 8005f8c <_printf_i+0x198>
 8005f84:	6823      	ldr	r3, [r4, #0]
 8005f86:	f023 0320 	bic.w	r3, r3, #32
 8005f8a:	6023      	str	r3, [r4, #0]
 8005f8c:	2310      	movs	r3, #16
 8005f8e:	e7af      	b.n	8005ef0 <_printf_i+0xfc>
 8005f90:	6823      	ldr	r3, [r4, #0]
 8005f92:	f043 0320 	orr.w	r3, r3, #32
 8005f96:	6023      	str	r3, [r4, #0]
 8005f98:	2378      	movs	r3, #120	; 0x78
 8005f9a:	4828      	ldr	r0, [pc, #160]	; (800603c <_printf_i+0x248>)
 8005f9c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005fa0:	e7e3      	b.n	8005f6a <_printf_i+0x176>
 8005fa2:	0659      	lsls	r1, r3, #25
 8005fa4:	bf48      	it	mi
 8005fa6:	b2b6      	uxthmi	r6, r6
 8005fa8:	e7e6      	b.n	8005f78 <_printf_i+0x184>
 8005faa:	4615      	mov	r5, r2
 8005fac:	e7bb      	b.n	8005f26 <_printf_i+0x132>
 8005fae:	682b      	ldr	r3, [r5, #0]
 8005fb0:	6826      	ldr	r6, [r4, #0]
 8005fb2:	1d18      	adds	r0, r3, #4
 8005fb4:	6961      	ldr	r1, [r4, #20]
 8005fb6:	6028      	str	r0, [r5, #0]
 8005fb8:	0635      	lsls	r5, r6, #24
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	d501      	bpl.n	8005fc2 <_printf_i+0x1ce>
 8005fbe:	6019      	str	r1, [r3, #0]
 8005fc0:	e002      	b.n	8005fc8 <_printf_i+0x1d4>
 8005fc2:	0670      	lsls	r0, r6, #25
 8005fc4:	d5fb      	bpl.n	8005fbe <_printf_i+0x1ca>
 8005fc6:	8019      	strh	r1, [r3, #0]
 8005fc8:	2300      	movs	r3, #0
 8005fca:	4615      	mov	r5, r2
 8005fcc:	6123      	str	r3, [r4, #16]
 8005fce:	e7ba      	b.n	8005f46 <_printf_i+0x152>
 8005fd0:	682b      	ldr	r3, [r5, #0]
 8005fd2:	2100      	movs	r1, #0
 8005fd4:	1d1a      	adds	r2, r3, #4
 8005fd6:	602a      	str	r2, [r5, #0]
 8005fd8:	681d      	ldr	r5, [r3, #0]
 8005fda:	6862      	ldr	r2, [r4, #4]
 8005fdc:	4628      	mov	r0, r5
 8005fde:	f002 faed 	bl	80085bc <memchr>
 8005fe2:	b108      	cbz	r0, 8005fe8 <_printf_i+0x1f4>
 8005fe4:	1b40      	subs	r0, r0, r5
 8005fe6:	6060      	str	r0, [r4, #4]
 8005fe8:	6863      	ldr	r3, [r4, #4]
 8005fea:	6123      	str	r3, [r4, #16]
 8005fec:	2300      	movs	r3, #0
 8005fee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005ff2:	e7a8      	b.n	8005f46 <_printf_i+0x152>
 8005ff4:	462a      	mov	r2, r5
 8005ff6:	4649      	mov	r1, r9
 8005ff8:	4640      	mov	r0, r8
 8005ffa:	6923      	ldr	r3, [r4, #16]
 8005ffc:	47d0      	blx	sl
 8005ffe:	3001      	adds	r0, #1
 8006000:	d0ab      	beq.n	8005f5a <_printf_i+0x166>
 8006002:	6823      	ldr	r3, [r4, #0]
 8006004:	079b      	lsls	r3, r3, #30
 8006006:	d413      	bmi.n	8006030 <_printf_i+0x23c>
 8006008:	68e0      	ldr	r0, [r4, #12]
 800600a:	9b03      	ldr	r3, [sp, #12]
 800600c:	4298      	cmp	r0, r3
 800600e:	bfb8      	it	lt
 8006010:	4618      	movlt	r0, r3
 8006012:	e7a4      	b.n	8005f5e <_printf_i+0x16a>
 8006014:	2301      	movs	r3, #1
 8006016:	4632      	mov	r2, r6
 8006018:	4649      	mov	r1, r9
 800601a:	4640      	mov	r0, r8
 800601c:	47d0      	blx	sl
 800601e:	3001      	adds	r0, #1
 8006020:	d09b      	beq.n	8005f5a <_printf_i+0x166>
 8006022:	3501      	adds	r5, #1
 8006024:	68e3      	ldr	r3, [r4, #12]
 8006026:	9903      	ldr	r1, [sp, #12]
 8006028:	1a5b      	subs	r3, r3, r1
 800602a:	42ab      	cmp	r3, r5
 800602c:	dcf2      	bgt.n	8006014 <_printf_i+0x220>
 800602e:	e7eb      	b.n	8006008 <_printf_i+0x214>
 8006030:	2500      	movs	r5, #0
 8006032:	f104 0619 	add.w	r6, r4, #25
 8006036:	e7f5      	b.n	8006024 <_printf_i+0x230>
 8006038:	0800a07e 	.word	0x0800a07e
 800603c:	0800a08f 	.word	0x0800a08f

08006040 <_scanf_float>:
 8006040:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006044:	b087      	sub	sp, #28
 8006046:	9303      	str	r3, [sp, #12]
 8006048:	688b      	ldr	r3, [r1, #8]
 800604a:	4617      	mov	r7, r2
 800604c:	1e5a      	subs	r2, r3, #1
 800604e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8006052:	bf85      	ittet	hi
 8006054:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8006058:	195b      	addhi	r3, r3, r5
 800605a:	2300      	movls	r3, #0
 800605c:	9302      	strhi	r3, [sp, #8]
 800605e:	bf88      	it	hi
 8006060:	f240 135d 	movwhi	r3, #349	; 0x15d
 8006064:	468b      	mov	fp, r1
 8006066:	f04f 0500 	mov.w	r5, #0
 800606a:	bf8c      	ite	hi
 800606c:	608b      	strhi	r3, [r1, #8]
 800606e:	9302      	strls	r3, [sp, #8]
 8006070:	680b      	ldr	r3, [r1, #0]
 8006072:	4680      	mov	r8, r0
 8006074:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8006078:	f84b 3b1c 	str.w	r3, [fp], #28
 800607c:	460c      	mov	r4, r1
 800607e:	465e      	mov	r6, fp
 8006080:	46aa      	mov	sl, r5
 8006082:	46a9      	mov	r9, r5
 8006084:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8006088:	9501      	str	r5, [sp, #4]
 800608a:	68a2      	ldr	r2, [r4, #8]
 800608c:	b152      	cbz	r2, 80060a4 <_scanf_float+0x64>
 800608e:	683b      	ldr	r3, [r7, #0]
 8006090:	781b      	ldrb	r3, [r3, #0]
 8006092:	2b4e      	cmp	r3, #78	; 0x4e
 8006094:	d864      	bhi.n	8006160 <_scanf_float+0x120>
 8006096:	2b40      	cmp	r3, #64	; 0x40
 8006098:	d83c      	bhi.n	8006114 <_scanf_float+0xd4>
 800609a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800609e:	b2c8      	uxtb	r0, r1
 80060a0:	280e      	cmp	r0, #14
 80060a2:	d93a      	bls.n	800611a <_scanf_float+0xda>
 80060a4:	f1b9 0f00 	cmp.w	r9, #0
 80060a8:	d003      	beq.n	80060b2 <_scanf_float+0x72>
 80060aa:	6823      	ldr	r3, [r4, #0]
 80060ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80060b0:	6023      	str	r3, [r4, #0]
 80060b2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80060b6:	f1ba 0f01 	cmp.w	sl, #1
 80060ba:	f200 8113 	bhi.w	80062e4 <_scanf_float+0x2a4>
 80060be:	455e      	cmp	r6, fp
 80060c0:	f200 8105 	bhi.w	80062ce <_scanf_float+0x28e>
 80060c4:	2501      	movs	r5, #1
 80060c6:	4628      	mov	r0, r5
 80060c8:	b007      	add	sp, #28
 80060ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060ce:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80060d2:	2a0d      	cmp	r2, #13
 80060d4:	d8e6      	bhi.n	80060a4 <_scanf_float+0x64>
 80060d6:	a101      	add	r1, pc, #4	; (adr r1, 80060dc <_scanf_float+0x9c>)
 80060d8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80060dc:	0800621b 	.word	0x0800621b
 80060e0:	080060a5 	.word	0x080060a5
 80060e4:	080060a5 	.word	0x080060a5
 80060e8:	080060a5 	.word	0x080060a5
 80060ec:	0800627b 	.word	0x0800627b
 80060f0:	08006253 	.word	0x08006253
 80060f4:	080060a5 	.word	0x080060a5
 80060f8:	080060a5 	.word	0x080060a5
 80060fc:	08006229 	.word	0x08006229
 8006100:	080060a5 	.word	0x080060a5
 8006104:	080060a5 	.word	0x080060a5
 8006108:	080060a5 	.word	0x080060a5
 800610c:	080060a5 	.word	0x080060a5
 8006110:	080061e1 	.word	0x080061e1
 8006114:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8006118:	e7db      	b.n	80060d2 <_scanf_float+0x92>
 800611a:	290e      	cmp	r1, #14
 800611c:	d8c2      	bhi.n	80060a4 <_scanf_float+0x64>
 800611e:	a001      	add	r0, pc, #4	; (adr r0, 8006124 <_scanf_float+0xe4>)
 8006120:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8006124:	080061d3 	.word	0x080061d3
 8006128:	080060a5 	.word	0x080060a5
 800612c:	080061d3 	.word	0x080061d3
 8006130:	08006267 	.word	0x08006267
 8006134:	080060a5 	.word	0x080060a5
 8006138:	08006181 	.word	0x08006181
 800613c:	080061bd 	.word	0x080061bd
 8006140:	080061bd 	.word	0x080061bd
 8006144:	080061bd 	.word	0x080061bd
 8006148:	080061bd 	.word	0x080061bd
 800614c:	080061bd 	.word	0x080061bd
 8006150:	080061bd 	.word	0x080061bd
 8006154:	080061bd 	.word	0x080061bd
 8006158:	080061bd 	.word	0x080061bd
 800615c:	080061bd 	.word	0x080061bd
 8006160:	2b6e      	cmp	r3, #110	; 0x6e
 8006162:	d809      	bhi.n	8006178 <_scanf_float+0x138>
 8006164:	2b60      	cmp	r3, #96	; 0x60
 8006166:	d8b2      	bhi.n	80060ce <_scanf_float+0x8e>
 8006168:	2b54      	cmp	r3, #84	; 0x54
 800616a:	d077      	beq.n	800625c <_scanf_float+0x21c>
 800616c:	2b59      	cmp	r3, #89	; 0x59
 800616e:	d199      	bne.n	80060a4 <_scanf_float+0x64>
 8006170:	2d07      	cmp	r5, #7
 8006172:	d197      	bne.n	80060a4 <_scanf_float+0x64>
 8006174:	2508      	movs	r5, #8
 8006176:	e029      	b.n	80061cc <_scanf_float+0x18c>
 8006178:	2b74      	cmp	r3, #116	; 0x74
 800617a:	d06f      	beq.n	800625c <_scanf_float+0x21c>
 800617c:	2b79      	cmp	r3, #121	; 0x79
 800617e:	e7f6      	b.n	800616e <_scanf_float+0x12e>
 8006180:	6821      	ldr	r1, [r4, #0]
 8006182:	05c8      	lsls	r0, r1, #23
 8006184:	d51a      	bpl.n	80061bc <_scanf_float+0x17c>
 8006186:	9b02      	ldr	r3, [sp, #8]
 8006188:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800618c:	6021      	str	r1, [r4, #0]
 800618e:	f109 0901 	add.w	r9, r9, #1
 8006192:	b11b      	cbz	r3, 800619c <_scanf_float+0x15c>
 8006194:	3b01      	subs	r3, #1
 8006196:	3201      	adds	r2, #1
 8006198:	9302      	str	r3, [sp, #8]
 800619a:	60a2      	str	r2, [r4, #8]
 800619c:	68a3      	ldr	r3, [r4, #8]
 800619e:	3b01      	subs	r3, #1
 80061a0:	60a3      	str	r3, [r4, #8]
 80061a2:	6923      	ldr	r3, [r4, #16]
 80061a4:	3301      	adds	r3, #1
 80061a6:	6123      	str	r3, [r4, #16]
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	3b01      	subs	r3, #1
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	607b      	str	r3, [r7, #4]
 80061b0:	f340 8084 	ble.w	80062bc <_scanf_float+0x27c>
 80061b4:	683b      	ldr	r3, [r7, #0]
 80061b6:	3301      	adds	r3, #1
 80061b8:	603b      	str	r3, [r7, #0]
 80061ba:	e766      	b.n	800608a <_scanf_float+0x4a>
 80061bc:	eb1a 0f05 	cmn.w	sl, r5
 80061c0:	f47f af70 	bne.w	80060a4 <_scanf_float+0x64>
 80061c4:	6822      	ldr	r2, [r4, #0]
 80061c6:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80061ca:	6022      	str	r2, [r4, #0]
 80061cc:	f806 3b01 	strb.w	r3, [r6], #1
 80061d0:	e7e4      	b.n	800619c <_scanf_float+0x15c>
 80061d2:	6822      	ldr	r2, [r4, #0]
 80061d4:	0610      	lsls	r0, r2, #24
 80061d6:	f57f af65 	bpl.w	80060a4 <_scanf_float+0x64>
 80061da:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80061de:	e7f4      	b.n	80061ca <_scanf_float+0x18a>
 80061e0:	f1ba 0f00 	cmp.w	sl, #0
 80061e4:	d10e      	bne.n	8006204 <_scanf_float+0x1c4>
 80061e6:	f1b9 0f00 	cmp.w	r9, #0
 80061ea:	d10e      	bne.n	800620a <_scanf_float+0x1ca>
 80061ec:	6822      	ldr	r2, [r4, #0]
 80061ee:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80061f2:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80061f6:	d108      	bne.n	800620a <_scanf_float+0x1ca>
 80061f8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80061fc:	f04f 0a01 	mov.w	sl, #1
 8006200:	6022      	str	r2, [r4, #0]
 8006202:	e7e3      	b.n	80061cc <_scanf_float+0x18c>
 8006204:	f1ba 0f02 	cmp.w	sl, #2
 8006208:	d055      	beq.n	80062b6 <_scanf_float+0x276>
 800620a:	2d01      	cmp	r5, #1
 800620c:	d002      	beq.n	8006214 <_scanf_float+0x1d4>
 800620e:	2d04      	cmp	r5, #4
 8006210:	f47f af48 	bne.w	80060a4 <_scanf_float+0x64>
 8006214:	3501      	adds	r5, #1
 8006216:	b2ed      	uxtb	r5, r5
 8006218:	e7d8      	b.n	80061cc <_scanf_float+0x18c>
 800621a:	f1ba 0f01 	cmp.w	sl, #1
 800621e:	f47f af41 	bne.w	80060a4 <_scanf_float+0x64>
 8006222:	f04f 0a02 	mov.w	sl, #2
 8006226:	e7d1      	b.n	80061cc <_scanf_float+0x18c>
 8006228:	b97d      	cbnz	r5, 800624a <_scanf_float+0x20a>
 800622a:	f1b9 0f00 	cmp.w	r9, #0
 800622e:	f47f af3c 	bne.w	80060aa <_scanf_float+0x6a>
 8006232:	6822      	ldr	r2, [r4, #0]
 8006234:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006238:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800623c:	f47f af39 	bne.w	80060b2 <_scanf_float+0x72>
 8006240:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006244:	2501      	movs	r5, #1
 8006246:	6022      	str	r2, [r4, #0]
 8006248:	e7c0      	b.n	80061cc <_scanf_float+0x18c>
 800624a:	2d03      	cmp	r5, #3
 800624c:	d0e2      	beq.n	8006214 <_scanf_float+0x1d4>
 800624e:	2d05      	cmp	r5, #5
 8006250:	e7de      	b.n	8006210 <_scanf_float+0x1d0>
 8006252:	2d02      	cmp	r5, #2
 8006254:	f47f af26 	bne.w	80060a4 <_scanf_float+0x64>
 8006258:	2503      	movs	r5, #3
 800625a:	e7b7      	b.n	80061cc <_scanf_float+0x18c>
 800625c:	2d06      	cmp	r5, #6
 800625e:	f47f af21 	bne.w	80060a4 <_scanf_float+0x64>
 8006262:	2507      	movs	r5, #7
 8006264:	e7b2      	b.n	80061cc <_scanf_float+0x18c>
 8006266:	6822      	ldr	r2, [r4, #0]
 8006268:	0591      	lsls	r1, r2, #22
 800626a:	f57f af1b 	bpl.w	80060a4 <_scanf_float+0x64>
 800626e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8006272:	6022      	str	r2, [r4, #0]
 8006274:	f8cd 9004 	str.w	r9, [sp, #4]
 8006278:	e7a8      	b.n	80061cc <_scanf_float+0x18c>
 800627a:	6822      	ldr	r2, [r4, #0]
 800627c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8006280:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8006284:	d006      	beq.n	8006294 <_scanf_float+0x254>
 8006286:	0550      	lsls	r0, r2, #21
 8006288:	f57f af0c 	bpl.w	80060a4 <_scanf_float+0x64>
 800628c:	f1b9 0f00 	cmp.w	r9, #0
 8006290:	f43f af0f 	beq.w	80060b2 <_scanf_float+0x72>
 8006294:	0591      	lsls	r1, r2, #22
 8006296:	bf58      	it	pl
 8006298:	9901      	ldrpl	r1, [sp, #4]
 800629a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800629e:	bf58      	it	pl
 80062a0:	eba9 0101 	subpl.w	r1, r9, r1
 80062a4:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80062a8:	f04f 0900 	mov.w	r9, #0
 80062ac:	bf58      	it	pl
 80062ae:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80062b2:	6022      	str	r2, [r4, #0]
 80062b4:	e78a      	b.n	80061cc <_scanf_float+0x18c>
 80062b6:	f04f 0a03 	mov.w	sl, #3
 80062ba:	e787      	b.n	80061cc <_scanf_float+0x18c>
 80062bc:	4639      	mov	r1, r7
 80062be:	4640      	mov	r0, r8
 80062c0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80062c4:	4798      	blx	r3
 80062c6:	2800      	cmp	r0, #0
 80062c8:	f43f aedf 	beq.w	800608a <_scanf_float+0x4a>
 80062cc:	e6ea      	b.n	80060a4 <_scanf_float+0x64>
 80062ce:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80062d2:	463a      	mov	r2, r7
 80062d4:	4640      	mov	r0, r8
 80062d6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80062da:	4798      	blx	r3
 80062dc:	6923      	ldr	r3, [r4, #16]
 80062de:	3b01      	subs	r3, #1
 80062e0:	6123      	str	r3, [r4, #16]
 80062e2:	e6ec      	b.n	80060be <_scanf_float+0x7e>
 80062e4:	1e6b      	subs	r3, r5, #1
 80062e6:	2b06      	cmp	r3, #6
 80062e8:	d825      	bhi.n	8006336 <_scanf_float+0x2f6>
 80062ea:	2d02      	cmp	r5, #2
 80062ec:	d836      	bhi.n	800635c <_scanf_float+0x31c>
 80062ee:	455e      	cmp	r6, fp
 80062f0:	f67f aee8 	bls.w	80060c4 <_scanf_float+0x84>
 80062f4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80062f8:	463a      	mov	r2, r7
 80062fa:	4640      	mov	r0, r8
 80062fc:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006300:	4798      	blx	r3
 8006302:	6923      	ldr	r3, [r4, #16]
 8006304:	3b01      	subs	r3, #1
 8006306:	6123      	str	r3, [r4, #16]
 8006308:	e7f1      	b.n	80062ee <_scanf_float+0x2ae>
 800630a:	9802      	ldr	r0, [sp, #8]
 800630c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006310:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8006314:	463a      	mov	r2, r7
 8006316:	9002      	str	r0, [sp, #8]
 8006318:	4640      	mov	r0, r8
 800631a:	4798      	blx	r3
 800631c:	6923      	ldr	r3, [r4, #16]
 800631e:	3b01      	subs	r3, #1
 8006320:	6123      	str	r3, [r4, #16]
 8006322:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006326:	fa5f fa8a 	uxtb.w	sl, sl
 800632a:	f1ba 0f02 	cmp.w	sl, #2
 800632e:	d1ec      	bne.n	800630a <_scanf_float+0x2ca>
 8006330:	3d03      	subs	r5, #3
 8006332:	b2ed      	uxtb	r5, r5
 8006334:	1b76      	subs	r6, r6, r5
 8006336:	6823      	ldr	r3, [r4, #0]
 8006338:	05da      	lsls	r2, r3, #23
 800633a:	d52f      	bpl.n	800639c <_scanf_float+0x35c>
 800633c:	055b      	lsls	r3, r3, #21
 800633e:	d510      	bpl.n	8006362 <_scanf_float+0x322>
 8006340:	455e      	cmp	r6, fp
 8006342:	f67f aebf 	bls.w	80060c4 <_scanf_float+0x84>
 8006346:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800634a:	463a      	mov	r2, r7
 800634c:	4640      	mov	r0, r8
 800634e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006352:	4798      	blx	r3
 8006354:	6923      	ldr	r3, [r4, #16]
 8006356:	3b01      	subs	r3, #1
 8006358:	6123      	str	r3, [r4, #16]
 800635a:	e7f1      	b.n	8006340 <_scanf_float+0x300>
 800635c:	46aa      	mov	sl, r5
 800635e:	9602      	str	r6, [sp, #8]
 8006360:	e7df      	b.n	8006322 <_scanf_float+0x2e2>
 8006362:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8006366:	6923      	ldr	r3, [r4, #16]
 8006368:	2965      	cmp	r1, #101	; 0x65
 800636a:	f103 33ff 	add.w	r3, r3, #4294967295
 800636e:	f106 35ff 	add.w	r5, r6, #4294967295
 8006372:	6123      	str	r3, [r4, #16]
 8006374:	d00c      	beq.n	8006390 <_scanf_float+0x350>
 8006376:	2945      	cmp	r1, #69	; 0x45
 8006378:	d00a      	beq.n	8006390 <_scanf_float+0x350>
 800637a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800637e:	463a      	mov	r2, r7
 8006380:	4640      	mov	r0, r8
 8006382:	4798      	blx	r3
 8006384:	6923      	ldr	r3, [r4, #16]
 8006386:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800638a:	3b01      	subs	r3, #1
 800638c:	1eb5      	subs	r5, r6, #2
 800638e:	6123      	str	r3, [r4, #16]
 8006390:	463a      	mov	r2, r7
 8006392:	4640      	mov	r0, r8
 8006394:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006398:	4798      	blx	r3
 800639a:	462e      	mov	r6, r5
 800639c:	6825      	ldr	r5, [r4, #0]
 800639e:	f015 0510 	ands.w	r5, r5, #16
 80063a2:	d155      	bne.n	8006450 <_scanf_float+0x410>
 80063a4:	7035      	strb	r5, [r6, #0]
 80063a6:	6823      	ldr	r3, [r4, #0]
 80063a8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80063ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80063b0:	d11b      	bne.n	80063ea <_scanf_float+0x3aa>
 80063b2:	9b01      	ldr	r3, [sp, #4]
 80063b4:	454b      	cmp	r3, r9
 80063b6:	eba3 0209 	sub.w	r2, r3, r9
 80063ba:	d123      	bne.n	8006404 <_scanf_float+0x3c4>
 80063bc:	2200      	movs	r2, #0
 80063be:	4659      	mov	r1, fp
 80063c0:	4640      	mov	r0, r8
 80063c2:	f000 fe79 	bl	80070b8 <_strtod_r>
 80063c6:	6822      	ldr	r2, [r4, #0]
 80063c8:	9b03      	ldr	r3, [sp, #12]
 80063ca:	f012 0f02 	tst.w	r2, #2
 80063ce:	4606      	mov	r6, r0
 80063d0:	460f      	mov	r7, r1
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	d021      	beq.n	800641a <_scanf_float+0x3da>
 80063d6:	1d1a      	adds	r2, r3, #4
 80063d8:	9903      	ldr	r1, [sp, #12]
 80063da:	600a      	str	r2, [r1, #0]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	e9c3 6700 	strd	r6, r7, [r3]
 80063e2:	68e3      	ldr	r3, [r4, #12]
 80063e4:	3301      	adds	r3, #1
 80063e6:	60e3      	str	r3, [r4, #12]
 80063e8:	e66d      	b.n	80060c6 <_scanf_float+0x86>
 80063ea:	9b04      	ldr	r3, [sp, #16]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d0e5      	beq.n	80063bc <_scanf_float+0x37c>
 80063f0:	9905      	ldr	r1, [sp, #20]
 80063f2:	230a      	movs	r3, #10
 80063f4:	462a      	mov	r2, r5
 80063f6:	4640      	mov	r0, r8
 80063f8:	3101      	adds	r1, #1
 80063fa:	f000 fedf 	bl	80071bc <_strtol_r>
 80063fe:	9b04      	ldr	r3, [sp, #16]
 8006400:	9e05      	ldr	r6, [sp, #20]
 8006402:	1ac2      	subs	r2, r0, r3
 8006404:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8006408:	429e      	cmp	r6, r3
 800640a:	bf28      	it	cs
 800640c:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8006410:	4630      	mov	r0, r6
 8006412:	4910      	ldr	r1, [pc, #64]	; (8006454 <_scanf_float+0x414>)
 8006414:	f000 f826 	bl	8006464 <siprintf>
 8006418:	e7d0      	b.n	80063bc <_scanf_float+0x37c>
 800641a:	f012 0f04 	tst.w	r2, #4
 800641e:	f103 0204 	add.w	r2, r3, #4
 8006422:	d1d9      	bne.n	80063d8 <_scanf_float+0x398>
 8006424:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8006428:	f8cc 2000 	str.w	r2, [ip]
 800642c:	f8d3 8000 	ldr.w	r8, [r3]
 8006430:	4602      	mov	r2, r0
 8006432:	460b      	mov	r3, r1
 8006434:	f7fa faea 	bl	8000a0c <__aeabi_dcmpun>
 8006438:	b128      	cbz	r0, 8006446 <_scanf_float+0x406>
 800643a:	4807      	ldr	r0, [pc, #28]	; (8006458 <_scanf_float+0x418>)
 800643c:	f000 f80e 	bl	800645c <nanf>
 8006440:	f8c8 0000 	str.w	r0, [r8]
 8006444:	e7cd      	b.n	80063e2 <_scanf_float+0x3a2>
 8006446:	4630      	mov	r0, r6
 8006448:	4639      	mov	r1, r7
 800644a:	f7fa fb3d 	bl	8000ac8 <__aeabi_d2f>
 800644e:	e7f7      	b.n	8006440 <_scanf_float+0x400>
 8006450:	2500      	movs	r5, #0
 8006452:	e638      	b.n	80060c6 <_scanf_float+0x86>
 8006454:	0800a0a0 	.word	0x0800a0a0
 8006458:	0800a4a8 	.word	0x0800a4a8

0800645c <nanf>:
 800645c:	4800      	ldr	r0, [pc, #0]	; (8006460 <nanf+0x4>)
 800645e:	4770      	bx	lr
 8006460:	7fc00000 	.word	0x7fc00000

08006464 <siprintf>:
 8006464:	b40e      	push	{r1, r2, r3}
 8006466:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800646a:	b500      	push	{lr}
 800646c:	b09c      	sub	sp, #112	; 0x70
 800646e:	ab1d      	add	r3, sp, #116	; 0x74
 8006470:	9002      	str	r0, [sp, #8]
 8006472:	9006      	str	r0, [sp, #24]
 8006474:	9107      	str	r1, [sp, #28]
 8006476:	9104      	str	r1, [sp, #16]
 8006478:	4808      	ldr	r0, [pc, #32]	; (800649c <siprintf+0x38>)
 800647a:	4909      	ldr	r1, [pc, #36]	; (80064a0 <siprintf+0x3c>)
 800647c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006480:	9105      	str	r1, [sp, #20]
 8006482:	6800      	ldr	r0, [r0, #0]
 8006484:	a902      	add	r1, sp, #8
 8006486:	9301      	str	r3, [sp, #4]
 8006488:	f002 feb8 	bl	80091fc <_svfiprintf_r>
 800648c:	2200      	movs	r2, #0
 800648e:	9b02      	ldr	r3, [sp, #8]
 8006490:	701a      	strb	r2, [r3, #0]
 8006492:	b01c      	add	sp, #112	; 0x70
 8006494:	f85d eb04 	ldr.w	lr, [sp], #4
 8006498:	b003      	add	sp, #12
 800649a:	4770      	bx	lr
 800649c:	2000003c 	.word	0x2000003c
 80064a0:	ffff0208 	.word	0xffff0208

080064a4 <sulp>:
 80064a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80064a8:	460f      	mov	r7, r1
 80064aa:	4690      	mov	r8, r2
 80064ac:	f002 fc12 	bl	8008cd4 <__ulp>
 80064b0:	4604      	mov	r4, r0
 80064b2:	460d      	mov	r5, r1
 80064b4:	f1b8 0f00 	cmp.w	r8, #0
 80064b8:	d011      	beq.n	80064de <sulp+0x3a>
 80064ba:	f3c7 530a 	ubfx	r3, r7, #20, #11
 80064be:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	dd0b      	ble.n	80064de <sulp+0x3a>
 80064c6:	2400      	movs	r4, #0
 80064c8:	051b      	lsls	r3, r3, #20
 80064ca:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80064ce:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80064d2:	4622      	mov	r2, r4
 80064d4:	462b      	mov	r3, r5
 80064d6:	f7f9 ffff 	bl	80004d8 <__aeabi_dmul>
 80064da:	4604      	mov	r4, r0
 80064dc:	460d      	mov	r5, r1
 80064de:	4620      	mov	r0, r4
 80064e0:	4629      	mov	r1, r5
 80064e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

080064e8 <_strtod_l>:
 80064e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064ec:	469b      	mov	fp, r3
 80064ee:	2300      	movs	r3, #0
 80064f0:	b09f      	sub	sp, #124	; 0x7c
 80064f2:	931a      	str	r3, [sp, #104]	; 0x68
 80064f4:	4b9e      	ldr	r3, [pc, #632]	; (8006770 <_strtod_l+0x288>)
 80064f6:	4682      	mov	sl, r0
 80064f8:	681f      	ldr	r7, [r3, #0]
 80064fa:	460e      	mov	r6, r1
 80064fc:	4638      	mov	r0, r7
 80064fe:	9215      	str	r2, [sp, #84]	; 0x54
 8006500:	f7f9 fe26 	bl	8000150 <strlen>
 8006504:	f04f 0800 	mov.w	r8, #0
 8006508:	4604      	mov	r4, r0
 800650a:	f04f 0900 	mov.w	r9, #0
 800650e:	9619      	str	r6, [sp, #100]	; 0x64
 8006510:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006512:	781a      	ldrb	r2, [r3, #0]
 8006514:	2a2b      	cmp	r2, #43	; 0x2b
 8006516:	d04c      	beq.n	80065b2 <_strtod_l+0xca>
 8006518:	d83a      	bhi.n	8006590 <_strtod_l+0xa8>
 800651a:	2a0d      	cmp	r2, #13
 800651c:	d833      	bhi.n	8006586 <_strtod_l+0x9e>
 800651e:	2a08      	cmp	r2, #8
 8006520:	d833      	bhi.n	800658a <_strtod_l+0xa2>
 8006522:	2a00      	cmp	r2, #0
 8006524:	d03d      	beq.n	80065a2 <_strtod_l+0xba>
 8006526:	2300      	movs	r3, #0
 8006528:	930a      	str	r3, [sp, #40]	; 0x28
 800652a:	9d19      	ldr	r5, [sp, #100]	; 0x64
 800652c:	782b      	ldrb	r3, [r5, #0]
 800652e:	2b30      	cmp	r3, #48	; 0x30
 8006530:	f040 80aa 	bne.w	8006688 <_strtod_l+0x1a0>
 8006534:	786b      	ldrb	r3, [r5, #1]
 8006536:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800653a:	2b58      	cmp	r3, #88	; 0x58
 800653c:	d166      	bne.n	800660c <_strtod_l+0x124>
 800653e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006540:	4650      	mov	r0, sl
 8006542:	9301      	str	r3, [sp, #4]
 8006544:	ab1a      	add	r3, sp, #104	; 0x68
 8006546:	9300      	str	r3, [sp, #0]
 8006548:	4a8a      	ldr	r2, [pc, #552]	; (8006774 <_strtod_l+0x28c>)
 800654a:	f8cd b008 	str.w	fp, [sp, #8]
 800654e:	ab1b      	add	r3, sp, #108	; 0x6c
 8006550:	a919      	add	r1, sp, #100	; 0x64
 8006552:	f001 fd17 	bl	8007f84 <__gethex>
 8006556:	f010 0607 	ands.w	r6, r0, #7
 800655a:	4604      	mov	r4, r0
 800655c:	d005      	beq.n	800656a <_strtod_l+0x82>
 800655e:	2e06      	cmp	r6, #6
 8006560:	d129      	bne.n	80065b6 <_strtod_l+0xce>
 8006562:	2300      	movs	r3, #0
 8006564:	3501      	adds	r5, #1
 8006566:	9519      	str	r5, [sp, #100]	; 0x64
 8006568:	930a      	str	r3, [sp, #40]	; 0x28
 800656a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800656c:	2b00      	cmp	r3, #0
 800656e:	f040 858a 	bne.w	8007086 <_strtod_l+0xb9e>
 8006572:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006574:	b1d3      	cbz	r3, 80065ac <_strtod_l+0xc4>
 8006576:	4642      	mov	r2, r8
 8006578:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800657c:	4610      	mov	r0, r2
 800657e:	4619      	mov	r1, r3
 8006580:	b01f      	add	sp, #124	; 0x7c
 8006582:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006586:	2a20      	cmp	r2, #32
 8006588:	d1cd      	bne.n	8006526 <_strtod_l+0x3e>
 800658a:	3301      	adds	r3, #1
 800658c:	9319      	str	r3, [sp, #100]	; 0x64
 800658e:	e7bf      	b.n	8006510 <_strtod_l+0x28>
 8006590:	2a2d      	cmp	r2, #45	; 0x2d
 8006592:	d1c8      	bne.n	8006526 <_strtod_l+0x3e>
 8006594:	2201      	movs	r2, #1
 8006596:	920a      	str	r2, [sp, #40]	; 0x28
 8006598:	1c5a      	adds	r2, r3, #1
 800659a:	9219      	str	r2, [sp, #100]	; 0x64
 800659c:	785b      	ldrb	r3, [r3, #1]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d1c3      	bne.n	800652a <_strtod_l+0x42>
 80065a2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80065a4:	9619      	str	r6, [sp, #100]	; 0x64
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	f040 856b 	bne.w	8007082 <_strtod_l+0xb9a>
 80065ac:	4642      	mov	r2, r8
 80065ae:	464b      	mov	r3, r9
 80065b0:	e7e4      	b.n	800657c <_strtod_l+0x94>
 80065b2:	2200      	movs	r2, #0
 80065b4:	e7ef      	b.n	8006596 <_strtod_l+0xae>
 80065b6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80065b8:	b13a      	cbz	r2, 80065ca <_strtod_l+0xe2>
 80065ba:	2135      	movs	r1, #53	; 0x35
 80065bc:	a81c      	add	r0, sp, #112	; 0x70
 80065be:	f002 fc8d 	bl	8008edc <__copybits>
 80065c2:	4650      	mov	r0, sl
 80065c4:	991a      	ldr	r1, [sp, #104]	; 0x68
 80065c6:	f002 f855 	bl	8008674 <_Bfree>
 80065ca:	3e01      	subs	r6, #1
 80065cc:	2e04      	cmp	r6, #4
 80065ce:	d806      	bhi.n	80065de <_strtod_l+0xf6>
 80065d0:	e8df f006 	tbb	[pc, r6]
 80065d4:	1714030a 	.word	0x1714030a
 80065d8:	0a          	.byte	0x0a
 80065d9:	00          	.byte	0x00
 80065da:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 80065de:	0721      	lsls	r1, r4, #28
 80065e0:	d5c3      	bpl.n	800656a <_strtod_l+0x82>
 80065e2:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 80065e6:	e7c0      	b.n	800656a <_strtod_l+0x82>
 80065e8:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80065ea:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 80065ee:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80065f2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80065f6:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 80065fa:	e7f0      	b.n	80065de <_strtod_l+0xf6>
 80065fc:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8006778 <_strtod_l+0x290>
 8006600:	e7ed      	b.n	80065de <_strtod_l+0xf6>
 8006602:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8006606:	f04f 38ff 	mov.w	r8, #4294967295
 800660a:	e7e8      	b.n	80065de <_strtod_l+0xf6>
 800660c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800660e:	1c5a      	adds	r2, r3, #1
 8006610:	9219      	str	r2, [sp, #100]	; 0x64
 8006612:	785b      	ldrb	r3, [r3, #1]
 8006614:	2b30      	cmp	r3, #48	; 0x30
 8006616:	d0f9      	beq.n	800660c <_strtod_l+0x124>
 8006618:	2b00      	cmp	r3, #0
 800661a:	d0a6      	beq.n	800656a <_strtod_l+0x82>
 800661c:	2301      	movs	r3, #1
 800661e:	9307      	str	r3, [sp, #28]
 8006620:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006622:	220a      	movs	r2, #10
 8006624:	9308      	str	r3, [sp, #32]
 8006626:	2300      	movs	r3, #0
 8006628:	469b      	mov	fp, r3
 800662a:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800662e:	9819      	ldr	r0, [sp, #100]	; 0x64
 8006630:	7805      	ldrb	r5, [r0, #0]
 8006632:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8006636:	b2d9      	uxtb	r1, r3
 8006638:	2909      	cmp	r1, #9
 800663a:	d927      	bls.n	800668c <_strtod_l+0x1a4>
 800663c:	4622      	mov	r2, r4
 800663e:	4639      	mov	r1, r7
 8006640:	f002 fef2 	bl	8009428 <strncmp>
 8006644:	2800      	cmp	r0, #0
 8006646:	d033      	beq.n	80066b0 <_strtod_l+0x1c8>
 8006648:	2000      	movs	r0, #0
 800664a:	462a      	mov	r2, r5
 800664c:	465c      	mov	r4, fp
 800664e:	4603      	mov	r3, r0
 8006650:	9004      	str	r0, [sp, #16]
 8006652:	2a65      	cmp	r2, #101	; 0x65
 8006654:	d001      	beq.n	800665a <_strtod_l+0x172>
 8006656:	2a45      	cmp	r2, #69	; 0x45
 8006658:	d114      	bne.n	8006684 <_strtod_l+0x19c>
 800665a:	b91c      	cbnz	r4, 8006664 <_strtod_l+0x17c>
 800665c:	9a07      	ldr	r2, [sp, #28]
 800665e:	4302      	orrs	r2, r0
 8006660:	d09f      	beq.n	80065a2 <_strtod_l+0xba>
 8006662:	2400      	movs	r4, #0
 8006664:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8006666:	1c72      	adds	r2, r6, #1
 8006668:	9219      	str	r2, [sp, #100]	; 0x64
 800666a:	7872      	ldrb	r2, [r6, #1]
 800666c:	2a2b      	cmp	r2, #43	; 0x2b
 800666e:	d079      	beq.n	8006764 <_strtod_l+0x27c>
 8006670:	2a2d      	cmp	r2, #45	; 0x2d
 8006672:	f000 8083 	beq.w	800677c <_strtod_l+0x294>
 8006676:	2700      	movs	r7, #0
 8006678:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800667c:	2909      	cmp	r1, #9
 800667e:	f240 8083 	bls.w	8006788 <_strtod_l+0x2a0>
 8006682:	9619      	str	r6, [sp, #100]	; 0x64
 8006684:	2500      	movs	r5, #0
 8006686:	e09f      	b.n	80067c8 <_strtod_l+0x2e0>
 8006688:	2300      	movs	r3, #0
 800668a:	e7c8      	b.n	800661e <_strtod_l+0x136>
 800668c:	f1bb 0f08 	cmp.w	fp, #8
 8006690:	bfd5      	itete	le
 8006692:	9906      	ldrle	r1, [sp, #24]
 8006694:	9905      	ldrgt	r1, [sp, #20]
 8006696:	fb02 3301 	mlale	r3, r2, r1, r3
 800669a:	fb02 3301 	mlagt	r3, r2, r1, r3
 800669e:	f100 0001 	add.w	r0, r0, #1
 80066a2:	bfd4      	ite	le
 80066a4:	9306      	strle	r3, [sp, #24]
 80066a6:	9305      	strgt	r3, [sp, #20]
 80066a8:	f10b 0b01 	add.w	fp, fp, #1
 80066ac:	9019      	str	r0, [sp, #100]	; 0x64
 80066ae:	e7be      	b.n	800662e <_strtod_l+0x146>
 80066b0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80066b2:	191a      	adds	r2, r3, r4
 80066b4:	9219      	str	r2, [sp, #100]	; 0x64
 80066b6:	5d1a      	ldrb	r2, [r3, r4]
 80066b8:	f1bb 0f00 	cmp.w	fp, #0
 80066bc:	d036      	beq.n	800672c <_strtod_l+0x244>
 80066be:	465c      	mov	r4, fp
 80066c0:	9004      	str	r0, [sp, #16]
 80066c2:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80066c6:	2b09      	cmp	r3, #9
 80066c8:	d912      	bls.n	80066f0 <_strtod_l+0x208>
 80066ca:	2301      	movs	r3, #1
 80066cc:	e7c1      	b.n	8006652 <_strtod_l+0x16a>
 80066ce:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80066d0:	3001      	adds	r0, #1
 80066d2:	1c5a      	adds	r2, r3, #1
 80066d4:	9219      	str	r2, [sp, #100]	; 0x64
 80066d6:	785a      	ldrb	r2, [r3, #1]
 80066d8:	2a30      	cmp	r2, #48	; 0x30
 80066da:	d0f8      	beq.n	80066ce <_strtod_l+0x1e6>
 80066dc:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80066e0:	2b08      	cmp	r3, #8
 80066e2:	f200 84d5 	bhi.w	8007090 <_strtod_l+0xba8>
 80066e6:	9004      	str	r0, [sp, #16]
 80066e8:	2000      	movs	r0, #0
 80066ea:	4604      	mov	r4, r0
 80066ec:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80066ee:	9308      	str	r3, [sp, #32]
 80066f0:	3a30      	subs	r2, #48	; 0x30
 80066f2:	f100 0301 	add.w	r3, r0, #1
 80066f6:	d013      	beq.n	8006720 <_strtod_l+0x238>
 80066f8:	9904      	ldr	r1, [sp, #16]
 80066fa:	1905      	adds	r5, r0, r4
 80066fc:	4419      	add	r1, r3
 80066fe:	9104      	str	r1, [sp, #16]
 8006700:	4623      	mov	r3, r4
 8006702:	210a      	movs	r1, #10
 8006704:	42ab      	cmp	r3, r5
 8006706:	d113      	bne.n	8006730 <_strtod_l+0x248>
 8006708:	1823      	adds	r3, r4, r0
 800670a:	2b08      	cmp	r3, #8
 800670c:	f104 0401 	add.w	r4, r4, #1
 8006710:	4404      	add	r4, r0
 8006712:	dc1b      	bgt.n	800674c <_strtod_l+0x264>
 8006714:	230a      	movs	r3, #10
 8006716:	9906      	ldr	r1, [sp, #24]
 8006718:	fb03 2301 	mla	r3, r3, r1, r2
 800671c:	9306      	str	r3, [sp, #24]
 800671e:	2300      	movs	r3, #0
 8006720:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006722:	4618      	mov	r0, r3
 8006724:	1c51      	adds	r1, r2, #1
 8006726:	9119      	str	r1, [sp, #100]	; 0x64
 8006728:	7852      	ldrb	r2, [r2, #1]
 800672a:	e7ca      	b.n	80066c2 <_strtod_l+0x1da>
 800672c:	4658      	mov	r0, fp
 800672e:	e7d3      	b.n	80066d8 <_strtod_l+0x1f0>
 8006730:	2b08      	cmp	r3, #8
 8006732:	dc04      	bgt.n	800673e <_strtod_l+0x256>
 8006734:	9f06      	ldr	r7, [sp, #24]
 8006736:	434f      	muls	r7, r1
 8006738:	9706      	str	r7, [sp, #24]
 800673a:	3301      	adds	r3, #1
 800673c:	e7e2      	b.n	8006704 <_strtod_l+0x21c>
 800673e:	1c5f      	adds	r7, r3, #1
 8006740:	2f10      	cmp	r7, #16
 8006742:	bfde      	ittt	le
 8006744:	9f05      	ldrle	r7, [sp, #20]
 8006746:	434f      	mulle	r7, r1
 8006748:	9705      	strle	r7, [sp, #20]
 800674a:	e7f6      	b.n	800673a <_strtod_l+0x252>
 800674c:	2c10      	cmp	r4, #16
 800674e:	bfdf      	itttt	le
 8006750:	230a      	movle	r3, #10
 8006752:	9905      	ldrle	r1, [sp, #20]
 8006754:	fb03 2301 	mlale	r3, r3, r1, r2
 8006758:	9305      	strle	r3, [sp, #20]
 800675a:	e7e0      	b.n	800671e <_strtod_l+0x236>
 800675c:	2300      	movs	r3, #0
 800675e:	9304      	str	r3, [sp, #16]
 8006760:	2301      	movs	r3, #1
 8006762:	e77b      	b.n	800665c <_strtod_l+0x174>
 8006764:	2700      	movs	r7, #0
 8006766:	1cb2      	adds	r2, r6, #2
 8006768:	9219      	str	r2, [sp, #100]	; 0x64
 800676a:	78b2      	ldrb	r2, [r6, #2]
 800676c:	e784      	b.n	8006678 <_strtod_l+0x190>
 800676e:	bf00      	nop
 8006770:	0800a2f0 	.word	0x0800a2f0
 8006774:	0800a0a8 	.word	0x0800a0a8
 8006778:	7ff00000 	.word	0x7ff00000
 800677c:	2701      	movs	r7, #1
 800677e:	e7f2      	b.n	8006766 <_strtod_l+0x27e>
 8006780:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006782:	1c51      	adds	r1, r2, #1
 8006784:	9119      	str	r1, [sp, #100]	; 0x64
 8006786:	7852      	ldrb	r2, [r2, #1]
 8006788:	2a30      	cmp	r2, #48	; 0x30
 800678a:	d0f9      	beq.n	8006780 <_strtod_l+0x298>
 800678c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8006790:	2908      	cmp	r1, #8
 8006792:	f63f af77 	bhi.w	8006684 <_strtod_l+0x19c>
 8006796:	f04f 0e0a 	mov.w	lr, #10
 800679a:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 800679e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80067a0:	9209      	str	r2, [sp, #36]	; 0x24
 80067a2:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80067a4:	1c51      	adds	r1, r2, #1
 80067a6:	9119      	str	r1, [sp, #100]	; 0x64
 80067a8:	7852      	ldrb	r2, [r2, #1]
 80067aa:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 80067ae:	2d09      	cmp	r5, #9
 80067b0:	d935      	bls.n	800681e <_strtod_l+0x336>
 80067b2:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80067b4:	1b49      	subs	r1, r1, r5
 80067b6:	2908      	cmp	r1, #8
 80067b8:	f644 651f 	movw	r5, #19999	; 0x4e1f
 80067bc:	dc02      	bgt.n	80067c4 <_strtod_l+0x2dc>
 80067be:	4565      	cmp	r5, ip
 80067c0:	bfa8      	it	ge
 80067c2:	4665      	movge	r5, ip
 80067c4:	b107      	cbz	r7, 80067c8 <_strtod_l+0x2e0>
 80067c6:	426d      	negs	r5, r5
 80067c8:	2c00      	cmp	r4, #0
 80067ca:	d14c      	bne.n	8006866 <_strtod_l+0x37e>
 80067cc:	9907      	ldr	r1, [sp, #28]
 80067ce:	4301      	orrs	r1, r0
 80067d0:	f47f aecb 	bne.w	800656a <_strtod_l+0x82>
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	f47f aee4 	bne.w	80065a2 <_strtod_l+0xba>
 80067da:	2a69      	cmp	r2, #105	; 0x69
 80067dc:	d026      	beq.n	800682c <_strtod_l+0x344>
 80067de:	dc23      	bgt.n	8006828 <_strtod_l+0x340>
 80067e0:	2a49      	cmp	r2, #73	; 0x49
 80067e2:	d023      	beq.n	800682c <_strtod_l+0x344>
 80067e4:	2a4e      	cmp	r2, #78	; 0x4e
 80067e6:	f47f aedc 	bne.w	80065a2 <_strtod_l+0xba>
 80067ea:	499d      	ldr	r1, [pc, #628]	; (8006a60 <_strtod_l+0x578>)
 80067ec:	a819      	add	r0, sp, #100	; 0x64
 80067ee:	f001 fe17 	bl	8008420 <__match>
 80067f2:	2800      	cmp	r0, #0
 80067f4:	f43f aed5 	beq.w	80065a2 <_strtod_l+0xba>
 80067f8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80067fa:	781b      	ldrb	r3, [r3, #0]
 80067fc:	2b28      	cmp	r3, #40	; 0x28
 80067fe:	d12c      	bne.n	800685a <_strtod_l+0x372>
 8006800:	4998      	ldr	r1, [pc, #608]	; (8006a64 <_strtod_l+0x57c>)
 8006802:	aa1c      	add	r2, sp, #112	; 0x70
 8006804:	a819      	add	r0, sp, #100	; 0x64
 8006806:	f001 fe1f 	bl	8008448 <__hexnan>
 800680a:	2805      	cmp	r0, #5
 800680c:	d125      	bne.n	800685a <_strtod_l+0x372>
 800680e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006810:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8006814:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8006818:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800681c:	e6a5      	b.n	800656a <_strtod_l+0x82>
 800681e:	fb0e 2c0c 	mla	ip, lr, ip, r2
 8006822:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 8006826:	e7bc      	b.n	80067a2 <_strtod_l+0x2ba>
 8006828:	2a6e      	cmp	r2, #110	; 0x6e
 800682a:	e7dc      	b.n	80067e6 <_strtod_l+0x2fe>
 800682c:	498e      	ldr	r1, [pc, #568]	; (8006a68 <_strtod_l+0x580>)
 800682e:	a819      	add	r0, sp, #100	; 0x64
 8006830:	f001 fdf6 	bl	8008420 <__match>
 8006834:	2800      	cmp	r0, #0
 8006836:	f43f aeb4 	beq.w	80065a2 <_strtod_l+0xba>
 800683a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800683c:	498b      	ldr	r1, [pc, #556]	; (8006a6c <_strtod_l+0x584>)
 800683e:	3b01      	subs	r3, #1
 8006840:	a819      	add	r0, sp, #100	; 0x64
 8006842:	9319      	str	r3, [sp, #100]	; 0x64
 8006844:	f001 fdec 	bl	8008420 <__match>
 8006848:	b910      	cbnz	r0, 8006850 <_strtod_l+0x368>
 800684a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800684c:	3301      	adds	r3, #1
 800684e:	9319      	str	r3, [sp, #100]	; 0x64
 8006850:	f04f 0800 	mov.w	r8, #0
 8006854:	f8df 9218 	ldr.w	r9, [pc, #536]	; 8006a70 <_strtod_l+0x588>
 8006858:	e687      	b.n	800656a <_strtod_l+0x82>
 800685a:	4886      	ldr	r0, [pc, #536]	; (8006a74 <_strtod_l+0x58c>)
 800685c:	f002 fdce 	bl	80093fc <nan>
 8006860:	4680      	mov	r8, r0
 8006862:	4689      	mov	r9, r1
 8006864:	e681      	b.n	800656a <_strtod_l+0x82>
 8006866:	9b04      	ldr	r3, [sp, #16]
 8006868:	f1bb 0f00 	cmp.w	fp, #0
 800686c:	bf08      	it	eq
 800686e:	46a3      	moveq	fp, r4
 8006870:	1aeb      	subs	r3, r5, r3
 8006872:	2c10      	cmp	r4, #16
 8006874:	9806      	ldr	r0, [sp, #24]
 8006876:	4626      	mov	r6, r4
 8006878:	9307      	str	r3, [sp, #28]
 800687a:	bfa8      	it	ge
 800687c:	2610      	movge	r6, #16
 800687e:	f7f9 fdb1 	bl	80003e4 <__aeabi_ui2d>
 8006882:	2c09      	cmp	r4, #9
 8006884:	4680      	mov	r8, r0
 8006886:	4689      	mov	r9, r1
 8006888:	dd13      	ble.n	80068b2 <_strtod_l+0x3ca>
 800688a:	4b7b      	ldr	r3, [pc, #492]	; (8006a78 <_strtod_l+0x590>)
 800688c:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006890:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8006894:	f7f9 fe20 	bl	80004d8 <__aeabi_dmul>
 8006898:	4680      	mov	r8, r0
 800689a:	9805      	ldr	r0, [sp, #20]
 800689c:	4689      	mov	r9, r1
 800689e:	f7f9 fda1 	bl	80003e4 <__aeabi_ui2d>
 80068a2:	4602      	mov	r2, r0
 80068a4:	460b      	mov	r3, r1
 80068a6:	4640      	mov	r0, r8
 80068a8:	4649      	mov	r1, r9
 80068aa:	f7f9 fc5f 	bl	800016c <__adddf3>
 80068ae:	4680      	mov	r8, r0
 80068b0:	4689      	mov	r9, r1
 80068b2:	2c0f      	cmp	r4, #15
 80068b4:	dc36      	bgt.n	8006924 <_strtod_l+0x43c>
 80068b6:	9b07      	ldr	r3, [sp, #28]
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	f43f ae56 	beq.w	800656a <_strtod_l+0x82>
 80068be:	dd22      	ble.n	8006906 <_strtod_l+0x41e>
 80068c0:	2b16      	cmp	r3, #22
 80068c2:	dc09      	bgt.n	80068d8 <_strtod_l+0x3f0>
 80068c4:	496c      	ldr	r1, [pc, #432]	; (8006a78 <_strtod_l+0x590>)
 80068c6:	4642      	mov	r2, r8
 80068c8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80068cc:	464b      	mov	r3, r9
 80068ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 80068d2:	f7f9 fe01 	bl	80004d8 <__aeabi_dmul>
 80068d6:	e7c3      	b.n	8006860 <_strtod_l+0x378>
 80068d8:	9a07      	ldr	r2, [sp, #28]
 80068da:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 80068de:	4293      	cmp	r3, r2
 80068e0:	db20      	blt.n	8006924 <_strtod_l+0x43c>
 80068e2:	4d65      	ldr	r5, [pc, #404]	; (8006a78 <_strtod_l+0x590>)
 80068e4:	f1c4 040f 	rsb	r4, r4, #15
 80068e8:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 80068ec:	4642      	mov	r2, r8
 80068ee:	e9d1 0100 	ldrd	r0, r1, [r1]
 80068f2:	464b      	mov	r3, r9
 80068f4:	f7f9 fdf0 	bl	80004d8 <__aeabi_dmul>
 80068f8:	9b07      	ldr	r3, [sp, #28]
 80068fa:	1b1c      	subs	r4, r3, r4
 80068fc:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8006900:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006904:	e7e5      	b.n	80068d2 <_strtod_l+0x3ea>
 8006906:	9b07      	ldr	r3, [sp, #28]
 8006908:	3316      	adds	r3, #22
 800690a:	db0b      	blt.n	8006924 <_strtod_l+0x43c>
 800690c:	9b04      	ldr	r3, [sp, #16]
 800690e:	4640      	mov	r0, r8
 8006910:	1b5d      	subs	r5, r3, r5
 8006912:	4b59      	ldr	r3, [pc, #356]	; (8006a78 <_strtod_l+0x590>)
 8006914:	4649      	mov	r1, r9
 8006916:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800691a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800691e:	f7f9 ff05 	bl	800072c <__aeabi_ddiv>
 8006922:	e79d      	b.n	8006860 <_strtod_l+0x378>
 8006924:	9b07      	ldr	r3, [sp, #28]
 8006926:	1ba6      	subs	r6, r4, r6
 8006928:	441e      	add	r6, r3
 800692a:	2e00      	cmp	r6, #0
 800692c:	dd74      	ble.n	8006a18 <_strtod_l+0x530>
 800692e:	f016 030f 	ands.w	r3, r6, #15
 8006932:	d00a      	beq.n	800694a <_strtod_l+0x462>
 8006934:	4950      	ldr	r1, [pc, #320]	; (8006a78 <_strtod_l+0x590>)
 8006936:	4642      	mov	r2, r8
 8006938:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800693c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006940:	464b      	mov	r3, r9
 8006942:	f7f9 fdc9 	bl	80004d8 <__aeabi_dmul>
 8006946:	4680      	mov	r8, r0
 8006948:	4689      	mov	r9, r1
 800694a:	f036 060f 	bics.w	r6, r6, #15
 800694e:	d052      	beq.n	80069f6 <_strtod_l+0x50e>
 8006950:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 8006954:	dd27      	ble.n	80069a6 <_strtod_l+0x4be>
 8006956:	f04f 0b00 	mov.w	fp, #0
 800695a:	f8cd b010 	str.w	fp, [sp, #16]
 800695e:	f8cd b020 	str.w	fp, [sp, #32]
 8006962:	f8cd b018 	str.w	fp, [sp, #24]
 8006966:	2322      	movs	r3, #34	; 0x22
 8006968:	f04f 0800 	mov.w	r8, #0
 800696c:	f8df 9100 	ldr.w	r9, [pc, #256]	; 8006a70 <_strtod_l+0x588>
 8006970:	f8ca 3000 	str.w	r3, [sl]
 8006974:	9b08      	ldr	r3, [sp, #32]
 8006976:	2b00      	cmp	r3, #0
 8006978:	f43f adf7 	beq.w	800656a <_strtod_l+0x82>
 800697c:	4650      	mov	r0, sl
 800697e:	991a      	ldr	r1, [sp, #104]	; 0x68
 8006980:	f001 fe78 	bl	8008674 <_Bfree>
 8006984:	4650      	mov	r0, sl
 8006986:	9906      	ldr	r1, [sp, #24]
 8006988:	f001 fe74 	bl	8008674 <_Bfree>
 800698c:	4650      	mov	r0, sl
 800698e:	9904      	ldr	r1, [sp, #16]
 8006990:	f001 fe70 	bl	8008674 <_Bfree>
 8006994:	4650      	mov	r0, sl
 8006996:	9908      	ldr	r1, [sp, #32]
 8006998:	f001 fe6c 	bl	8008674 <_Bfree>
 800699c:	4659      	mov	r1, fp
 800699e:	4650      	mov	r0, sl
 80069a0:	f001 fe68 	bl	8008674 <_Bfree>
 80069a4:	e5e1      	b.n	800656a <_strtod_l+0x82>
 80069a6:	4b35      	ldr	r3, [pc, #212]	; (8006a7c <_strtod_l+0x594>)
 80069a8:	4640      	mov	r0, r8
 80069aa:	9305      	str	r3, [sp, #20]
 80069ac:	2300      	movs	r3, #0
 80069ae:	4649      	mov	r1, r9
 80069b0:	461f      	mov	r7, r3
 80069b2:	1136      	asrs	r6, r6, #4
 80069b4:	2e01      	cmp	r6, #1
 80069b6:	dc21      	bgt.n	80069fc <_strtod_l+0x514>
 80069b8:	b10b      	cbz	r3, 80069be <_strtod_l+0x4d6>
 80069ba:	4680      	mov	r8, r0
 80069bc:	4689      	mov	r9, r1
 80069be:	4b2f      	ldr	r3, [pc, #188]	; (8006a7c <_strtod_l+0x594>)
 80069c0:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 80069c4:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 80069c8:	4642      	mov	r2, r8
 80069ca:	e9d7 0100 	ldrd	r0, r1, [r7]
 80069ce:	464b      	mov	r3, r9
 80069d0:	f7f9 fd82 	bl	80004d8 <__aeabi_dmul>
 80069d4:	4b26      	ldr	r3, [pc, #152]	; (8006a70 <_strtod_l+0x588>)
 80069d6:	460a      	mov	r2, r1
 80069d8:	400b      	ands	r3, r1
 80069da:	4929      	ldr	r1, [pc, #164]	; (8006a80 <_strtod_l+0x598>)
 80069dc:	4680      	mov	r8, r0
 80069de:	428b      	cmp	r3, r1
 80069e0:	d8b9      	bhi.n	8006956 <_strtod_l+0x46e>
 80069e2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80069e6:	428b      	cmp	r3, r1
 80069e8:	bf86      	itte	hi
 80069ea:	f04f 38ff 	movhi.w	r8, #4294967295
 80069ee:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 8006a84 <_strtod_l+0x59c>
 80069f2:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 80069f6:	2300      	movs	r3, #0
 80069f8:	9305      	str	r3, [sp, #20]
 80069fa:	e07f      	b.n	8006afc <_strtod_l+0x614>
 80069fc:	07f2      	lsls	r2, r6, #31
 80069fe:	d505      	bpl.n	8006a0c <_strtod_l+0x524>
 8006a00:	9b05      	ldr	r3, [sp, #20]
 8006a02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a06:	f7f9 fd67 	bl	80004d8 <__aeabi_dmul>
 8006a0a:	2301      	movs	r3, #1
 8006a0c:	9a05      	ldr	r2, [sp, #20]
 8006a0e:	3701      	adds	r7, #1
 8006a10:	3208      	adds	r2, #8
 8006a12:	1076      	asrs	r6, r6, #1
 8006a14:	9205      	str	r2, [sp, #20]
 8006a16:	e7cd      	b.n	80069b4 <_strtod_l+0x4cc>
 8006a18:	d0ed      	beq.n	80069f6 <_strtod_l+0x50e>
 8006a1a:	4276      	negs	r6, r6
 8006a1c:	f016 020f 	ands.w	r2, r6, #15
 8006a20:	d00a      	beq.n	8006a38 <_strtod_l+0x550>
 8006a22:	4b15      	ldr	r3, [pc, #84]	; (8006a78 <_strtod_l+0x590>)
 8006a24:	4640      	mov	r0, r8
 8006a26:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006a2a:	4649      	mov	r1, r9
 8006a2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a30:	f7f9 fe7c 	bl	800072c <__aeabi_ddiv>
 8006a34:	4680      	mov	r8, r0
 8006a36:	4689      	mov	r9, r1
 8006a38:	1136      	asrs	r6, r6, #4
 8006a3a:	d0dc      	beq.n	80069f6 <_strtod_l+0x50e>
 8006a3c:	2e1f      	cmp	r6, #31
 8006a3e:	dd23      	ble.n	8006a88 <_strtod_l+0x5a0>
 8006a40:	f04f 0b00 	mov.w	fp, #0
 8006a44:	f8cd b010 	str.w	fp, [sp, #16]
 8006a48:	f8cd b020 	str.w	fp, [sp, #32]
 8006a4c:	f8cd b018 	str.w	fp, [sp, #24]
 8006a50:	2322      	movs	r3, #34	; 0x22
 8006a52:	f04f 0800 	mov.w	r8, #0
 8006a56:	f04f 0900 	mov.w	r9, #0
 8006a5a:	f8ca 3000 	str.w	r3, [sl]
 8006a5e:	e789      	b.n	8006974 <_strtod_l+0x48c>
 8006a60:	0800a079 	.word	0x0800a079
 8006a64:	0800a0bc 	.word	0x0800a0bc
 8006a68:	0800a071 	.word	0x0800a071
 8006a6c:	0800a1fc 	.word	0x0800a1fc
 8006a70:	7ff00000 	.word	0x7ff00000
 8006a74:	0800a4a8 	.word	0x0800a4a8
 8006a78:	0800a388 	.word	0x0800a388
 8006a7c:	0800a360 	.word	0x0800a360
 8006a80:	7ca00000 	.word	0x7ca00000
 8006a84:	7fefffff 	.word	0x7fefffff
 8006a88:	f016 0310 	ands.w	r3, r6, #16
 8006a8c:	bf18      	it	ne
 8006a8e:	236a      	movne	r3, #106	; 0x6a
 8006a90:	4640      	mov	r0, r8
 8006a92:	9305      	str	r3, [sp, #20]
 8006a94:	4649      	mov	r1, r9
 8006a96:	2300      	movs	r3, #0
 8006a98:	4fb0      	ldr	r7, [pc, #704]	; (8006d5c <_strtod_l+0x874>)
 8006a9a:	07f2      	lsls	r2, r6, #31
 8006a9c:	d504      	bpl.n	8006aa8 <_strtod_l+0x5c0>
 8006a9e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006aa2:	f7f9 fd19 	bl	80004d8 <__aeabi_dmul>
 8006aa6:	2301      	movs	r3, #1
 8006aa8:	1076      	asrs	r6, r6, #1
 8006aaa:	f107 0708 	add.w	r7, r7, #8
 8006aae:	d1f4      	bne.n	8006a9a <_strtod_l+0x5b2>
 8006ab0:	b10b      	cbz	r3, 8006ab6 <_strtod_l+0x5ce>
 8006ab2:	4680      	mov	r8, r0
 8006ab4:	4689      	mov	r9, r1
 8006ab6:	9b05      	ldr	r3, [sp, #20]
 8006ab8:	b1c3      	cbz	r3, 8006aec <_strtod_l+0x604>
 8006aba:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8006abe:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	4649      	mov	r1, r9
 8006ac6:	dd11      	ble.n	8006aec <_strtod_l+0x604>
 8006ac8:	2b1f      	cmp	r3, #31
 8006aca:	f340 8127 	ble.w	8006d1c <_strtod_l+0x834>
 8006ace:	2b34      	cmp	r3, #52	; 0x34
 8006ad0:	bfd8      	it	le
 8006ad2:	f04f 33ff 	movle.w	r3, #4294967295
 8006ad6:	f04f 0800 	mov.w	r8, #0
 8006ada:	bfcf      	iteee	gt
 8006adc:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8006ae0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8006ae4:	fa03 f202 	lslle.w	r2, r3, r2
 8006ae8:	ea02 0901 	andle.w	r9, r2, r1
 8006aec:	2200      	movs	r2, #0
 8006aee:	2300      	movs	r3, #0
 8006af0:	4640      	mov	r0, r8
 8006af2:	4649      	mov	r1, r9
 8006af4:	f7f9 ff58 	bl	80009a8 <__aeabi_dcmpeq>
 8006af8:	2800      	cmp	r0, #0
 8006afa:	d1a1      	bne.n	8006a40 <_strtod_l+0x558>
 8006afc:	9b06      	ldr	r3, [sp, #24]
 8006afe:	465a      	mov	r2, fp
 8006b00:	9300      	str	r3, [sp, #0]
 8006b02:	4650      	mov	r0, sl
 8006b04:	4623      	mov	r3, r4
 8006b06:	9908      	ldr	r1, [sp, #32]
 8006b08:	f001 fe1c 	bl	8008744 <__s2b>
 8006b0c:	9008      	str	r0, [sp, #32]
 8006b0e:	2800      	cmp	r0, #0
 8006b10:	f43f af21 	beq.w	8006956 <_strtod_l+0x46e>
 8006b14:	9b04      	ldr	r3, [sp, #16]
 8006b16:	f04f 0b00 	mov.w	fp, #0
 8006b1a:	1b5d      	subs	r5, r3, r5
 8006b1c:	9b07      	ldr	r3, [sp, #28]
 8006b1e:	f8cd b010 	str.w	fp, [sp, #16]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	bfb4      	ite	lt
 8006b26:	462b      	movlt	r3, r5
 8006b28:	2300      	movge	r3, #0
 8006b2a:	930e      	str	r3, [sp, #56]	; 0x38
 8006b2c:	9b07      	ldr	r3, [sp, #28]
 8006b2e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8006b32:	9314      	str	r3, [sp, #80]	; 0x50
 8006b34:	9b08      	ldr	r3, [sp, #32]
 8006b36:	4650      	mov	r0, sl
 8006b38:	6859      	ldr	r1, [r3, #4]
 8006b3a:	f001 fd5b 	bl	80085f4 <_Balloc>
 8006b3e:	9006      	str	r0, [sp, #24]
 8006b40:	2800      	cmp	r0, #0
 8006b42:	f43f af10 	beq.w	8006966 <_strtod_l+0x47e>
 8006b46:	9b08      	ldr	r3, [sp, #32]
 8006b48:	300c      	adds	r0, #12
 8006b4a:	691a      	ldr	r2, [r3, #16]
 8006b4c:	f103 010c 	add.w	r1, r3, #12
 8006b50:	3202      	adds	r2, #2
 8006b52:	0092      	lsls	r2, r2, #2
 8006b54:	f001 fd40 	bl	80085d8 <memcpy>
 8006b58:	ab1c      	add	r3, sp, #112	; 0x70
 8006b5a:	9301      	str	r3, [sp, #4]
 8006b5c:	ab1b      	add	r3, sp, #108	; 0x6c
 8006b5e:	9300      	str	r3, [sp, #0]
 8006b60:	4642      	mov	r2, r8
 8006b62:	464b      	mov	r3, r9
 8006b64:	4650      	mov	r0, sl
 8006b66:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 8006b6a:	f002 f92d 	bl	8008dc8 <__d2b>
 8006b6e:	901a      	str	r0, [sp, #104]	; 0x68
 8006b70:	2800      	cmp	r0, #0
 8006b72:	f43f aef8 	beq.w	8006966 <_strtod_l+0x47e>
 8006b76:	2101      	movs	r1, #1
 8006b78:	4650      	mov	r0, sl
 8006b7a:	f001 fe7b 	bl	8008874 <__i2b>
 8006b7e:	4603      	mov	r3, r0
 8006b80:	9004      	str	r0, [sp, #16]
 8006b82:	2800      	cmp	r0, #0
 8006b84:	f43f aeef 	beq.w	8006966 <_strtod_l+0x47e>
 8006b88:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8006b8a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8006b8c:	2d00      	cmp	r5, #0
 8006b8e:	bfab      	itete	ge
 8006b90:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8006b92:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
 8006b94:	18ee      	addge	r6, r5, r3
 8006b96:	1b5c      	sublt	r4, r3, r5
 8006b98:	9b05      	ldr	r3, [sp, #20]
 8006b9a:	bfa8      	it	ge
 8006b9c:	9c14      	ldrge	r4, [sp, #80]	; 0x50
 8006b9e:	eba5 0503 	sub.w	r5, r5, r3
 8006ba2:	4415      	add	r5, r2
 8006ba4:	4b6e      	ldr	r3, [pc, #440]	; (8006d60 <_strtod_l+0x878>)
 8006ba6:	f105 35ff 	add.w	r5, r5, #4294967295
 8006baa:	bfb8      	it	lt
 8006bac:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8006bae:	429d      	cmp	r5, r3
 8006bb0:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8006bb4:	f280 80c4 	bge.w	8006d40 <_strtod_l+0x858>
 8006bb8:	1b5b      	subs	r3, r3, r5
 8006bba:	2b1f      	cmp	r3, #31
 8006bbc:	f04f 0701 	mov.w	r7, #1
 8006bc0:	eba2 0203 	sub.w	r2, r2, r3
 8006bc4:	f300 80b1 	bgt.w	8006d2a <_strtod_l+0x842>
 8006bc8:	2500      	movs	r5, #0
 8006bca:	fa07 f303 	lsl.w	r3, r7, r3
 8006bce:	930f      	str	r3, [sp, #60]	; 0x3c
 8006bd0:	18b7      	adds	r7, r6, r2
 8006bd2:	9b05      	ldr	r3, [sp, #20]
 8006bd4:	42be      	cmp	r6, r7
 8006bd6:	4414      	add	r4, r2
 8006bd8:	441c      	add	r4, r3
 8006bda:	4633      	mov	r3, r6
 8006bdc:	bfa8      	it	ge
 8006bde:	463b      	movge	r3, r7
 8006be0:	42a3      	cmp	r3, r4
 8006be2:	bfa8      	it	ge
 8006be4:	4623      	movge	r3, r4
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	bfc2      	ittt	gt
 8006bea:	1aff      	subgt	r7, r7, r3
 8006bec:	1ae4      	subgt	r4, r4, r3
 8006bee:	1af6      	subgt	r6, r6, r3
 8006bf0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	dd17      	ble.n	8006c26 <_strtod_l+0x73e>
 8006bf6:	461a      	mov	r2, r3
 8006bf8:	4650      	mov	r0, sl
 8006bfa:	9904      	ldr	r1, [sp, #16]
 8006bfc:	f001 fef8 	bl	80089f0 <__pow5mult>
 8006c00:	9004      	str	r0, [sp, #16]
 8006c02:	2800      	cmp	r0, #0
 8006c04:	f43f aeaf 	beq.w	8006966 <_strtod_l+0x47e>
 8006c08:	4601      	mov	r1, r0
 8006c0a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8006c0c:	4650      	mov	r0, sl
 8006c0e:	f001 fe47 	bl	80088a0 <__multiply>
 8006c12:	9009      	str	r0, [sp, #36]	; 0x24
 8006c14:	2800      	cmp	r0, #0
 8006c16:	f43f aea6 	beq.w	8006966 <_strtod_l+0x47e>
 8006c1a:	4650      	mov	r0, sl
 8006c1c:	991a      	ldr	r1, [sp, #104]	; 0x68
 8006c1e:	f001 fd29 	bl	8008674 <_Bfree>
 8006c22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c24:	931a      	str	r3, [sp, #104]	; 0x68
 8006c26:	2f00      	cmp	r7, #0
 8006c28:	f300 808e 	bgt.w	8006d48 <_strtod_l+0x860>
 8006c2c:	9b07      	ldr	r3, [sp, #28]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	dd08      	ble.n	8006c44 <_strtod_l+0x75c>
 8006c32:	4650      	mov	r0, sl
 8006c34:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006c36:	9906      	ldr	r1, [sp, #24]
 8006c38:	f001 feda 	bl	80089f0 <__pow5mult>
 8006c3c:	9006      	str	r0, [sp, #24]
 8006c3e:	2800      	cmp	r0, #0
 8006c40:	f43f ae91 	beq.w	8006966 <_strtod_l+0x47e>
 8006c44:	2c00      	cmp	r4, #0
 8006c46:	dd08      	ble.n	8006c5a <_strtod_l+0x772>
 8006c48:	4622      	mov	r2, r4
 8006c4a:	4650      	mov	r0, sl
 8006c4c:	9906      	ldr	r1, [sp, #24]
 8006c4e:	f001 ff29 	bl	8008aa4 <__lshift>
 8006c52:	9006      	str	r0, [sp, #24]
 8006c54:	2800      	cmp	r0, #0
 8006c56:	f43f ae86 	beq.w	8006966 <_strtod_l+0x47e>
 8006c5a:	2e00      	cmp	r6, #0
 8006c5c:	dd08      	ble.n	8006c70 <_strtod_l+0x788>
 8006c5e:	4632      	mov	r2, r6
 8006c60:	4650      	mov	r0, sl
 8006c62:	9904      	ldr	r1, [sp, #16]
 8006c64:	f001 ff1e 	bl	8008aa4 <__lshift>
 8006c68:	9004      	str	r0, [sp, #16]
 8006c6a:	2800      	cmp	r0, #0
 8006c6c:	f43f ae7b 	beq.w	8006966 <_strtod_l+0x47e>
 8006c70:	4650      	mov	r0, sl
 8006c72:	9a06      	ldr	r2, [sp, #24]
 8006c74:	991a      	ldr	r1, [sp, #104]	; 0x68
 8006c76:	f001 ffa1 	bl	8008bbc <__mdiff>
 8006c7a:	4683      	mov	fp, r0
 8006c7c:	2800      	cmp	r0, #0
 8006c7e:	f43f ae72 	beq.w	8006966 <_strtod_l+0x47e>
 8006c82:	2400      	movs	r4, #0
 8006c84:	68c3      	ldr	r3, [r0, #12]
 8006c86:	9904      	ldr	r1, [sp, #16]
 8006c88:	60c4      	str	r4, [r0, #12]
 8006c8a:	930b      	str	r3, [sp, #44]	; 0x2c
 8006c8c:	f001 ff7a 	bl	8008b84 <__mcmp>
 8006c90:	42a0      	cmp	r0, r4
 8006c92:	da6b      	bge.n	8006d6c <_strtod_l+0x884>
 8006c94:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006c96:	ea53 0308 	orrs.w	r3, r3, r8
 8006c9a:	f040 8091 	bne.w	8006dc0 <_strtod_l+0x8d8>
 8006c9e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	f040 808c 	bne.w	8006dc0 <_strtod_l+0x8d8>
 8006ca8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006cac:	0d1b      	lsrs	r3, r3, #20
 8006cae:	051b      	lsls	r3, r3, #20
 8006cb0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8006cb4:	f240 8084 	bls.w	8006dc0 <_strtod_l+0x8d8>
 8006cb8:	f8db 3014 	ldr.w	r3, [fp, #20]
 8006cbc:	b91b      	cbnz	r3, 8006cc6 <_strtod_l+0x7de>
 8006cbe:	f8db 3010 	ldr.w	r3, [fp, #16]
 8006cc2:	2b01      	cmp	r3, #1
 8006cc4:	dd7c      	ble.n	8006dc0 <_strtod_l+0x8d8>
 8006cc6:	4659      	mov	r1, fp
 8006cc8:	2201      	movs	r2, #1
 8006cca:	4650      	mov	r0, sl
 8006ccc:	f001 feea 	bl	8008aa4 <__lshift>
 8006cd0:	9904      	ldr	r1, [sp, #16]
 8006cd2:	4683      	mov	fp, r0
 8006cd4:	f001 ff56 	bl	8008b84 <__mcmp>
 8006cd8:	2800      	cmp	r0, #0
 8006cda:	dd71      	ble.n	8006dc0 <_strtod_l+0x8d8>
 8006cdc:	9905      	ldr	r1, [sp, #20]
 8006cde:	464b      	mov	r3, r9
 8006ce0:	4a20      	ldr	r2, [pc, #128]	; (8006d64 <_strtod_l+0x87c>)
 8006ce2:	2900      	cmp	r1, #0
 8006ce4:	f000 808c 	beq.w	8006e00 <_strtod_l+0x918>
 8006ce8:	ea02 0109 	and.w	r1, r2, r9
 8006cec:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8006cf0:	f300 8086 	bgt.w	8006e00 <_strtod_l+0x918>
 8006cf4:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8006cf8:	f77f aeaa 	ble.w	8006a50 <_strtod_l+0x568>
 8006cfc:	4640      	mov	r0, r8
 8006cfe:	4649      	mov	r1, r9
 8006d00:	4b19      	ldr	r3, [pc, #100]	; (8006d68 <_strtod_l+0x880>)
 8006d02:	2200      	movs	r2, #0
 8006d04:	f7f9 fbe8 	bl	80004d8 <__aeabi_dmul>
 8006d08:	460b      	mov	r3, r1
 8006d0a:	4303      	orrs	r3, r0
 8006d0c:	bf08      	it	eq
 8006d0e:	2322      	moveq	r3, #34	; 0x22
 8006d10:	4680      	mov	r8, r0
 8006d12:	4689      	mov	r9, r1
 8006d14:	bf08      	it	eq
 8006d16:	f8ca 3000 	streq.w	r3, [sl]
 8006d1a:	e62f      	b.n	800697c <_strtod_l+0x494>
 8006d1c:	f04f 32ff 	mov.w	r2, #4294967295
 8006d20:	fa02 f303 	lsl.w	r3, r2, r3
 8006d24:	ea03 0808 	and.w	r8, r3, r8
 8006d28:	e6e0      	b.n	8006aec <_strtod_l+0x604>
 8006d2a:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 8006d2e:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 8006d32:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 8006d36:	35e2      	adds	r5, #226	; 0xe2
 8006d38:	fa07 f505 	lsl.w	r5, r7, r5
 8006d3c:	970f      	str	r7, [sp, #60]	; 0x3c
 8006d3e:	e747      	b.n	8006bd0 <_strtod_l+0x6e8>
 8006d40:	2301      	movs	r3, #1
 8006d42:	2500      	movs	r5, #0
 8006d44:	930f      	str	r3, [sp, #60]	; 0x3c
 8006d46:	e743      	b.n	8006bd0 <_strtod_l+0x6e8>
 8006d48:	463a      	mov	r2, r7
 8006d4a:	4650      	mov	r0, sl
 8006d4c:	991a      	ldr	r1, [sp, #104]	; 0x68
 8006d4e:	f001 fea9 	bl	8008aa4 <__lshift>
 8006d52:	901a      	str	r0, [sp, #104]	; 0x68
 8006d54:	2800      	cmp	r0, #0
 8006d56:	f47f af69 	bne.w	8006c2c <_strtod_l+0x744>
 8006d5a:	e604      	b.n	8006966 <_strtod_l+0x47e>
 8006d5c:	0800a0d0 	.word	0x0800a0d0
 8006d60:	fffffc02 	.word	0xfffffc02
 8006d64:	7ff00000 	.word	0x7ff00000
 8006d68:	39500000 	.word	0x39500000
 8006d6c:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8006d70:	d165      	bne.n	8006e3e <_strtod_l+0x956>
 8006d72:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006d74:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006d78:	b35a      	cbz	r2, 8006dd2 <_strtod_l+0x8ea>
 8006d7a:	4a99      	ldr	r2, [pc, #612]	; (8006fe0 <_strtod_l+0xaf8>)
 8006d7c:	4293      	cmp	r3, r2
 8006d7e:	d12b      	bne.n	8006dd8 <_strtod_l+0x8f0>
 8006d80:	9b05      	ldr	r3, [sp, #20]
 8006d82:	4641      	mov	r1, r8
 8006d84:	b303      	cbz	r3, 8006dc8 <_strtod_l+0x8e0>
 8006d86:	464a      	mov	r2, r9
 8006d88:	4b96      	ldr	r3, [pc, #600]	; (8006fe4 <_strtod_l+0xafc>)
 8006d8a:	4013      	ands	r3, r2
 8006d8c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8006d90:	f04f 32ff 	mov.w	r2, #4294967295
 8006d94:	d81b      	bhi.n	8006dce <_strtod_l+0x8e6>
 8006d96:	0d1b      	lsrs	r3, r3, #20
 8006d98:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8006da0:	4299      	cmp	r1, r3
 8006da2:	d119      	bne.n	8006dd8 <_strtod_l+0x8f0>
 8006da4:	4b90      	ldr	r3, [pc, #576]	; (8006fe8 <_strtod_l+0xb00>)
 8006da6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006da8:	429a      	cmp	r2, r3
 8006daa:	d102      	bne.n	8006db2 <_strtod_l+0x8ca>
 8006dac:	3101      	adds	r1, #1
 8006dae:	f43f adda 	beq.w	8006966 <_strtod_l+0x47e>
 8006db2:	f04f 0800 	mov.w	r8, #0
 8006db6:	4b8b      	ldr	r3, [pc, #556]	; (8006fe4 <_strtod_l+0xafc>)
 8006db8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006dba:	401a      	ands	r2, r3
 8006dbc:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 8006dc0:	9b05      	ldr	r3, [sp, #20]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d19a      	bne.n	8006cfc <_strtod_l+0x814>
 8006dc6:	e5d9      	b.n	800697c <_strtod_l+0x494>
 8006dc8:	f04f 33ff 	mov.w	r3, #4294967295
 8006dcc:	e7e8      	b.n	8006da0 <_strtod_l+0x8b8>
 8006dce:	4613      	mov	r3, r2
 8006dd0:	e7e6      	b.n	8006da0 <_strtod_l+0x8b8>
 8006dd2:	ea53 0308 	orrs.w	r3, r3, r8
 8006dd6:	d081      	beq.n	8006cdc <_strtod_l+0x7f4>
 8006dd8:	b1e5      	cbz	r5, 8006e14 <_strtod_l+0x92c>
 8006dda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ddc:	421d      	tst	r5, r3
 8006dde:	d0ef      	beq.n	8006dc0 <_strtod_l+0x8d8>
 8006de0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006de2:	4640      	mov	r0, r8
 8006de4:	4649      	mov	r1, r9
 8006de6:	9a05      	ldr	r2, [sp, #20]
 8006de8:	b1c3      	cbz	r3, 8006e1c <_strtod_l+0x934>
 8006dea:	f7ff fb5b 	bl	80064a4 <sulp>
 8006dee:	4602      	mov	r2, r0
 8006df0:	460b      	mov	r3, r1
 8006df2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006df6:	f7f9 f9b9 	bl	800016c <__adddf3>
 8006dfa:	4680      	mov	r8, r0
 8006dfc:	4689      	mov	r9, r1
 8006dfe:	e7df      	b.n	8006dc0 <_strtod_l+0x8d8>
 8006e00:	4013      	ands	r3, r2
 8006e02:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8006e06:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8006e0a:	f04f 38ff 	mov.w	r8, #4294967295
 8006e0e:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8006e12:	e7d5      	b.n	8006dc0 <_strtod_l+0x8d8>
 8006e14:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006e16:	ea13 0f08 	tst.w	r3, r8
 8006e1a:	e7e0      	b.n	8006dde <_strtod_l+0x8f6>
 8006e1c:	f7ff fb42 	bl	80064a4 <sulp>
 8006e20:	4602      	mov	r2, r0
 8006e22:	460b      	mov	r3, r1
 8006e24:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006e28:	f7f9 f99e 	bl	8000168 <__aeabi_dsub>
 8006e2c:	2200      	movs	r2, #0
 8006e2e:	2300      	movs	r3, #0
 8006e30:	4680      	mov	r8, r0
 8006e32:	4689      	mov	r9, r1
 8006e34:	f7f9 fdb8 	bl	80009a8 <__aeabi_dcmpeq>
 8006e38:	2800      	cmp	r0, #0
 8006e3a:	d0c1      	beq.n	8006dc0 <_strtod_l+0x8d8>
 8006e3c:	e608      	b.n	8006a50 <_strtod_l+0x568>
 8006e3e:	4658      	mov	r0, fp
 8006e40:	9904      	ldr	r1, [sp, #16]
 8006e42:	f002 f81d 	bl	8008e80 <__ratio>
 8006e46:	2200      	movs	r2, #0
 8006e48:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006e4c:	4606      	mov	r6, r0
 8006e4e:	460f      	mov	r7, r1
 8006e50:	f7f9 fdbe 	bl	80009d0 <__aeabi_dcmple>
 8006e54:	2800      	cmp	r0, #0
 8006e56:	d070      	beq.n	8006f3a <_strtod_l+0xa52>
 8006e58:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d042      	beq.n	8006ee4 <_strtod_l+0x9fc>
 8006e5e:	2600      	movs	r6, #0
 8006e60:	4f62      	ldr	r7, [pc, #392]	; (8006fec <_strtod_l+0xb04>)
 8006e62:	4d62      	ldr	r5, [pc, #392]	; (8006fec <_strtod_l+0xb04>)
 8006e64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e66:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006e6a:	0d1b      	lsrs	r3, r3, #20
 8006e6c:	051b      	lsls	r3, r3, #20
 8006e6e:	930f      	str	r3, [sp, #60]	; 0x3c
 8006e70:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006e72:	4b5f      	ldr	r3, [pc, #380]	; (8006ff0 <_strtod_l+0xb08>)
 8006e74:	429a      	cmp	r2, r3
 8006e76:	f040 80c3 	bne.w	8007000 <_strtod_l+0xb18>
 8006e7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e7c:	4640      	mov	r0, r8
 8006e7e:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 8006e82:	4649      	mov	r1, r9
 8006e84:	f001 ff26 	bl	8008cd4 <__ulp>
 8006e88:	4602      	mov	r2, r0
 8006e8a:	460b      	mov	r3, r1
 8006e8c:	4630      	mov	r0, r6
 8006e8e:	4639      	mov	r1, r7
 8006e90:	f7f9 fb22 	bl	80004d8 <__aeabi_dmul>
 8006e94:	4642      	mov	r2, r8
 8006e96:	464b      	mov	r3, r9
 8006e98:	f7f9 f968 	bl	800016c <__adddf3>
 8006e9c:	460b      	mov	r3, r1
 8006e9e:	4951      	ldr	r1, [pc, #324]	; (8006fe4 <_strtod_l+0xafc>)
 8006ea0:	4a54      	ldr	r2, [pc, #336]	; (8006ff4 <_strtod_l+0xb0c>)
 8006ea2:	4019      	ands	r1, r3
 8006ea4:	4291      	cmp	r1, r2
 8006ea6:	4680      	mov	r8, r0
 8006ea8:	d95d      	bls.n	8006f66 <_strtod_l+0xa7e>
 8006eaa:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006eac:	4b4e      	ldr	r3, [pc, #312]	; (8006fe8 <_strtod_l+0xb00>)
 8006eae:	429a      	cmp	r2, r3
 8006eb0:	d103      	bne.n	8006eba <_strtod_l+0x9d2>
 8006eb2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006eb4:	3301      	adds	r3, #1
 8006eb6:	f43f ad56 	beq.w	8006966 <_strtod_l+0x47e>
 8006eba:	f04f 38ff 	mov.w	r8, #4294967295
 8006ebe:	f8df 9128 	ldr.w	r9, [pc, #296]	; 8006fe8 <_strtod_l+0xb00>
 8006ec2:	4650      	mov	r0, sl
 8006ec4:	991a      	ldr	r1, [sp, #104]	; 0x68
 8006ec6:	f001 fbd5 	bl	8008674 <_Bfree>
 8006eca:	4650      	mov	r0, sl
 8006ecc:	9906      	ldr	r1, [sp, #24]
 8006ece:	f001 fbd1 	bl	8008674 <_Bfree>
 8006ed2:	4650      	mov	r0, sl
 8006ed4:	9904      	ldr	r1, [sp, #16]
 8006ed6:	f001 fbcd 	bl	8008674 <_Bfree>
 8006eda:	4659      	mov	r1, fp
 8006edc:	4650      	mov	r0, sl
 8006ede:	f001 fbc9 	bl	8008674 <_Bfree>
 8006ee2:	e627      	b.n	8006b34 <_strtod_l+0x64c>
 8006ee4:	f1b8 0f00 	cmp.w	r8, #0
 8006ee8:	d119      	bne.n	8006f1e <_strtod_l+0xa36>
 8006eea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006eec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006ef0:	b9e3      	cbnz	r3, 8006f2c <_strtod_l+0xa44>
 8006ef2:	2200      	movs	r2, #0
 8006ef4:	4630      	mov	r0, r6
 8006ef6:	4639      	mov	r1, r7
 8006ef8:	4b3c      	ldr	r3, [pc, #240]	; (8006fec <_strtod_l+0xb04>)
 8006efa:	f7f9 fd5f 	bl	80009bc <__aeabi_dcmplt>
 8006efe:	b9c8      	cbnz	r0, 8006f34 <_strtod_l+0xa4c>
 8006f00:	2200      	movs	r2, #0
 8006f02:	4630      	mov	r0, r6
 8006f04:	4639      	mov	r1, r7
 8006f06:	4b3c      	ldr	r3, [pc, #240]	; (8006ff8 <_strtod_l+0xb10>)
 8006f08:	f7f9 fae6 	bl	80004d8 <__aeabi_dmul>
 8006f0c:	4604      	mov	r4, r0
 8006f0e:	460d      	mov	r5, r1
 8006f10:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8006f14:	9416      	str	r4, [sp, #88]	; 0x58
 8006f16:	9317      	str	r3, [sp, #92]	; 0x5c
 8006f18:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 8006f1c:	e7a2      	b.n	8006e64 <_strtod_l+0x97c>
 8006f1e:	f1b8 0f01 	cmp.w	r8, #1
 8006f22:	d103      	bne.n	8006f2c <_strtod_l+0xa44>
 8006f24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	f43f ad92 	beq.w	8006a50 <_strtod_l+0x568>
 8006f2c:	2600      	movs	r6, #0
 8006f2e:	2400      	movs	r4, #0
 8006f30:	4f32      	ldr	r7, [pc, #200]	; (8006ffc <_strtod_l+0xb14>)
 8006f32:	e796      	b.n	8006e62 <_strtod_l+0x97a>
 8006f34:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8006f36:	4d30      	ldr	r5, [pc, #192]	; (8006ff8 <_strtod_l+0xb10>)
 8006f38:	e7ea      	b.n	8006f10 <_strtod_l+0xa28>
 8006f3a:	4b2f      	ldr	r3, [pc, #188]	; (8006ff8 <_strtod_l+0xb10>)
 8006f3c:	2200      	movs	r2, #0
 8006f3e:	4630      	mov	r0, r6
 8006f40:	4639      	mov	r1, r7
 8006f42:	f7f9 fac9 	bl	80004d8 <__aeabi_dmul>
 8006f46:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006f48:	4604      	mov	r4, r0
 8006f4a:	460d      	mov	r5, r1
 8006f4c:	b933      	cbnz	r3, 8006f5c <_strtod_l+0xa74>
 8006f4e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006f52:	9010      	str	r0, [sp, #64]	; 0x40
 8006f54:	9311      	str	r3, [sp, #68]	; 0x44
 8006f56:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8006f5a:	e783      	b.n	8006e64 <_strtod_l+0x97c>
 8006f5c:	4602      	mov	r2, r0
 8006f5e:	460b      	mov	r3, r1
 8006f60:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8006f64:	e7f7      	b.n	8006f56 <_strtod_l+0xa6e>
 8006f66:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8006f6a:	9b05      	ldr	r3, [sp, #20]
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d1a8      	bne.n	8006ec2 <_strtod_l+0x9da>
 8006f70:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006f74:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006f76:	0d1b      	lsrs	r3, r3, #20
 8006f78:	051b      	lsls	r3, r3, #20
 8006f7a:	429a      	cmp	r2, r3
 8006f7c:	d1a1      	bne.n	8006ec2 <_strtod_l+0x9da>
 8006f7e:	4620      	mov	r0, r4
 8006f80:	4629      	mov	r1, r5
 8006f82:	f7fa f84f 	bl	8001024 <__aeabi_d2lz>
 8006f86:	f7f9 fa79 	bl	800047c <__aeabi_l2d>
 8006f8a:	4602      	mov	r2, r0
 8006f8c:	460b      	mov	r3, r1
 8006f8e:	4620      	mov	r0, r4
 8006f90:	4629      	mov	r1, r5
 8006f92:	f7f9 f8e9 	bl	8000168 <__aeabi_dsub>
 8006f96:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006f98:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006f9c:	ea43 0308 	orr.w	r3, r3, r8
 8006fa0:	4313      	orrs	r3, r2
 8006fa2:	4604      	mov	r4, r0
 8006fa4:	460d      	mov	r5, r1
 8006fa6:	d066      	beq.n	8007076 <_strtod_l+0xb8e>
 8006fa8:	a309      	add	r3, pc, #36	; (adr r3, 8006fd0 <_strtod_l+0xae8>)
 8006faa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fae:	f7f9 fd05 	bl	80009bc <__aeabi_dcmplt>
 8006fb2:	2800      	cmp	r0, #0
 8006fb4:	f47f ace2 	bne.w	800697c <_strtod_l+0x494>
 8006fb8:	a307      	add	r3, pc, #28	; (adr r3, 8006fd8 <_strtod_l+0xaf0>)
 8006fba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fbe:	4620      	mov	r0, r4
 8006fc0:	4629      	mov	r1, r5
 8006fc2:	f7f9 fd19 	bl	80009f8 <__aeabi_dcmpgt>
 8006fc6:	2800      	cmp	r0, #0
 8006fc8:	f43f af7b 	beq.w	8006ec2 <_strtod_l+0x9da>
 8006fcc:	e4d6      	b.n	800697c <_strtod_l+0x494>
 8006fce:	bf00      	nop
 8006fd0:	94a03595 	.word	0x94a03595
 8006fd4:	3fdfffff 	.word	0x3fdfffff
 8006fd8:	35afe535 	.word	0x35afe535
 8006fdc:	3fe00000 	.word	0x3fe00000
 8006fe0:	000fffff 	.word	0x000fffff
 8006fe4:	7ff00000 	.word	0x7ff00000
 8006fe8:	7fefffff 	.word	0x7fefffff
 8006fec:	3ff00000 	.word	0x3ff00000
 8006ff0:	7fe00000 	.word	0x7fe00000
 8006ff4:	7c9fffff 	.word	0x7c9fffff
 8006ff8:	3fe00000 	.word	0x3fe00000
 8006ffc:	bff00000 	.word	0xbff00000
 8007000:	9b05      	ldr	r3, [sp, #20]
 8007002:	b313      	cbz	r3, 800704a <_strtod_l+0xb62>
 8007004:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007006:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800700a:	d81e      	bhi.n	800704a <_strtod_l+0xb62>
 800700c:	a326      	add	r3, pc, #152	; (adr r3, 80070a8 <_strtod_l+0xbc0>)
 800700e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007012:	4620      	mov	r0, r4
 8007014:	4629      	mov	r1, r5
 8007016:	f7f9 fcdb 	bl	80009d0 <__aeabi_dcmple>
 800701a:	b190      	cbz	r0, 8007042 <_strtod_l+0xb5a>
 800701c:	4629      	mov	r1, r5
 800701e:	4620      	mov	r0, r4
 8007020:	f7f9 fd32 	bl	8000a88 <__aeabi_d2uiz>
 8007024:	2801      	cmp	r0, #1
 8007026:	bf38      	it	cc
 8007028:	2001      	movcc	r0, #1
 800702a:	f7f9 f9db 	bl	80003e4 <__aeabi_ui2d>
 800702e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007030:	4604      	mov	r4, r0
 8007032:	460d      	mov	r5, r1
 8007034:	b9d3      	cbnz	r3, 800706c <_strtod_l+0xb84>
 8007036:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800703a:	9012      	str	r0, [sp, #72]	; 0x48
 800703c:	9313      	str	r3, [sp, #76]	; 0x4c
 800703e:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8007042:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007044:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8007048:	1a9f      	subs	r7, r3, r2
 800704a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800704e:	f001 fe41 	bl	8008cd4 <__ulp>
 8007052:	4602      	mov	r2, r0
 8007054:	460b      	mov	r3, r1
 8007056:	4630      	mov	r0, r6
 8007058:	4639      	mov	r1, r7
 800705a:	f7f9 fa3d 	bl	80004d8 <__aeabi_dmul>
 800705e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8007062:	f7f9 f883 	bl	800016c <__adddf3>
 8007066:	4680      	mov	r8, r0
 8007068:	4689      	mov	r9, r1
 800706a:	e77e      	b.n	8006f6a <_strtod_l+0xa82>
 800706c:	4602      	mov	r2, r0
 800706e:	460b      	mov	r3, r1
 8007070:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8007074:	e7e3      	b.n	800703e <_strtod_l+0xb56>
 8007076:	a30e      	add	r3, pc, #56	; (adr r3, 80070b0 <_strtod_l+0xbc8>)
 8007078:	e9d3 2300 	ldrd	r2, r3, [r3]
 800707c:	f7f9 fc9e 	bl	80009bc <__aeabi_dcmplt>
 8007080:	e7a1      	b.n	8006fc6 <_strtod_l+0xade>
 8007082:	2300      	movs	r3, #0
 8007084:	930a      	str	r3, [sp, #40]	; 0x28
 8007086:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007088:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800708a:	6013      	str	r3, [r2, #0]
 800708c:	f7ff ba71 	b.w	8006572 <_strtod_l+0x8a>
 8007090:	2a65      	cmp	r2, #101	; 0x65
 8007092:	f43f ab63 	beq.w	800675c <_strtod_l+0x274>
 8007096:	2a45      	cmp	r2, #69	; 0x45
 8007098:	f43f ab60 	beq.w	800675c <_strtod_l+0x274>
 800709c:	2301      	movs	r3, #1
 800709e:	f7ff bb95 	b.w	80067cc <_strtod_l+0x2e4>
 80070a2:	bf00      	nop
 80070a4:	f3af 8000 	nop.w
 80070a8:	ffc00000 	.word	0xffc00000
 80070ac:	41dfffff 	.word	0x41dfffff
 80070b0:	94a03595 	.word	0x94a03595
 80070b4:	3fcfffff 	.word	0x3fcfffff

080070b8 <_strtod_r>:
 80070b8:	4b01      	ldr	r3, [pc, #4]	; (80070c0 <_strtod_r+0x8>)
 80070ba:	f7ff ba15 	b.w	80064e8 <_strtod_l>
 80070be:	bf00      	nop
 80070c0:	200000a4 	.word	0x200000a4

080070c4 <_strtol_l.constprop.0>:
 80070c4:	2b01      	cmp	r3, #1
 80070c6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80070ca:	4680      	mov	r8, r0
 80070cc:	d001      	beq.n	80070d2 <_strtol_l.constprop.0+0xe>
 80070ce:	2b24      	cmp	r3, #36	; 0x24
 80070d0:	d906      	bls.n	80070e0 <_strtol_l.constprop.0+0x1c>
 80070d2:	f7fe fb23 	bl	800571c <__errno>
 80070d6:	2316      	movs	r3, #22
 80070d8:	6003      	str	r3, [r0, #0]
 80070da:	2000      	movs	r0, #0
 80070dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80070e0:	460d      	mov	r5, r1
 80070e2:	4f35      	ldr	r7, [pc, #212]	; (80071b8 <_strtol_l.constprop.0+0xf4>)
 80070e4:	4628      	mov	r0, r5
 80070e6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80070ea:	5de6      	ldrb	r6, [r4, r7]
 80070ec:	f016 0608 	ands.w	r6, r6, #8
 80070f0:	d1f8      	bne.n	80070e4 <_strtol_l.constprop.0+0x20>
 80070f2:	2c2d      	cmp	r4, #45	; 0x2d
 80070f4:	d12f      	bne.n	8007156 <_strtol_l.constprop.0+0x92>
 80070f6:	2601      	movs	r6, #1
 80070f8:	782c      	ldrb	r4, [r5, #0]
 80070fa:	1c85      	adds	r5, r0, #2
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d057      	beq.n	80071b0 <_strtol_l.constprop.0+0xec>
 8007100:	2b10      	cmp	r3, #16
 8007102:	d109      	bne.n	8007118 <_strtol_l.constprop.0+0x54>
 8007104:	2c30      	cmp	r4, #48	; 0x30
 8007106:	d107      	bne.n	8007118 <_strtol_l.constprop.0+0x54>
 8007108:	7828      	ldrb	r0, [r5, #0]
 800710a:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800710e:	2858      	cmp	r0, #88	; 0x58
 8007110:	d149      	bne.n	80071a6 <_strtol_l.constprop.0+0xe2>
 8007112:	2310      	movs	r3, #16
 8007114:	786c      	ldrb	r4, [r5, #1]
 8007116:	3502      	adds	r5, #2
 8007118:	2700      	movs	r7, #0
 800711a:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 800711e:	f10e 3eff 	add.w	lr, lr, #4294967295
 8007122:	fbbe f9f3 	udiv	r9, lr, r3
 8007126:	4638      	mov	r0, r7
 8007128:	fb03 ea19 	mls	sl, r3, r9, lr
 800712c:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8007130:	f1bc 0f09 	cmp.w	ip, #9
 8007134:	d814      	bhi.n	8007160 <_strtol_l.constprop.0+0x9c>
 8007136:	4664      	mov	r4, ip
 8007138:	42a3      	cmp	r3, r4
 800713a:	dd22      	ble.n	8007182 <_strtol_l.constprop.0+0xbe>
 800713c:	2f00      	cmp	r7, #0
 800713e:	db1d      	blt.n	800717c <_strtol_l.constprop.0+0xb8>
 8007140:	4581      	cmp	r9, r0
 8007142:	d31b      	bcc.n	800717c <_strtol_l.constprop.0+0xb8>
 8007144:	d101      	bne.n	800714a <_strtol_l.constprop.0+0x86>
 8007146:	45a2      	cmp	sl, r4
 8007148:	db18      	blt.n	800717c <_strtol_l.constprop.0+0xb8>
 800714a:	2701      	movs	r7, #1
 800714c:	fb00 4003 	mla	r0, r0, r3, r4
 8007150:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007154:	e7ea      	b.n	800712c <_strtol_l.constprop.0+0x68>
 8007156:	2c2b      	cmp	r4, #43	; 0x2b
 8007158:	bf04      	itt	eq
 800715a:	782c      	ldrbeq	r4, [r5, #0]
 800715c:	1c85      	addeq	r5, r0, #2
 800715e:	e7cd      	b.n	80070fc <_strtol_l.constprop.0+0x38>
 8007160:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8007164:	f1bc 0f19 	cmp.w	ip, #25
 8007168:	d801      	bhi.n	800716e <_strtol_l.constprop.0+0xaa>
 800716a:	3c37      	subs	r4, #55	; 0x37
 800716c:	e7e4      	b.n	8007138 <_strtol_l.constprop.0+0x74>
 800716e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8007172:	f1bc 0f19 	cmp.w	ip, #25
 8007176:	d804      	bhi.n	8007182 <_strtol_l.constprop.0+0xbe>
 8007178:	3c57      	subs	r4, #87	; 0x57
 800717a:	e7dd      	b.n	8007138 <_strtol_l.constprop.0+0x74>
 800717c:	f04f 37ff 	mov.w	r7, #4294967295
 8007180:	e7e6      	b.n	8007150 <_strtol_l.constprop.0+0x8c>
 8007182:	2f00      	cmp	r7, #0
 8007184:	da07      	bge.n	8007196 <_strtol_l.constprop.0+0xd2>
 8007186:	2322      	movs	r3, #34	; 0x22
 8007188:	4670      	mov	r0, lr
 800718a:	f8c8 3000 	str.w	r3, [r8]
 800718e:	2a00      	cmp	r2, #0
 8007190:	d0a4      	beq.n	80070dc <_strtol_l.constprop.0+0x18>
 8007192:	1e69      	subs	r1, r5, #1
 8007194:	e005      	b.n	80071a2 <_strtol_l.constprop.0+0xde>
 8007196:	b106      	cbz	r6, 800719a <_strtol_l.constprop.0+0xd6>
 8007198:	4240      	negs	r0, r0
 800719a:	2a00      	cmp	r2, #0
 800719c:	d09e      	beq.n	80070dc <_strtol_l.constprop.0+0x18>
 800719e:	2f00      	cmp	r7, #0
 80071a0:	d1f7      	bne.n	8007192 <_strtol_l.constprop.0+0xce>
 80071a2:	6011      	str	r1, [r2, #0]
 80071a4:	e79a      	b.n	80070dc <_strtol_l.constprop.0+0x18>
 80071a6:	2430      	movs	r4, #48	; 0x30
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d1b5      	bne.n	8007118 <_strtol_l.constprop.0+0x54>
 80071ac:	2308      	movs	r3, #8
 80071ae:	e7b3      	b.n	8007118 <_strtol_l.constprop.0+0x54>
 80071b0:	2c30      	cmp	r4, #48	; 0x30
 80071b2:	d0a9      	beq.n	8007108 <_strtol_l.constprop.0+0x44>
 80071b4:	230a      	movs	r3, #10
 80071b6:	e7af      	b.n	8007118 <_strtol_l.constprop.0+0x54>
 80071b8:	0800a0f9 	.word	0x0800a0f9

080071bc <_strtol_r>:
 80071bc:	f7ff bf82 	b.w	80070c4 <_strtol_l.constprop.0>

080071c0 <quorem>:
 80071c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071c4:	6903      	ldr	r3, [r0, #16]
 80071c6:	690c      	ldr	r4, [r1, #16]
 80071c8:	4607      	mov	r7, r0
 80071ca:	42a3      	cmp	r3, r4
 80071cc:	f2c0 8082 	blt.w	80072d4 <quorem+0x114>
 80071d0:	3c01      	subs	r4, #1
 80071d2:	f100 0514 	add.w	r5, r0, #20
 80071d6:	f101 0814 	add.w	r8, r1, #20
 80071da:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80071de:	9301      	str	r3, [sp, #4]
 80071e0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80071e4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80071e8:	3301      	adds	r3, #1
 80071ea:	429a      	cmp	r2, r3
 80071ec:	fbb2 f6f3 	udiv	r6, r2, r3
 80071f0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80071f4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80071f8:	d331      	bcc.n	800725e <quorem+0x9e>
 80071fa:	f04f 0e00 	mov.w	lr, #0
 80071fe:	4640      	mov	r0, r8
 8007200:	46ac      	mov	ip, r5
 8007202:	46f2      	mov	sl, lr
 8007204:	f850 2b04 	ldr.w	r2, [r0], #4
 8007208:	b293      	uxth	r3, r2
 800720a:	fb06 e303 	mla	r3, r6, r3, lr
 800720e:	0c12      	lsrs	r2, r2, #16
 8007210:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007214:	b29b      	uxth	r3, r3
 8007216:	fb06 e202 	mla	r2, r6, r2, lr
 800721a:	ebaa 0303 	sub.w	r3, sl, r3
 800721e:	f8dc a000 	ldr.w	sl, [ip]
 8007222:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007226:	fa1f fa8a 	uxth.w	sl, sl
 800722a:	4453      	add	r3, sl
 800722c:	f8dc a000 	ldr.w	sl, [ip]
 8007230:	b292      	uxth	r2, r2
 8007232:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007236:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800723a:	b29b      	uxth	r3, r3
 800723c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007240:	4581      	cmp	r9, r0
 8007242:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007246:	f84c 3b04 	str.w	r3, [ip], #4
 800724a:	d2db      	bcs.n	8007204 <quorem+0x44>
 800724c:	f855 300b 	ldr.w	r3, [r5, fp]
 8007250:	b92b      	cbnz	r3, 800725e <quorem+0x9e>
 8007252:	9b01      	ldr	r3, [sp, #4]
 8007254:	3b04      	subs	r3, #4
 8007256:	429d      	cmp	r5, r3
 8007258:	461a      	mov	r2, r3
 800725a:	d32f      	bcc.n	80072bc <quorem+0xfc>
 800725c:	613c      	str	r4, [r7, #16]
 800725e:	4638      	mov	r0, r7
 8007260:	f001 fc90 	bl	8008b84 <__mcmp>
 8007264:	2800      	cmp	r0, #0
 8007266:	db25      	blt.n	80072b4 <quorem+0xf4>
 8007268:	4628      	mov	r0, r5
 800726a:	f04f 0c00 	mov.w	ip, #0
 800726e:	3601      	adds	r6, #1
 8007270:	f858 1b04 	ldr.w	r1, [r8], #4
 8007274:	f8d0 e000 	ldr.w	lr, [r0]
 8007278:	b28b      	uxth	r3, r1
 800727a:	ebac 0303 	sub.w	r3, ip, r3
 800727e:	fa1f f28e 	uxth.w	r2, lr
 8007282:	4413      	add	r3, r2
 8007284:	0c0a      	lsrs	r2, r1, #16
 8007286:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800728a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800728e:	b29b      	uxth	r3, r3
 8007290:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007294:	45c1      	cmp	r9, r8
 8007296:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800729a:	f840 3b04 	str.w	r3, [r0], #4
 800729e:	d2e7      	bcs.n	8007270 <quorem+0xb0>
 80072a0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80072a4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80072a8:	b922      	cbnz	r2, 80072b4 <quorem+0xf4>
 80072aa:	3b04      	subs	r3, #4
 80072ac:	429d      	cmp	r5, r3
 80072ae:	461a      	mov	r2, r3
 80072b0:	d30a      	bcc.n	80072c8 <quorem+0x108>
 80072b2:	613c      	str	r4, [r7, #16]
 80072b4:	4630      	mov	r0, r6
 80072b6:	b003      	add	sp, #12
 80072b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072bc:	6812      	ldr	r2, [r2, #0]
 80072be:	3b04      	subs	r3, #4
 80072c0:	2a00      	cmp	r2, #0
 80072c2:	d1cb      	bne.n	800725c <quorem+0x9c>
 80072c4:	3c01      	subs	r4, #1
 80072c6:	e7c6      	b.n	8007256 <quorem+0x96>
 80072c8:	6812      	ldr	r2, [r2, #0]
 80072ca:	3b04      	subs	r3, #4
 80072cc:	2a00      	cmp	r2, #0
 80072ce:	d1f0      	bne.n	80072b2 <quorem+0xf2>
 80072d0:	3c01      	subs	r4, #1
 80072d2:	e7eb      	b.n	80072ac <quorem+0xec>
 80072d4:	2000      	movs	r0, #0
 80072d6:	e7ee      	b.n	80072b6 <quorem+0xf6>

080072d8 <_dtoa_r>:
 80072d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072dc:	4616      	mov	r6, r2
 80072de:	461f      	mov	r7, r3
 80072e0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80072e2:	b099      	sub	sp, #100	; 0x64
 80072e4:	4605      	mov	r5, r0
 80072e6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80072ea:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 80072ee:	b974      	cbnz	r4, 800730e <_dtoa_r+0x36>
 80072f0:	2010      	movs	r0, #16
 80072f2:	f001 f949 	bl	8008588 <malloc>
 80072f6:	4602      	mov	r2, r0
 80072f8:	6268      	str	r0, [r5, #36]	; 0x24
 80072fa:	b920      	cbnz	r0, 8007306 <_dtoa_r+0x2e>
 80072fc:	21ea      	movs	r1, #234	; 0xea
 80072fe:	4ba8      	ldr	r3, [pc, #672]	; (80075a0 <_dtoa_r+0x2c8>)
 8007300:	48a8      	ldr	r0, [pc, #672]	; (80075a4 <_dtoa_r+0x2cc>)
 8007302:	f002 f8b3 	bl	800946c <__assert_func>
 8007306:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800730a:	6004      	str	r4, [r0, #0]
 800730c:	60c4      	str	r4, [r0, #12]
 800730e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007310:	6819      	ldr	r1, [r3, #0]
 8007312:	b151      	cbz	r1, 800732a <_dtoa_r+0x52>
 8007314:	685a      	ldr	r2, [r3, #4]
 8007316:	2301      	movs	r3, #1
 8007318:	4093      	lsls	r3, r2
 800731a:	604a      	str	r2, [r1, #4]
 800731c:	608b      	str	r3, [r1, #8]
 800731e:	4628      	mov	r0, r5
 8007320:	f001 f9a8 	bl	8008674 <_Bfree>
 8007324:	2200      	movs	r2, #0
 8007326:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007328:	601a      	str	r2, [r3, #0]
 800732a:	1e3b      	subs	r3, r7, #0
 800732c:	bfaf      	iteee	ge
 800732e:	2300      	movge	r3, #0
 8007330:	2201      	movlt	r2, #1
 8007332:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007336:	9305      	strlt	r3, [sp, #20]
 8007338:	bfa8      	it	ge
 800733a:	f8c8 3000 	strge.w	r3, [r8]
 800733e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8007342:	4b99      	ldr	r3, [pc, #612]	; (80075a8 <_dtoa_r+0x2d0>)
 8007344:	bfb8      	it	lt
 8007346:	f8c8 2000 	strlt.w	r2, [r8]
 800734a:	ea33 0309 	bics.w	r3, r3, r9
 800734e:	d119      	bne.n	8007384 <_dtoa_r+0xac>
 8007350:	f242 730f 	movw	r3, #9999	; 0x270f
 8007354:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007356:	6013      	str	r3, [r2, #0]
 8007358:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800735c:	4333      	orrs	r3, r6
 800735e:	f000 857f 	beq.w	8007e60 <_dtoa_r+0xb88>
 8007362:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007364:	b953      	cbnz	r3, 800737c <_dtoa_r+0xa4>
 8007366:	4b91      	ldr	r3, [pc, #580]	; (80075ac <_dtoa_r+0x2d4>)
 8007368:	e022      	b.n	80073b0 <_dtoa_r+0xd8>
 800736a:	4b91      	ldr	r3, [pc, #580]	; (80075b0 <_dtoa_r+0x2d8>)
 800736c:	9303      	str	r3, [sp, #12]
 800736e:	3308      	adds	r3, #8
 8007370:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8007372:	6013      	str	r3, [r2, #0]
 8007374:	9803      	ldr	r0, [sp, #12]
 8007376:	b019      	add	sp, #100	; 0x64
 8007378:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800737c:	4b8b      	ldr	r3, [pc, #556]	; (80075ac <_dtoa_r+0x2d4>)
 800737e:	9303      	str	r3, [sp, #12]
 8007380:	3303      	adds	r3, #3
 8007382:	e7f5      	b.n	8007370 <_dtoa_r+0x98>
 8007384:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8007388:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800738c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007390:	2200      	movs	r2, #0
 8007392:	2300      	movs	r3, #0
 8007394:	f7f9 fb08 	bl	80009a8 <__aeabi_dcmpeq>
 8007398:	4680      	mov	r8, r0
 800739a:	b158      	cbz	r0, 80073b4 <_dtoa_r+0xdc>
 800739c:	2301      	movs	r3, #1
 800739e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80073a0:	6013      	str	r3, [r2, #0]
 80073a2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	f000 8558 	beq.w	8007e5a <_dtoa_r+0xb82>
 80073aa:	4882      	ldr	r0, [pc, #520]	; (80075b4 <_dtoa_r+0x2dc>)
 80073ac:	6018      	str	r0, [r3, #0]
 80073ae:	1e43      	subs	r3, r0, #1
 80073b0:	9303      	str	r3, [sp, #12]
 80073b2:	e7df      	b.n	8007374 <_dtoa_r+0x9c>
 80073b4:	ab16      	add	r3, sp, #88	; 0x58
 80073b6:	9301      	str	r3, [sp, #4]
 80073b8:	ab17      	add	r3, sp, #92	; 0x5c
 80073ba:	9300      	str	r3, [sp, #0]
 80073bc:	4628      	mov	r0, r5
 80073be:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80073c2:	f001 fd01 	bl	8008dc8 <__d2b>
 80073c6:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80073ca:	4683      	mov	fp, r0
 80073cc:	2c00      	cmp	r4, #0
 80073ce:	d07f      	beq.n	80074d0 <_dtoa_r+0x1f8>
 80073d0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80073d4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80073d6:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80073da:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80073de:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 80073e2:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80073e6:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 80073ea:	2200      	movs	r2, #0
 80073ec:	4b72      	ldr	r3, [pc, #456]	; (80075b8 <_dtoa_r+0x2e0>)
 80073ee:	f7f8 febb 	bl	8000168 <__aeabi_dsub>
 80073f2:	a365      	add	r3, pc, #404	; (adr r3, 8007588 <_dtoa_r+0x2b0>)
 80073f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073f8:	f7f9 f86e 	bl	80004d8 <__aeabi_dmul>
 80073fc:	a364      	add	r3, pc, #400	; (adr r3, 8007590 <_dtoa_r+0x2b8>)
 80073fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007402:	f7f8 feb3 	bl	800016c <__adddf3>
 8007406:	4606      	mov	r6, r0
 8007408:	4620      	mov	r0, r4
 800740a:	460f      	mov	r7, r1
 800740c:	f7f8 fffa 	bl	8000404 <__aeabi_i2d>
 8007410:	a361      	add	r3, pc, #388	; (adr r3, 8007598 <_dtoa_r+0x2c0>)
 8007412:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007416:	f7f9 f85f 	bl	80004d8 <__aeabi_dmul>
 800741a:	4602      	mov	r2, r0
 800741c:	460b      	mov	r3, r1
 800741e:	4630      	mov	r0, r6
 8007420:	4639      	mov	r1, r7
 8007422:	f7f8 fea3 	bl	800016c <__adddf3>
 8007426:	4606      	mov	r6, r0
 8007428:	460f      	mov	r7, r1
 800742a:	f7f9 fb05 	bl	8000a38 <__aeabi_d2iz>
 800742e:	2200      	movs	r2, #0
 8007430:	4682      	mov	sl, r0
 8007432:	2300      	movs	r3, #0
 8007434:	4630      	mov	r0, r6
 8007436:	4639      	mov	r1, r7
 8007438:	f7f9 fac0 	bl	80009bc <__aeabi_dcmplt>
 800743c:	b148      	cbz	r0, 8007452 <_dtoa_r+0x17a>
 800743e:	4650      	mov	r0, sl
 8007440:	f7f8 ffe0 	bl	8000404 <__aeabi_i2d>
 8007444:	4632      	mov	r2, r6
 8007446:	463b      	mov	r3, r7
 8007448:	f7f9 faae 	bl	80009a8 <__aeabi_dcmpeq>
 800744c:	b908      	cbnz	r0, 8007452 <_dtoa_r+0x17a>
 800744e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007452:	f1ba 0f16 	cmp.w	sl, #22
 8007456:	d858      	bhi.n	800750a <_dtoa_r+0x232>
 8007458:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800745c:	4b57      	ldr	r3, [pc, #348]	; (80075bc <_dtoa_r+0x2e4>)
 800745e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007462:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007466:	f7f9 faa9 	bl	80009bc <__aeabi_dcmplt>
 800746a:	2800      	cmp	r0, #0
 800746c:	d04f      	beq.n	800750e <_dtoa_r+0x236>
 800746e:	2300      	movs	r3, #0
 8007470:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007474:	930f      	str	r3, [sp, #60]	; 0x3c
 8007476:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007478:	1b1c      	subs	r4, r3, r4
 800747a:	1e63      	subs	r3, r4, #1
 800747c:	9309      	str	r3, [sp, #36]	; 0x24
 800747e:	bf49      	itett	mi
 8007480:	f1c4 0301 	rsbmi	r3, r4, #1
 8007484:	2300      	movpl	r3, #0
 8007486:	9306      	strmi	r3, [sp, #24]
 8007488:	2300      	movmi	r3, #0
 800748a:	bf54      	ite	pl
 800748c:	9306      	strpl	r3, [sp, #24]
 800748e:	9309      	strmi	r3, [sp, #36]	; 0x24
 8007490:	f1ba 0f00 	cmp.w	sl, #0
 8007494:	db3d      	blt.n	8007512 <_dtoa_r+0x23a>
 8007496:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007498:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800749c:	4453      	add	r3, sl
 800749e:	9309      	str	r3, [sp, #36]	; 0x24
 80074a0:	2300      	movs	r3, #0
 80074a2:	930a      	str	r3, [sp, #40]	; 0x28
 80074a4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80074a6:	2b09      	cmp	r3, #9
 80074a8:	f200 808c 	bhi.w	80075c4 <_dtoa_r+0x2ec>
 80074ac:	2b05      	cmp	r3, #5
 80074ae:	bfc4      	itt	gt
 80074b0:	3b04      	subgt	r3, #4
 80074b2:	9322      	strgt	r3, [sp, #136]	; 0x88
 80074b4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80074b6:	bfc8      	it	gt
 80074b8:	2400      	movgt	r4, #0
 80074ba:	f1a3 0302 	sub.w	r3, r3, #2
 80074be:	bfd8      	it	le
 80074c0:	2401      	movle	r4, #1
 80074c2:	2b03      	cmp	r3, #3
 80074c4:	f200 808a 	bhi.w	80075dc <_dtoa_r+0x304>
 80074c8:	e8df f003 	tbb	[pc, r3]
 80074cc:	5b4d4f2d 	.word	0x5b4d4f2d
 80074d0:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 80074d4:	441c      	add	r4, r3
 80074d6:	f204 4332 	addw	r3, r4, #1074	; 0x432
 80074da:	2b20      	cmp	r3, #32
 80074dc:	bfc3      	ittte	gt
 80074de:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80074e2:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 80074e6:	fa09 f303 	lslgt.w	r3, r9, r3
 80074ea:	f1c3 0320 	rsble	r3, r3, #32
 80074ee:	bfc6      	itte	gt
 80074f0:	fa26 f000 	lsrgt.w	r0, r6, r0
 80074f4:	4318      	orrgt	r0, r3
 80074f6:	fa06 f003 	lslle.w	r0, r6, r3
 80074fa:	f7f8 ff73 	bl	80003e4 <__aeabi_ui2d>
 80074fe:	2301      	movs	r3, #1
 8007500:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8007504:	3c01      	subs	r4, #1
 8007506:	9313      	str	r3, [sp, #76]	; 0x4c
 8007508:	e76f      	b.n	80073ea <_dtoa_r+0x112>
 800750a:	2301      	movs	r3, #1
 800750c:	e7b2      	b.n	8007474 <_dtoa_r+0x19c>
 800750e:	900f      	str	r0, [sp, #60]	; 0x3c
 8007510:	e7b1      	b.n	8007476 <_dtoa_r+0x19e>
 8007512:	9b06      	ldr	r3, [sp, #24]
 8007514:	eba3 030a 	sub.w	r3, r3, sl
 8007518:	9306      	str	r3, [sp, #24]
 800751a:	f1ca 0300 	rsb	r3, sl, #0
 800751e:	930a      	str	r3, [sp, #40]	; 0x28
 8007520:	2300      	movs	r3, #0
 8007522:	930e      	str	r3, [sp, #56]	; 0x38
 8007524:	e7be      	b.n	80074a4 <_dtoa_r+0x1cc>
 8007526:	2300      	movs	r3, #0
 8007528:	930b      	str	r3, [sp, #44]	; 0x2c
 800752a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800752c:	2b00      	cmp	r3, #0
 800752e:	dc58      	bgt.n	80075e2 <_dtoa_r+0x30a>
 8007530:	f04f 0901 	mov.w	r9, #1
 8007534:	464b      	mov	r3, r9
 8007536:	f8cd 9020 	str.w	r9, [sp, #32]
 800753a:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 800753e:	2200      	movs	r2, #0
 8007540:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8007542:	6042      	str	r2, [r0, #4]
 8007544:	2204      	movs	r2, #4
 8007546:	f102 0614 	add.w	r6, r2, #20
 800754a:	429e      	cmp	r6, r3
 800754c:	6841      	ldr	r1, [r0, #4]
 800754e:	d94e      	bls.n	80075ee <_dtoa_r+0x316>
 8007550:	4628      	mov	r0, r5
 8007552:	f001 f84f 	bl	80085f4 <_Balloc>
 8007556:	9003      	str	r0, [sp, #12]
 8007558:	2800      	cmp	r0, #0
 800755a:	d14c      	bne.n	80075f6 <_dtoa_r+0x31e>
 800755c:	4602      	mov	r2, r0
 800755e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007562:	4b17      	ldr	r3, [pc, #92]	; (80075c0 <_dtoa_r+0x2e8>)
 8007564:	e6cc      	b.n	8007300 <_dtoa_r+0x28>
 8007566:	2301      	movs	r3, #1
 8007568:	e7de      	b.n	8007528 <_dtoa_r+0x250>
 800756a:	2300      	movs	r3, #0
 800756c:	930b      	str	r3, [sp, #44]	; 0x2c
 800756e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007570:	eb0a 0903 	add.w	r9, sl, r3
 8007574:	f109 0301 	add.w	r3, r9, #1
 8007578:	2b01      	cmp	r3, #1
 800757a:	9308      	str	r3, [sp, #32]
 800757c:	bfb8      	it	lt
 800757e:	2301      	movlt	r3, #1
 8007580:	e7dd      	b.n	800753e <_dtoa_r+0x266>
 8007582:	2301      	movs	r3, #1
 8007584:	e7f2      	b.n	800756c <_dtoa_r+0x294>
 8007586:	bf00      	nop
 8007588:	636f4361 	.word	0x636f4361
 800758c:	3fd287a7 	.word	0x3fd287a7
 8007590:	8b60c8b3 	.word	0x8b60c8b3
 8007594:	3fc68a28 	.word	0x3fc68a28
 8007598:	509f79fb 	.word	0x509f79fb
 800759c:	3fd34413 	.word	0x3fd34413
 80075a0:	0800a206 	.word	0x0800a206
 80075a4:	0800a21d 	.word	0x0800a21d
 80075a8:	7ff00000 	.word	0x7ff00000
 80075ac:	0800a202 	.word	0x0800a202
 80075b0:	0800a1f9 	.word	0x0800a1f9
 80075b4:	0800a07d 	.word	0x0800a07d
 80075b8:	3ff80000 	.word	0x3ff80000
 80075bc:	0800a388 	.word	0x0800a388
 80075c0:	0800a278 	.word	0x0800a278
 80075c4:	2401      	movs	r4, #1
 80075c6:	2300      	movs	r3, #0
 80075c8:	940b      	str	r4, [sp, #44]	; 0x2c
 80075ca:	9322      	str	r3, [sp, #136]	; 0x88
 80075cc:	f04f 39ff 	mov.w	r9, #4294967295
 80075d0:	2200      	movs	r2, #0
 80075d2:	2312      	movs	r3, #18
 80075d4:	f8cd 9020 	str.w	r9, [sp, #32]
 80075d8:	9223      	str	r2, [sp, #140]	; 0x8c
 80075da:	e7b0      	b.n	800753e <_dtoa_r+0x266>
 80075dc:	2301      	movs	r3, #1
 80075de:	930b      	str	r3, [sp, #44]	; 0x2c
 80075e0:	e7f4      	b.n	80075cc <_dtoa_r+0x2f4>
 80075e2:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 80075e6:	464b      	mov	r3, r9
 80075e8:	f8cd 9020 	str.w	r9, [sp, #32]
 80075ec:	e7a7      	b.n	800753e <_dtoa_r+0x266>
 80075ee:	3101      	adds	r1, #1
 80075f0:	6041      	str	r1, [r0, #4]
 80075f2:	0052      	lsls	r2, r2, #1
 80075f4:	e7a7      	b.n	8007546 <_dtoa_r+0x26e>
 80075f6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80075f8:	9a03      	ldr	r2, [sp, #12]
 80075fa:	601a      	str	r2, [r3, #0]
 80075fc:	9b08      	ldr	r3, [sp, #32]
 80075fe:	2b0e      	cmp	r3, #14
 8007600:	f200 80a8 	bhi.w	8007754 <_dtoa_r+0x47c>
 8007604:	2c00      	cmp	r4, #0
 8007606:	f000 80a5 	beq.w	8007754 <_dtoa_r+0x47c>
 800760a:	f1ba 0f00 	cmp.w	sl, #0
 800760e:	dd34      	ble.n	800767a <_dtoa_r+0x3a2>
 8007610:	4a9a      	ldr	r2, [pc, #616]	; (800787c <_dtoa_r+0x5a4>)
 8007612:	f00a 030f 	and.w	r3, sl, #15
 8007616:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800761a:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800761e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007622:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8007626:	ea4f 142a 	mov.w	r4, sl, asr #4
 800762a:	d016      	beq.n	800765a <_dtoa_r+0x382>
 800762c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007630:	4b93      	ldr	r3, [pc, #588]	; (8007880 <_dtoa_r+0x5a8>)
 8007632:	2703      	movs	r7, #3
 8007634:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007638:	f7f9 f878 	bl	800072c <__aeabi_ddiv>
 800763c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007640:	f004 040f 	and.w	r4, r4, #15
 8007644:	4e8e      	ldr	r6, [pc, #568]	; (8007880 <_dtoa_r+0x5a8>)
 8007646:	b954      	cbnz	r4, 800765e <_dtoa_r+0x386>
 8007648:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800764c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007650:	f7f9 f86c 	bl	800072c <__aeabi_ddiv>
 8007654:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007658:	e029      	b.n	80076ae <_dtoa_r+0x3d6>
 800765a:	2702      	movs	r7, #2
 800765c:	e7f2      	b.n	8007644 <_dtoa_r+0x36c>
 800765e:	07e1      	lsls	r1, r4, #31
 8007660:	d508      	bpl.n	8007674 <_dtoa_r+0x39c>
 8007662:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007666:	e9d6 2300 	ldrd	r2, r3, [r6]
 800766a:	f7f8 ff35 	bl	80004d8 <__aeabi_dmul>
 800766e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007672:	3701      	adds	r7, #1
 8007674:	1064      	asrs	r4, r4, #1
 8007676:	3608      	adds	r6, #8
 8007678:	e7e5      	b.n	8007646 <_dtoa_r+0x36e>
 800767a:	f000 80a5 	beq.w	80077c8 <_dtoa_r+0x4f0>
 800767e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007682:	f1ca 0400 	rsb	r4, sl, #0
 8007686:	4b7d      	ldr	r3, [pc, #500]	; (800787c <_dtoa_r+0x5a4>)
 8007688:	f004 020f 	and.w	r2, r4, #15
 800768c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007690:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007694:	f7f8 ff20 	bl	80004d8 <__aeabi_dmul>
 8007698:	2702      	movs	r7, #2
 800769a:	2300      	movs	r3, #0
 800769c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80076a0:	4e77      	ldr	r6, [pc, #476]	; (8007880 <_dtoa_r+0x5a8>)
 80076a2:	1124      	asrs	r4, r4, #4
 80076a4:	2c00      	cmp	r4, #0
 80076a6:	f040 8084 	bne.w	80077b2 <_dtoa_r+0x4da>
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d1d2      	bne.n	8007654 <_dtoa_r+0x37c>
 80076ae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	f000 808b 	beq.w	80077cc <_dtoa_r+0x4f4>
 80076b6:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80076ba:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80076be:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80076c2:	2200      	movs	r2, #0
 80076c4:	4b6f      	ldr	r3, [pc, #444]	; (8007884 <_dtoa_r+0x5ac>)
 80076c6:	f7f9 f979 	bl	80009bc <__aeabi_dcmplt>
 80076ca:	2800      	cmp	r0, #0
 80076cc:	d07e      	beq.n	80077cc <_dtoa_r+0x4f4>
 80076ce:	9b08      	ldr	r3, [sp, #32]
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d07b      	beq.n	80077cc <_dtoa_r+0x4f4>
 80076d4:	f1b9 0f00 	cmp.w	r9, #0
 80076d8:	dd38      	ble.n	800774c <_dtoa_r+0x474>
 80076da:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80076de:	2200      	movs	r2, #0
 80076e0:	4b69      	ldr	r3, [pc, #420]	; (8007888 <_dtoa_r+0x5b0>)
 80076e2:	f7f8 fef9 	bl	80004d8 <__aeabi_dmul>
 80076e6:	464c      	mov	r4, r9
 80076e8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80076ec:	f10a 38ff 	add.w	r8, sl, #4294967295
 80076f0:	3701      	adds	r7, #1
 80076f2:	4638      	mov	r0, r7
 80076f4:	f7f8 fe86 	bl	8000404 <__aeabi_i2d>
 80076f8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80076fc:	f7f8 feec 	bl	80004d8 <__aeabi_dmul>
 8007700:	2200      	movs	r2, #0
 8007702:	4b62      	ldr	r3, [pc, #392]	; (800788c <_dtoa_r+0x5b4>)
 8007704:	f7f8 fd32 	bl	800016c <__adddf3>
 8007708:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800770c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007710:	9611      	str	r6, [sp, #68]	; 0x44
 8007712:	2c00      	cmp	r4, #0
 8007714:	d15d      	bne.n	80077d2 <_dtoa_r+0x4fa>
 8007716:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800771a:	2200      	movs	r2, #0
 800771c:	4b5c      	ldr	r3, [pc, #368]	; (8007890 <_dtoa_r+0x5b8>)
 800771e:	f7f8 fd23 	bl	8000168 <__aeabi_dsub>
 8007722:	4602      	mov	r2, r0
 8007724:	460b      	mov	r3, r1
 8007726:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800772a:	4633      	mov	r3, r6
 800772c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800772e:	f7f9 f963 	bl	80009f8 <__aeabi_dcmpgt>
 8007732:	2800      	cmp	r0, #0
 8007734:	f040 829c 	bne.w	8007c70 <_dtoa_r+0x998>
 8007738:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800773c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800773e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8007742:	f7f9 f93b 	bl	80009bc <__aeabi_dcmplt>
 8007746:	2800      	cmp	r0, #0
 8007748:	f040 8290 	bne.w	8007c6c <_dtoa_r+0x994>
 800774c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8007750:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007754:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007756:	2b00      	cmp	r3, #0
 8007758:	f2c0 8152 	blt.w	8007a00 <_dtoa_r+0x728>
 800775c:	f1ba 0f0e 	cmp.w	sl, #14
 8007760:	f300 814e 	bgt.w	8007a00 <_dtoa_r+0x728>
 8007764:	4b45      	ldr	r3, [pc, #276]	; (800787c <_dtoa_r+0x5a4>)
 8007766:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800776a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800776e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8007772:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007774:	2b00      	cmp	r3, #0
 8007776:	f280 80db 	bge.w	8007930 <_dtoa_r+0x658>
 800777a:	9b08      	ldr	r3, [sp, #32]
 800777c:	2b00      	cmp	r3, #0
 800777e:	f300 80d7 	bgt.w	8007930 <_dtoa_r+0x658>
 8007782:	f040 8272 	bne.w	8007c6a <_dtoa_r+0x992>
 8007786:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800778a:	2200      	movs	r2, #0
 800778c:	4b40      	ldr	r3, [pc, #256]	; (8007890 <_dtoa_r+0x5b8>)
 800778e:	f7f8 fea3 	bl	80004d8 <__aeabi_dmul>
 8007792:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007796:	f7f9 f925 	bl	80009e4 <__aeabi_dcmpge>
 800779a:	9c08      	ldr	r4, [sp, #32]
 800779c:	4626      	mov	r6, r4
 800779e:	2800      	cmp	r0, #0
 80077a0:	f040 8248 	bne.w	8007c34 <_dtoa_r+0x95c>
 80077a4:	2331      	movs	r3, #49	; 0x31
 80077a6:	9f03      	ldr	r7, [sp, #12]
 80077a8:	f10a 0a01 	add.w	sl, sl, #1
 80077ac:	f807 3b01 	strb.w	r3, [r7], #1
 80077b0:	e244      	b.n	8007c3c <_dtoa_r+0x964>
 80077b2:	07e2      	lsls	r2, r4, #31
 80077b4:	d505      	bpl.n	80077c2 <_dtoa_r+0x4ea>
 80077b6:	e9d6 2300 	ldrd	r2, r3, [r6]
 80077ba:	f7f8 fe8d 	bl	80004d8 <__aeabi_dmul>
 80077be:	2301      	movs	r3, #1
 80077c0:	3701      	adds	r7, #1
 80077c2:	1064      	asrs	r4, r4, #1
 80077c4:	3608      	adds	r6, #8
 80077c6:	e76d      	b.n	80076a4 <_dtoa_r+0x3cc>
 80077c8:	2702      	movs	r7, #2
 80077ca:	e770      	b.n	80076ae <_dtoa_r+0x3d6>
 80077cc:	46d0      	mov	r8, sl
 80077ce:	9c08      	ldr	r4, [sp, #32]
 80077d0:	e78f      	b.n	80076f2 <_dtoa_r+0x41a>
 80077d2:	9903      	ldr	r1, [sp, #12]
 80077d4:	4b29      	ldr	r3, [pc, #164]	; (800787c <_dtoa_r+0x5a4>)
 80077d6:	4421      	add	r1, r4
 80077d8:	9112      	str	r1, [sp, #72]	; 0x48
 80077da:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80077dc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80077e0:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80077e4:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80077e8:	2900      	cmp	r1, #0
 80077ea:	d055      	beq.n	8007898 <_dtoa_r+0x5c0>
 80077ec:	2000      	movs	r0, #0
 80077ee:	4929      	ldr	r1, [pc, #164]	; (8007894 <_dtoa_r+0x5bc>)
 80077f0:	f7f8 ff9c 	bl	800072c <__aeabi_ddiv>
 80077f4:	463b      	mov	r3, r7
 80077f6:	4632      	mov	r2, r6
 80077f8:	f7f8 fcb6 	bl	8000168 <__aeabi_dsub>
 80077fc:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007800:	9f03      	ldr	r7, [sp, #12]
 8007802:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007806:	f7f9 f917 	bl	8000a38 <__aeabi_d2iz>
 800780a:	4604      	mov	r4, r0
 800780c:	f7f8 fdfa 	bl	8000404 <__aeabi_i2d>
 8007810:	4602      	mov	r2, r0
 8007812:	460b      	mov	r3, r1
 8007814:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007818:	f7f8 fca6 	bl	8000168 <__aeabi_dsub>
 800781c:	4602      	mov	r2, r0
 800781e:	460b      	mov	r3, r1
 8007820:	3430      	adds	r4, #48	; 0x30
 8007822:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007826:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800782a:	f807 4b01 	strb.w	r4, [r7], #1
 800782e:	f7f9 f8c5 	bl	80009bc <__aeabi_dcmplt>
 8007832:	2800      	cmp	r0, #0
 8007834:	d174      	bne.n	8007920 <_dtoa_r+0x648>
 8007836:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800783a:	2000      	movs	r0, #0
 800783c:	4911      	ldr	r1, [pc, #68]	; (8007884 <_dtoa_r+0x5ac>)
 800783e:	f7f8 fc93 	bl	8000168 <__aeabi_dsub>
 8007842:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007846:	f7f9 f8b9 	bl	80009bc <__aeabi_dcmplt>
 800784a:	2800      	cmp	r0, #0
 800784c:	f040 80b7 	bne.w	80079be <_dtoa_r+0x6e6>
 8007850:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007852:	429f      	cmp	r7, r3
 8007854:	f43f af7a 	beq.w	800774c <_dtoa_r+0x474>
 8007858:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800785c:	2200      	movs	r2, #0
 800785e:	4b0a      	ldr	r3, [pc, #40]	; (8007888 <_dtoa_r+0x5b0>)
 8007860:	f7f8 fe3a 	bl	80004d8 <__aeabi_dmul>
 8007864:	2200      	movs	r2, #0
 8007866:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800786a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800786e:	4b06      	ldr	r3, [pc, #24]	; (8007888 <_dtoa_r+0x5b0>)
 8007870:	f7f8 fe32 	bl	80004d8 <__aeabi_dmul>
 8007874:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007878:	e7c3      	b.n	8007802 <_dtoa_r+0x52a>
 800787a:	bf00      	nop
 800787c:	0800a388 	.word	0x0800a388
 8007880:	0800a360 	.word	0x0800a360
 8007884:	3ff00000 	.word	0x3ff00000
 8007888:	40240000 	.word	0x40240000
 800788c:	401c0000 	.word	0x401c0000
 8007890:	40140000 	.word	0x40140000
 8007894:	3fe00000 	.word	0x3fe00000
 8007898:	4630      	mov	r0, r6
 800789a:	4639      	mov	r1, r7
 800789c:	f7f8 fe1c 	bl	80004d8 <__aeabi_dmul>
 80078a0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80078a2:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80078a6:	9c03      	ldr	r4, [sp, #12]
 80078a8:	9314      	str	r3, [sp, #80]	; 0x50
 80078aa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80078ae:	f7f9 f8c3 	bl	8000a38 <__aeabi_d2iz>
 80078b2:	9015      	str	r0, [sp, #84]	; 0x54
 80078b4:	f7f8 fda6 	bl	8000404 <__aeabi_i2d>
 80078b8:	4602      	mov	r2, r0
 80078ba:	460b      	mov	r3, r1
 80078bc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80078c0:	f7f8 fc52 	bl	8000168 <__aeabi_dsub>
 80078c4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80078c6:	4606      	mov	r6, r0
 80078c8:	3330      	adds	r3, #48	; 0x30
 80078ca:	f804 3b01 	strb.w	r3, [r4], #1
 80078ce:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80078d0:	460f      	mov	r7, r1
 80078d2:	429c      	cmp	r4, r3
 80078d4:	f04f 0200 	mov.w	r2, #0
 80078d8:	d124      	bne.n	8007924 <_dtoa_r+0x64c>
 80078da:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80078de:	4bb0      	ldr	r3, [pc, #704]	; (8007ba0 <_dtoa_r+0x8c8>)
 80078e0:	f7f8 fc44 	bl	800016c <__adddf3>
 80078e4:	4602      	mov	r2, r0
 80078e6:	460b      	mov	r3, r1
 80078e8:	4630      	mov	r0, r6
 80078ea:	4639      	mov	r1, r7
 80078ec:	f7f9 f884 	bl	80009f8 <__aeabi_dcmpgt>
 80078f0:	2800      	cmp	r0, #0
 80078f2:	d163      	bne.n	80079bc <_dtoa_r+0x6e4>
 80078f4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80078f8:	2000      	movs	r0, #0
 80078fa:	49a9      	ldr	r1, [pc, #676]	; (8007ba0 <_dtoa_r+0x8c8>)
 80078fc:	f7f8 fc34 	bl	8000168 <__aeabi_dsub>
 8007900:	4602      	mov	r2, r0
 8007902:	460b      	mov	r3, r1
 8007904:	4630      	mov	r0, r6
 8007906:	4639      	mov	r1, r7
 8007908:	f7f9 f858 	bl	80009bc <__aeabi_dcmplt>
 800790c:	2800      	cmp	r0, #0
 800790e:	f43f af1d 	beq.w	800774c <_dtoa_r+0x474>
 8007912:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8007914:	1e7b      	subs	r3, r7, #1
 8007916:	9314      	str	r3, [sp, #80]	; 0x50
 8007918:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800791c:	2b30      	cmp	r3, #48	; 0x30
 800791e:	d0f8      	beq.n	8007912 <_dtoa_r+0x63a>
 8007920:	46c2      	mov	sl, r8
 8007922:	e03b      	b.n	800799c <_dtoa_r+0x6c4>
 8007924:	4b9f      	ldr	r3, [pc, #636]	; (8007ba4 <_dtoa_r+0x8cc>)
 8007926:	f7f8 fdd7 	bl	80004d8 <__aeabi_dmul>
 800792a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800792e:	e7bc      	b.n	80078aa <_dtoa_r+0x5d2>
 8007930:	9f03      	ldr	r7, [sp, #12]
 8007932:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8007936:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800793a:	4640      	mov	r0, r8
 800793c:	4649      	mov	r1, r9
 800793e:	f7f8 fef5 	bl	800072c <__aeabi_ddiv>
 8007942:	f7f9 f879 	bl	8000a38 <__aeabi_d2iz>
 8007946:	4604      	mov	r4, r0
 8007948:	f7f8 fd5c 	bl	8000404 <__aeabi_i2d>
 800794c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007950:	f7f8 fdc2 	bl	80004d8 <__aeabi_dmul>
 8007954:	4602      	mov	r2, r0
 8007956:	460b      	mov	r3, r1
 8007958:	4640      	mov	r0, r8
 800795a:	4649      	mov	r1, r9
 800795c:	f7f8 fc04 	bl	8000168 <__aeabi_dsub>
 8007960:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8007964:	f807 6b01 	strb.w	r6, [r7], #1
 8007968:	9e03      	ldr	r6, [sp, #12]
 800796a:	f8dd c020 	ldr.w	ip, [sp, #32]
 800796e:	1bbe      	subs	r6, r7, r6
 8007970:	45b4      	cmp	ip, r6
 8007972:	4602      	mov	r2, r0
 8007974:	460b      	mov	r3, r1
 8007976:	d136      	bne.n	80079e6 <_dtoa_r+0x70e>
 8007978:	f7f8 fbf8 	bl	800016c <__adddf3>
 800797c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007980:	4680      	mov	r8, r0
 8007982:	4689      	mov	r9, r1
 8007984:	f7f9 f838 	bl	80009f8 <__aeabi_dcmpgt>
 8007988:	bb58      	cbnz	r0, 80079e2 <_dtoa_r+0x70a>
 800798a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800798e:	4640      	mov	r0, r8
 8007990:	4649      	mov	r1, r9
 8007992:	f7f9 f809 	bl	80009a8 <__aeabi_dcmpeq>
 8007996:	b108      	cbz	r0, 800799c <_dtoa_r+0x6c4>
 8007998:	07e1      	lsls	r1, r4, #31
 800799a:	d422      	bmi.n	80079e2 <_dtoa_r+0x70a>
 800799c:	4628      	mov	r0, r5
 800799e:	4659      	mov	r1, fp
 80079a0:	f000 fe68 	bl	8008674 <_Bfree>
 80079a4:	2300      	movs	r3, #0
 80079a6:	703b      	strb	r3, [r7, #0]
 80079a8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80079aa:	f10a 0001 	add.w	r0, sl, #1
 80079ae:	6018      	str	r0, [r3, #0]
 80079b0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	f43f acde 	beq.w	8007374 <_dtoa_r+0x9c>
 80079b8:	601f      	str	r7, [r3, #0]
 80079ba:	e4db      	b.n	8007374 <_dtoa_r+0x9c>
 80079bc:	4627      	mov	r7, r4
 80079be:	463b      	mov	r3, r7
 80079c0:	461f      	mov	r7, r3
 80079c2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80079c6:	2a39      	cmp	r2, #57	; 0x39
 80079c8:	d107      	bne.n	80079da <_dtoa_r+0x702>
 80079ca:	9a03      	ldr	r2, [sp, #12]
 80079cc:	429a      	cmp	r2, r3
 80079ce:	d1f7      	bne.n	80079c0 <_dtoa_r+0x6e8>
 80079d0:	2230      	movs	r2, #48	; 0x30
 80079d2:	9903      	ldr	r1, [sp, #12]
 80079d4:	f108 0801 	add.w	r8, r8, #1
 80079d8:	700a      	strb	r2, [r1, #0]
 80079da:	781a      	ldrb	r2, [r3, #0]
 80079dc:	3201      	adds	r2, #1
 80079de:	701a      	strb	r2, [r3, #0]
 80079e0:	e79e      	b.n	8007920 <_dtoa_r+0x648>
 80079e2:	46d0      	mov	r8, sl
 80079e4:	e7eb      	b.n	80079be <_dtoa_r+0x6e6>
 80079e6:	2200      	movs	r2, #0
 80079e8:	4b6e      	ldr	r3, [pc, #440]	; (8007ba4 <_dtoa_r+0x8cc>)
 80079ea:	f7f8 fd75 	bl	80004d8 <__aeabi_dmul>
 80079ee:	2200      	movs	r2, #0
 80079f0:	2300      	movs	r3, #0
 80079f2:	4680      	mov	r8, r0
 80079f4:	4689      	mov	r9, r1
 80079f6:	f7f8 ffd7 	bl	80009a8 <__aeabi_dcmpeq>
 80079fa:	2800      	cmp	r0, #0
 80079fc:	d09b      	beq.n	8007936 <_dtoa_r+0x65e>
 80079fe:	e7cd      	b.n	800799c <_dtoa_r+0x6c4>
 8007a00:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007a02:	2a00      	cmp	r2, #0
 8007a04:	f000 80d0 	beq.w	8007ba8 <_dtoa_r+0x8d0>
 8007a08:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8007a0a:	2a01      	cmp	r2, #1
 8007a0c:	f300 80ae 	bgt.w	8007b6c <_dtoa_r+0x894>
 8007a10:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007a12:	2a00      	cmp	r2, #0
 8007a14:	f000 80a6 	beq.w	8007b64 <_dtoa_r+0x88c>
 8007a18:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007a1c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007a1e:	9f06      	ldr	r7, [sp, #24]
 8007a20:	9a06      	ldr	r2, [sp, #24]
 8007a22:	2101      	movs	r1, #1
 8007a24:	441a      	add	r2, r3
 8007a26:	9206      	str	r2, [sp, #24]
 8007a28:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007a2a:	4628      	mov	r0, r5
 8007a2c:	441a      	add	r2, r3
 8007a2e:	9209      	str	r2, [sp, #36]	; 0x24
 8007a30:	f000 ff20 	bl	8008874 <__i2b>
 8007a34:	4606      	mov	r6, r0
 8007a36:	2f00      	cmp	r7, #0
 8007a38:	dd0c      	ble.n	8007a54 <_dtoa_r+0x77c>
 8007a3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	dd09      	ble.n	8007a54 <_dtoa_r+0x77c>
 8007a40:	42bb      	cmp	r3, r7
 8007a42:	bfa8      	it	ge
 8007a44:	463b      	movge	r3, r7
 8007a46:	9a06      	ldr	r2, [sp, #24]
 8007a48:	1aff      	subs	r7, r7, r3
 8007a4a:	1ad2      	subs	r2, r2, r3
 8007a4c:	9206      	str	r2, [sp, #24]
 8007a4e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007a50:	1ad3      	subs	r3, r2, r3
 8007a52:	9309      	str	r3, [sp, #36]	; 0x24
 8007a54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a56:	b1f3      	cbz	r3, 8007a96 <_dtoa_r+0x7be>
 8007a58:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	f000 80a8 	beq.w	8007bb0 <_dtoa_r+0x8d8>
 8007a60:	2c00      	cmp	r4, #0
 8007a62:	dd10      	ble.n	8007a86 <_dtoa_r+0x7ae>
 8007a64:	4631      	mov	r1, r6
 8007a66:	4622      	mov	r2, r4
 8007a68:	4628      	mov	r0, r5
 8007a6a:	f000 ffc1 	bl	80089f0 <__pow5mult>
 8007a6e:	465a      	mov	r2, fp
 8007a70:	4601      	mov	r1, r0
 8007a72:	4606      	mov	r6, r0
 8007a74:	4628      	mov	r0, r5
 8007a76:	f000 ff13 	bl	80088a0 <__multiply>
 8007a7a:	4680      	mov	r8, r0
 8007a7c:	4659      	mov	r1, fp
 8007a7e:	4628      	mov	r0, r5
 8007a80:	f000 fdf8 	bl	8008674 <_Bfree>
 8007a84:	46c3      	mov	fp, r8
 8007a86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a88:	1b1a      	subs	r2, r3, r4
 8007a8a:	d004      	beq.n	8007a96 <_dtoa_r+0x7be>
 8007a8c:	4659      	mov	r1, fp
 8007a8e:	4628      	mov	r0, r5
 8007a90:	f000 ffae 	bl	80089f0 <__pow5mult>
 8007a94:	4683      	mov	fp, r0
 8007a96:	2101      	movs	r1, #1
 8007a98:	4628      	mov	r0, r5
 8007a9a:	f000 feeb 	bl	8008874 <__i2b>
 8007a9e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007aa0:	4604      	mov	r4, r0
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	f340 8086 	ble.w	8007bb4 <_dtoa_r+0x8dc>
 8007aa8:	461a      	mov	r2, r3
 8007aaa:	4601      	mov	r1, r0
 8007aac:	4628      	mov	r0, r5
 8007aae:	f000 ff9f 	bl	80089f0 <__pow5mult>
 8007ab2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007ab4:	4604      	mov	r4, r0
 8007ab6:	2b01      	cmp	r3, #1
 8007ab8:	dd7f      	ble.n	8007bba <_dtoa_r+0x8e2>
 8007aba:	f04f 0800 	mov.w	r8, #0
 8007abe:	6923      	ldr	r3, [r4, #16]
 8007ac0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007ac4:	6918      	ldr	r0, [r3, #16]
 8007ac6:	f000 fe87 	bl	80087d8 <__hi0bits>
 8007aca:	f1c0 0020 	rsb	r0, r0, #32
 8007ace:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ad0:	4418      	add	r0, r3
 8007ad2:	f010 001f 	ands.w	r0, r0, #31
 8007ad6:	f000 8092 	beq.w	8007bfe <_dtoa_r+0x926>
 8007ada:	f1c0 0320 	rsb	r3, r0, #32
 8007ade:	2b04      	cmp	r3, #4
 8007ae0:	f340 808a 	ble.w	8007bf8 <_dtoa_r+0x920>
 8007ae4:	f1c0 001c 	rsb	r0, r0, #28
 8007ae8:	9b06      	ldr	r3, [sp, #24]
 8007aea:	4407      	add	r7, r0
 8007aec:	4403      	add	r3, r0
 8007aee:	9306      	str	r3, [sp, #24]
 8007af0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007af2:	4403      	add	r3, r0
 8007af4:	9309      	str	r3, [sp, #36]	; 0x24
 8007af6:	9b06      	ldr	r3, [sp, #24]
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	dd05      	ble.n	8007b08 <_dtoa_r+0x830>
 8007afc:	4659      	mov	r1, fp
 8007afe:	461a      	mov	r2, r3
 8007b00:	4628      	mov	r0, r5
 8007b02:	f000 ffcf 	bl	8008aa4 <__lshift>
 8007b06:	4683      	mov	fp, r0
 8007b08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	dd05      	ble.n	8007b1a <_dtoa_r+0x842>
 8007b0e:	4621      	mov	r1, r4
 8007b10:	461a      	mov	r2, r3
 8007b12:	4628      	mov	r0, r5
 8007b14:	f000 ffc6 	bl	8008aa4 <__lshift>
 8007b18:	4604      	mov	r4, r0
 8007b1a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d070      	beq.n	8007c02 <_dtoa_r+0x92a>
 8007b20:	4621      	mov	r1, r4
 8007b22:	4658      	mov	r0, fp
 8007b24:	f001 f82e 	bl	8008b84 <__mcmp>
 8007b28:	2800      	cmp	r0, #0
 8007b2a:	da6a      	bge.n	8007c02 <_dtoa_r+0x92a>
 8007b2c:	2300      	movs	r3, #0
 8007b2e:	4659      	mov	r1, fp
 8007b30:	220a      	movs	r2, #10
 8007b32:	4628      	mov	r0, r5
 8007b34:	f000 fdc0 	bl	80086b8 <__multadd>
 8007b38:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007b3a:	4683      	mov	fp, r0
 8007b3c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	f000 8194 	beq.w	8007e6e <_dtoa_r+0xb96>
 8007b46:	4631      	mov	r1, r6
 8007b48:	2300      	movs	r3, #0
 8007b4a:	220a      	movs	r2, #10
 8007b4c:	4628      	mov	r0, r5
 8007b4e:	f000 fdb3 	bl	80086b8 <__multadd>
 8007b52:	f1b9 0f00 	cmp.w	r9, #0
 8007b56:	4606      	mov	r6, r0
 8007b58:	f300 8093 	bgt.w	8007c82 <_dtoa_r+0x9aa>
 8007b5c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007b5e:	2b02      	cmp	r3, #2
 8007b60:	dc57      	bgt.n	8007c12 <_dtoa_r+0x93a>
 8007b62:	e08e      	b.n	8007c82 <_dtoa_r+0x9aa>
 8007b64:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007b66:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007b6a:	e757      	b.n	8007a1c <_dtoa_r+0x744>
 8007b6c:	9b08      	ldr	r3, [sp, #32]
 8007b6e:	1e5c      	subs	r4, r3, #1
 8007b70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b72:	42a3      	cmp	r3, r4
 8007b74:	bfb7      	itett	lt
 8007b76:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8007b78:	1b1c      	subge	r4, r3, r4
 8007b7a:	1ae2      	sublt	r2, r4, r3
 8007b7c:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8007b7e:	bfbe      	ittt	lt
 8007b80:	940a      	strlt	r4, [sp, #40]	; 0x28
 8007b82:	189b      	addlt	r3, r3, r2
 8007b84:	930e      	strlt	r3, [sp, #56]	; 0x38
 8007b86:	9b08      	ldr	r3, [sp, #32]
 8007b88:	bfb8      	it	lt
 8007b8a:	2400      	movlt	r4, #0
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	bfbb      	ittet	lt
 8007b90:	9b06      	ldrlt	r3, [sp, #24]
 8007b92:	9a08      	ldrlt	r2, [sp, #32]
 8007b94:	9f06      	ldrge	r7, [sp, #24]
 8007b96:	1a9f      	sublt	r7, r3, r2
 8007b98:	bfac      	ite	ge
 8007b9a:	9b08      	ldrge	r3, [sp, #32]
 8007b9c:	2300      	movlt	r3, #0
 8007b9e:	e73f      	b.n	8007a20 <_dtoa_r+0x748>
 8007ba0:	3fe00000 	.word	0x3fe00000
 8007ba4:	40240000 	.word	0x40240000
 8007ba8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007baa:	9f06      	ldr	r7, [sp, #24]
 8007bac:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8007bae:	e742      	b.n	8007a36 <_dtoa_r+0x75e>
 8007bb0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007bb2:	e76b      	b.n	8007a8c <_dtoa_r+0x7b4>
 8007bb4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007bb6:	2b01      	cmp	r3, #1
 8007bb8:	dc19      	bgt.n	8007bee <_dtoa_r+0x916>
 8007bba:	9b04      	ldr	r3, [sp, #16]
 8007bbc:	b9bb      	cbnz	r3, 8007bee <_dtoa_r+0x916>
 8007bbe:	9b05      	ldr	r3, [sp, #20]
 8007bc0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007bc4:	b99b      	cbnz	r3, 8007bee <_dtoa_r+0x916>
 8007bc6:	9b05      	ldr	r3, [sp, #20]
 8007bc8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007bcc:	0d1b      	lsrs	r3, r3, #20
 8007bce:	051b      	lsls	r3, r3, #20
 8007bd0:	b183      	cbz	r3, 8007bf4 <_dtoa_r+0x91c>
 8007bd2:	f04f 0801 	mov.w	r8, #1
 8007bd6:	9b06      	ldr	r3, [sp, #24]
 8007bd8:	3301      	adds	r3, #1
 8007bda:	9306      	str	r3, [sp, #24]
 8007bdc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007bde:	3301      	adds	r3, #1
 8007be0:	9309      	str	r3, [sp, #36]	; 0x24
 8007be2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	f47f af6a 	bne.w	8007abe <_dtoa_r+0x7e6>
 8007bea:	2001      	movs	r0, #1
 8007bec:	e76f      	b.n	8007ace <_dtoa_r+0x7f6>
 8007bee:	f04f 0800 	mov.w	r8, #0
 8007bf2:	e7f6      	b.n	8007be2 <_dtoa_r+0x90a>
 8007bf4:	4698      	mov	r8, r3
 8007bf6:	e7f4      	b.n	8007be2 <_dtoa_r+0x90a>
 8007bf8:	f43f af7d 	beq.w	8007af6 <_dtoa_r+0x81e>
 8007bfc:	4618      	mov	r0, r3
 8007bfe:	301c      	adds	r0, #28
 8007c00:	e772      	b.n	8007ae8 <_dtoa_r+0x810>
 8007c02:	9b08      	ldr	r3, [sp, #32]
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	dc36      	bgt.n	8007c76 <_dtoa_r+0x99e>
 8007c08:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007c0a:	2b02      	cmp	r3, #2
 8007c0c:	dd33      	ble.n	8007c76 <_dtoa_r+0x99e>
 8007c0e:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007c12:	f1b9 0f00 	cmp.w	r9, #0
 8007c16:	d10d      	bne.n	8007c34 <_dtoa_r+0x95c>
 8007c18:	4621      	mov	r1, r4
 8007c1a:	464b      	mov	r3, r9
 8007c1c:	2205      	movs	r2, #5
 8007c1e:	4628      	mov	r0, r5
 8007c20:	f000 fd4a 	bl	80086b8 <__multadd>
 8007c24:	4601      	mov	r1, r0
 8007c26:	4604      	mov	r4, r0
 8007c28:	4658      	mov	r0, fp
 8007c2a:	f000 ffab 	bl	8008b84 <__mcmp>
 8007c2e:	2800      	cmp	r0, #0
 8007c30:	f73f adb8 	bgt.w	80077a4 <_dtoa_r+0x4cc>
 8007c34:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007c36:	9f03      	ldr	r7, [sp, #12]
 8007c38:	ea6f 0a03 	mvn.w	sl, r3
 8007c3c:	f04f 0800 	mov.w	r8, #0
 8007c40:	4621      	mov	r1, r4
 8007c42:	4628      	mov	r0, r5
 8007c44:	f000 fd16 	bl	8008674 <_Bfree>
 8007c48:	2e00      	cmp	r6, #0
 8007c4a:	f43f aea7 	beq.w	800799c <_dtoa_r+0x6c4>
 8007c4e:	f1b8 0f00 	cmp.w	r8, #0
 8007c52:	d005      	beq.n	8007c60 <_dtoa_r+0x988>
 8007c54:	45b0      	cmp	r8, r6
 8007c56:	d003      	beq.n	8007c60 <_dtoa_r+0x988>
 8007c58:	4641      	mov	r1, r8
 8007c5a:	4628      	mov	r0, r5
 8007c5c:	f000 fd0a 	bl	8008674 <_Bfree>
 8007c60:	4631      	mov	r1, r6
 8007c62:	4628      	mov	r0, r5
 8007c64:	f000 fd06 	bl	8008674 <_Bfree>
 8007c68:	e698      	b.n	800799c <_dtoa_r+0x6c4>
 8007c6a:	2400      	movs	r4, #0
 8007c6c:	4626      	mov	r6, r4
 8007c6e:	e7e1      	b.n	8007c34 <_dtoa_r+0x95c>
 8007c70:	46c2      	mov	sl, r8
 8007c72:	4626      	mov	r6, r4
 8007c74:	e596      	b.n	80077a4 <_dtoa_r+0x4cc>
 8007c76:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007c78:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	f000 80fd 	beq.w	8007e7c <_dtoa_r+0xba4>
 8007c82:	2f00      	cmp	r7, #0
 8007c84:	dd05      	ble.n	8007c92 <_dtoa_r+0x9ba>
 8007c86:	4631      	mov	r1, r6
 8007c88:	463a      	mov	r2, r7
 8007c8a:	4628      	mov	r0, r5
 8007c8c:	f000 ff0a 	bl	8008aa4 <__lshift>
 8007c90:	4606      	mov	r6, r0
 8007c92:	f1b8 0f00 	cmp.w	r8, #0
 8007c96:	d05c      	beq.n	8007d52 <_dtoa_r+0xa7a>
 8007c98:	4628      	mov	r0, r5
 8007c9a:	6871      	ldr	r1, [r6, #4]
 8007c9c:	f000 fcaa 	bl	80085f4 <_Balloc>
 8007ca0:	4607      	mov	r7, r0
 8007ca2:	b928      	cbnz	r0, 8007cb0 <_dtoa_r+0x9d8>
 8007ca4:	4602      	mov	r2, r0
 8007ca6:	f240 21ea 	movw	r1, #746	; 0x2ea
 8007caa:	4b7f      	ldr	r3, [pc, #508]	; (8007ea8 <_dtoa_r+0xbd0>)
 8007cac:	f7ff bb28 	b.w	8007300 <_dtoa_r+0x28>
 8007cb0:	6932      	ldr	r2, [r6, #16]
 8007cb2:	f106 010c 	add.w	r1, r6, #12
 8007cb6:	3202      	adds	r2, #2
 8007cb8:	0092      	lsls	r2, r2, #2
 8007cba:	300c      	adds	r0, #12
 8007cbc:	f000 fc8c 	bl	80085d8 <memcpy>
 8007cc0:	2201      	movs	r2, #1
 8007cc2:	4639      	mov	r1, r7
 8007cc4:	4628      	mov	r0, r5
 8007cc6:	f000 feed 	bl	8008aa4 <__lshift>
 8007cca:	46b0      	mov	r8, r6
 8007ccc:	4606      	mov	r6, r0
 8007cce:	9b03      	ldr	r3, [sp, #12]
 8007cd0:	3301      	adds	r3, #1
 8007cd2:	9308      	str	r3, [sp, #32]
 8007cd4:	9b03      	ldr	r3, [sp, #12]
 8007cd6:	444b      	add	r3, r9
 8007cd8:	930a      	str	r3, [sp, #40]	; 0x28
 8007cda:	9b04      	ldr	r3, [sp, #16]
 8007cdc:	f003 0301 	and.w	r3, r3, #1
 8007ce0:	9309      	str	r3, [sp, #36]	; 0x24
 8007ce2:	9b08      	ldr	r3, [sp, #32]
 8007ce4:	4621      	mov	r1, r4
 8007ce6:	3b01      	subs	r3, #1
 8007ce8:	4658      	mov	r0, fp
 8007cea:	9304      	str	r3, [sp, #16]
 8007cec:	f7ff fa68 	bl	80071c0 <quorem>
 8007cf0:	4603      	mov	r3, r0
 8007cf2:	4641      	mov	r1, r8
 8007cf4:	3330      	adds	r3, #48	; 0x30
 8007cf6:	9006      	str	r0, [sp, #24]
 8007cf8:	4658      	mov	r0, fp
 8007cfa:	930b      	str	r3, [sp, #44]	; 0x2c
 8007cfc:	f000 ff42 	bl	8008b84 <__mcmp>
 8007d00:	4632      	mov	r2, r6
 8007d02:	4681      	mov	r9, r0
 8007d04:	4621      	mov	r1, r4
 8007d06:	4628      	mov	r0, r5
 8007d08:	f000 ff58 	bl	8008bbc <__mdiff>
 8007d0c:	68c2      	ldr	r2, [r0, #12]
 8007d0e:	4607      	mov	r7, r0
 8007d10:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007d12:	bb02      	cbnz	r2, 8007d56 <_dtoa_r+0xa7e>
 8007d14:	4601      	mov	r1, r0
 8007d16:	4658      	mov	r0, fp
 8007d18:	f000 ff34 	bl	8008b84 <__mcmp>
 8007d1c:	4602      	mov	r2, r0
 8007d1e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007d20:	4639      	mov	r1, r7
 8007d22:	4628      	mov	r0, r5
 8007d24:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8007d28:	f000 fca4 	bl	8008674 <_Bfree>
 8007d2c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007d2e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007d30:	9f08      	ldr	r7, [sp, #32]
 8007d32:	ea43 0102 	orr.w	r1, r3, r2
 8007d36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d38:	430b      	orrs	r3, r1
 8007d3a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007d3c:	d10d      	bne.n	8007d5a <_dtoa_r+0xa82>
 8007d3e:	2b39      	cmp	r3, #57	; 0x39
 8007d40:	d029      	beq.n	8007d96 <_dtoa_r+0xabe>
 8007d42:	f1b9 0f00 	cmp.w	r9, #0
 8007d46:	dd01      	ble.n	8007d4c <_dtoa_r+0xa74>
 8007d48:	9b06      	ldr	r3, [sp, #24]
 8007d4a:	3331      	adds	r3, #49	; 0x31
 8007d4c:	9a04      	ldr	r2, [sp, #16]
 8007d4e:	7013      	strb	r3, [r2, #0]
 8007d50:	e776      	b.n	8007c40 <_dtoa_r+0x968>
 8007d52:	4630      	mov	r0, r6
 8007d54:	e7b9      	b.n	8007cca <_dtoa_r+0x9f2>
 8007d56:	2201      	movs	r2, #1
 8007d58:	e7e2      	b.n	8007d20 <_dtoa_r+0xa48>
 8007d5a:	f1b9 0f00 	cmp.w	r9, #0
 8007d5e:	db06      	blt.n	8007d6e <_dtoa_r+0xa96>
 8007d60:	9922      	ldr	r1, [sp, #136]	; 0x88
 8007d62:	ea41 0909 	orr.w	r9, r1, r9
 8007d66:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007d68:	ea59 0101 	orrs.w	r1, r9, r1
 8007d6c:	d120      	bne.n	8007db0 <_dtoa_r+0xad8>
 8007d6e:	2a00      	cmp	r2, #0
 8007d70:	ddec      	ble.n	8007d4c <_dtoa_r+0xa74>
 8007d72:	4659      	mov	r1, fp
 8007d74:	2201      	movs	r2, #1
 8007d76:	4628      	mov	r0, r5
 8007d78:	9308      	str	r3, [sp, #32]
 8007d7a:	f000 fe93 	bl	8008aa4 <__lshift>
 8007d7e:	4621      	mov	r1, r4
 8007d80:	4683      	mov	fp, r0
 8007d82:	f000 feff 	bl	8008b84 <__mcmp>
 8007d86:	2800      	cmp	r0, #0
 8007d88:	9b08      	ldr	r3, [sp, #32]
 8007d8a:	dc02      	bgt.n	8007d92 <_dtoa_r+0xaba>
 8007d8c:	d1de      	bne.n	8007d4c <_dtoa_r+0xa74>
 8007d8e:	07da      	lsls	r2, r3, #31
 8007d90:	d5dc      	bpl.n	8007d4c <_dtoa_r+0xa74>
 8007d92:	2b39      	cmp	r3, #57	; 0x39
 8007d94:	d1d8      	bne.n	8007d48 <_dtoa_r+0xa70>
 8007d96:	2339      	movs	r3, #57	; 0x39
 8007d98:	9a04      	ldr	r2, [sp, #16]
 8007d9a:	7013      	strb	r3, [r2, #0]
 8007d9c:	463b      	mov	r3, r7
 8007d9e:	461f      	mov	r7, r3
 8007da0:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8007da4:	3b01      	subs	r3, #1
 8007da6:	2a39      	cmp	r2, #57	; 0x39
 8007da8:	d050      	beq.n	8007e4c <_dtoa_r+0xb74>
 8007daa:	3201      	adds	r2, #1
 8007dac:	701a      	strb	r2, [r3, #0]
 8007dae:	e747      	b.n	8007c40 <_dtoa_r+0x968>
 8007db0:	2a00      	cmp	r2, #0
 8007db2:	dd03      	ble.n	8007dbc <_dtoa_r+0xae4>
 8007db4:	2b39      	cmp	r3, #57	; 0x39
 8007db6:	d0ee      	beq.n	8007d96 <_dtoa_r+0xabe>
 8007db8:	3301      	adds	r3, #1
 8007dba:	e7c7      	b.n	8007d4c <_dtoa_r+0xa74>
 8007dbc:	9a08      	ldr	r2, [sp, #32]
 8007dbe:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007dc0:	f802 3c01 	strb.w	r3, [r2, #-1]
 8007dc4:	428a      	cmp	r2, r1
 8007dc6:	d02a      	beq.n	8007e1e <_dtoa_r+0xb46>
 8007dc8:	4659      	mov	r1, fp
 8007dca:	2300      	movs	r3, #0
 8007dcc:	220a      	movs	r2, #10
 8007dce:	4628      	mov	r0, r5
 8007dd0:	f000 fc72 	bl	80086b8 <__multadd>
 8007dd4:	45b0      	cmp	r8, r6
 8007dd6:	4683      	mov	fp, r0
 8007dd8:	f04f 0300 	mov.w	r3, #0
 8007ddc:	f04f 020a 	mov.w	r2, #10
 8007de0:	4641      	mov	r1, r8
 8007de2:	4628      	mov	r0, r5
 8007de4:	d107      	bne.n	8007df6 <_dtoa_r+0xb1e>
 8007de6:	f000 fc67 	bl	80086b8 <__multadd>
 8007dea:	4680      	mov	r8, r0
 8007dec:	4606      	mov	r6, r0
 8007dee:	9b08      	ldr	r3, [sp, #32]
 8007df0:	3301      	adds	r3, #1
 8007df2:	9308      	str	r3, [sp, #32]
 8007df4:	e775      	b.n	8007ce2 <_dtoa_r+0xa0a>
 8007df6:	f000 fc5f 	bl	80086b8 <__multadd>
 8007dfa:	4631      	mov	r1, r6
 8007dfc:	4680      	mov	r8, r0
 8007dfe:	2300      	movs	r3, #0
 8007e00:	220a      	movs	r2, #10
 8007e02:	4628      	mov	r0, r5
 8007e04:	f000 fc58 	bl	80086b8 <__multadd>
 8007e08:	4606      	mov	r6, r0
 8007e0a:	e7f0      	b.n	8007dee <_dtoa_r+0xb16>
 8007e0c:	f1b9 0f00 	cmp.w	r9, #0
 8007e10:	bfcc      	ite	gt
 8007e12:	464f      	movgt	r7, r9
 8007e14:	2701      	movle	r7, #1
 8007e16:	f04f 0800 	mov.w	r8, #0
 8007e1a:	9a03      	ldr	r2, [sp, #12]
 8007e1c:	4417      	add	r7, r2
 8007e1e:	4659      	mov	r1, fp
 8007e20:	2201      	movs	r2, #1
 8007e22:	4628      	mov	r0, r5
 8007e24:	9308      	str	r3, [sp, #32]
 8007e26:	f000 fe3d 	bl	8008aa4 <__lshift>
 8007e2a:	4621      	mov	r1, r4
 8007e2c:	4683      	mov	fp, r0
 8007e2e:	f000 fea9 	bl	8008b84 <__mcmp>
 8007e32:	2800      	cmp	r0, #0
 8007e34:	dcb2      	bgt.n	8007d9c <_dtoa_r+0xac4>
 8007e36:	d102      	bne.n	8007e3e <_dtoa_r+0xb66>
 8007e38:	9b08      	ldr	r3, [sp, #32]
 8007e3a:	07db      	lsls	r3, r3, #31
 8007e3c:	d4ae      	bmi.n	8007d9c <_dtoa_r+0xac4>
 8007e3e:	463b      	mov	r3, r7
 8007e40:	461f      	mov	r7, r3
 8007e42:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007e46:	2a30      	cmp	r2, #48	; 0x30
 8007e48:	d0fa      	beq.n	8007e40 <_dtoa_r+0xb68>
 8007e4a:	e6f9      	b.n	8007c40 <_dtoa_r+0x968>
 8007e4c:	9a03      	ldr	r2, [sp, #12]
 8007e4e:	429a      	cmp	r2, r3
 8007e50:	d1a5      	bne.n	8007d9e <_dtoa_r+0xac6>
 8007e52:	2331      	movs	r3, #49	; 0x31
 8007e54:	f10a 0a01 	add.w	sl, sl, #1
 8007e58:	e779      	b.n	8007d4e <_dtoa_r+0xa76>
 8007e5a:	4b14      	ldr	r3, [pc, #80]	; (8007eac <_dtoa_r+0xbd4>)
 8007e5c:	f7ff baa8 	b.w	80073b0 <_dtoa_r+0xd8>
 8007e60:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	f47f aa81 	bne.w	800736a <_dtoa_r+0x92>
 8007e68:	4b11      	ldr	r3, [pc, #68]	; (8007eb0 <_dtoa_r+0xbd8>)
 8007e6a:	f7ff baa1 	b.w	80073b0 <_dtoa_r+0xd8>
 8007e6e:	f1b9 0f00 	cmp.w	r9, #0
 8007e72:	dc03      	bgt.n	8007e7c <_dtoa_r+0xba4>
 8007e74:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007e76:	2b02      	cmp	r3, #2
 8007e78:	f73f aecb 	bgt.w	8007c12 <_dtoa_r+0x93a>
 8007e7c:	9f03      	ldr	r7, [sp, #12]
 8007e7e:	4621      	mov	r1, r4
 8007e80:	4658      	mov	r0, fp
 8007e82:	f7ff f99d 	bl	80071c0 <quorem>
 8007e86:	9a03      	ldr	r2, [sp, #12]
 8007e88:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8007e8c:	f807 3b01 	strb.w	r3, [r7], #1
 8007e90:	1aba      	subs	r2, r7, r2
 8007e92:	4591      	cmp	r9, r2
 8007e94:	ddba      	ble.n	8007e0c <_dtoa_r+0xb34>
 8007e96:	4659      	mov	r1, fp
 8007e98:	2300      	movs	r3, #0
 8007e9a:	220a      	movs	r2, #10
 8007e9c:	4628      	mov	r0, r5
 8007e9e:	f000 fc0b 	bl	80086b8 <__multadd>
 8007ea2:	4683      	mov	fp, r0
 8007ea4:	e7eb      	b.n	8007e7e <_dtoa_r+0xba6>
 8007ea6:	bf00      	nop
 8007ea8:	0800a278 	.word	0x0800a278
 8007eac:	0800a07c 	.word	0x0800a07c
 8007eb0:	0800a1f9 	.word	0x0800a1f9

08007eb4 <rshift>:
 8007eb4:	6903      	ldr	r3, [r0, #16]
 8007eb6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007eba:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8007ebe:	f100 0414 	add.w	r4, r0, #20
 8007ec2:	ea4f 1261 	mov.w	r2, r1, asr #5
 8007ec6:	dd46      	ble.n	8007f56 <rshift+0xa2>
 8007ec8:	f011 011f 	ands.w	r1, r1, #31
 8007ecc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8007ed0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8007ed4:	d10c      	bne.n	8007ef0 <rshift+0x3c>
 8007ed6:	4629      	mov	r1, r5
 8007ed8:	f100 0710 	add.w	r7, r0, #16
 8007edc:	42b1      	cmp	r1, r6
 8007ede:	d335      	bcc.n	8007f4c <rshift+0x98>
 8007ee0:	1a9b      	subs	r3, r3, r2
 8007ee2:	009b      	lsls	r3, r3, #2
 8007ee4:	1eea      	subs	r2, r5, #3
 8007ee6:	4296      	cmp	r6, r2
 8007ee8:	bf38      	it	cc
 8007eea:	2300      	movcc	r3, #0
 8007eec:	4423      	add	r3, r4
 8007eee:	e015      	b.n	8007f1c <rshift+0x68>
 8007ef0:	46a1      	mov	r9, r4
 8007ef2:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8007ef6:	f1c1 0820 	rsb	r8, r1, #32
 8007efa:	40cf      	lsrs	r7, r1
 8007efc:	f105 0e04 	add.w	lr, r5, #4
 8007f00:	4576      	cmp	r6, lr
 8007f02:	46f4      	mov	ip, lr
 8007f04:	d816      	bhi.n	8007f34 <rshift+0x80>
 8007f06:	1a9a      	subs	r2, r3, r2
 8007f08:	0092      	lsls	r2, r2, #2
 8007f0a:	3a04      	subs	r2, #4
 8007f0c:	3501      	adds	r5, #1
 8007f0e:	42ae      	cmp	r6, r5
 8007f10:	bf38      	it	cc
 8007f12:	2200      	movcc	r2, #0
 8007f14:	18a3      	adds	r3, r4, r2
 8007f16:	50a7      	str	r7, [r4, r2]
 8007f18:	b107      	cbz	r7, 8007f1c <rshift+0x68>
 8007f1a:	3304      	adds	r3, #4
 8007f1c:	42a3      	cmp	r3, r4
 8007f1e:	eba3 0204 	sub.w	r2, r3, r4
 8007f22:	bf08      	it	eq
 8007f24:	2300      	moveq	r3, #0
 8007f26:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8007f2a:	6102      	str	r2, [r0, #16]
 8007f2c:	bf08      	it	eq
 8007f2e:	6143      	streq	r3, [r0, #20]
 8007f30:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007f34:	f8dc c000 	ldr.w	ip, [ip]
 8007f38:	fa0c fc08 	lsl.w	ip, ip, r8
 8007f3c:	ea4c 0707 	orr.w	r7, ip, r7
 8007f40:	f849 7b04 	str.w	r7, [r9], #4
 8007f44:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007f48:	40cf      	lsrs	r7, r1
 8007f4a:	e7d9      	b.n	8007f00 <rshift+0x4c>
 8007f4c:	f851 cb04 	ldr.w	ip, [r1], #4
 8007f50:	f847 cf04 	str.w	ip, [r7, #4]!
 8007f54:	e7c2      	b.n	8007edc <rshift+0x28>
 8007f56:	4623      	mov	r3, r4
 8007f58:	e7e0      	b.n	8007f1c <rshift+0x68>

08007f5a <__hexdig_fun>:
 8007f5a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8007f5e:	2b09      	cmp	r3, #9
 8007f60:	d802      	bhi.n	8007f68 <__hexdig_fun+0xe>
 8007f62:	3820      	subs	r0, #32
 8007f64:	b2c0      	uxtb	r0, r0
 8007f66:	4770      	bx	lr
 8007f68:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8007f6c:	2b05      	cmp	r3, #5
 8007f6e:	d801      	bhi.n	8007f74 <__hexdig_fun+0x1a>
 8007f70:	3847      	subs	r0, #71	; 0x47
 8007f72:	e7f7      	b.n	8007f64 <__hexdig_fun+0xa>
 8007f74:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8007f78:	2b05      	cmp	r3, #5
 8007f7a:	d801      	bhi.n	8007f80 <__hexdig_fun+0x26>
 8007f7c:	3827      	subs	r0, #39	; 0x27
 8007f7e:	e7f1      	b.n	8007f64 <__hexdig_fun+0xa>
 8007f80:	2000      	movs	r0, #0
 8007f82:	4770      	bx	lr

08007f84 <__gethex>:
 8007f84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f88:	b08b      	sub	sp, #44	; 0x2c
 8007f8a:	9305      	str	r3, [sp, #20]
 8007f8c:	4bb2      	ldr	r3, [pc, #712]	; (8008258 <__gethex+0x2d4>)
 8007f8e:	9002      	str	r0, [sp, #8]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	468b      	mov	fp, r1
 8007f94:	4618      	mov	r0, r3
 8007f96:	4690      	mov	r8, r2
 8007f98:	9303      	str	r3, [sp, #12]
 8007f9a:	f7f8 f8d9 	bl	8000150 <strlen>
 8007f9e:	4682      	mov	sl, r0
 8007fa0:	9b03      	ldr	r3, [sp, #12]
 8007fa2:	f8db 2000 	ldr.w	r2, [fp]
 8007fa6:	4403      	add	r3, r0
 8007fa8:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8007fac:	9306      	str	r3, [sp, #24]
 8007fae:	1c93      	adds	r3, r2, #2
 8007fb0:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8007fb4:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8007fb8:	32fe      	adds	r2, #254	; 0xfe
 8007fba:	18d1      	adds	r1, r2, r3
 8007fbc:	461f      	mov	r7, r3
 8007fbe:	f813 0b01 	ldrb.w	r0, [r3], #1
 8007fc2:	9101      	str	r1, [sp, #4]
 8007fc4:	2830      	cmp	r0, #48	; 0x30
 8007fc6:	d0f8      	beq.n	8007fba <__gethex+0x36>
 8007fc8:	f7ff ffc7 	bl	8007f5a <__hexdig_fun>
 8007fcc:	4604      	mov	r4, r0
 8007fce:	2800      	cmp	r0, #0
 8007fd0:	d13a      	bne.n	8008048 <__gethex+0xc4>
 8007fd2:	4652      	mov	r2, sl
 8007fd4:	4638      	mov	r0, r7
 8007fd6:	9903      	ldr	r1, [sp, #12]
 8007fd8:	f001 fa26 	bl	8009428 <strncmp>
 8007fdc:	4605      	mov	r5, r0
 8007fde:	2800      	cmp	r0, #0
 8007fe0:	d166      	bne.n	80080b0 <__gethex+0x12c>
 8007fe2:	f817 000a 	ldrb.w	r0, [r7, sl]
 8007fe6:	eb07 060a 	add.w	r6, r7, sl
 8007fea:	f7ff ffb6 	bl	8007f5a <__hexdig_fun>
 8007fee:	2800      	cmp	r0, #0
 8007ff0:	d060      	beq.n	80080b4 <__gethex+0x130>
 8007ff2:	4633      	mov	r3, r6
 8007ff4:	7818      	ldrb	r0, [r3, #0]
 8007ff6:	461f      	mov	r7, r3
 8007ff8:	2830      	cmp	r0, #48	; 0x30
 8007ffa:	f103 0301 	add.w	r3, r3, #1
 8007ffe:	d0f9      	beq.n	8007ff4 <__gethex+0x70>
 8008000:	f7ff ffab 	bl	8007f5a <__hexdig_fun>
 8008004:	2301      	movs	r3, #1
 8008006:	fab0 f480 	clz	r4, r0
 800800a:	4635      	mov	r5, r6
 800800c:	0964      	lsrs	r4, r4, #5
 800800e:	9301      	str	r3, [sp, #4]
 8008010:	463a      	mov	r2, r7
 8008012:	4616      	mov	r6, r2
 8008014:	7830      	ldrb	r0, [r6, #0]
 8008016:	3201      	adds	r2, #1
 8008018:	f7ff ff9f 	bl	8007f5a <__hexdig_fun>
 800801c:	2800      	cmp	r0, #0
 800801e:	d1f8      	bne.n	8008012 <__gethex+0x8e>
 8008020:	4652      	mov	r2, sl
 8008022:	4630      	mov	r0, r6
 8008024:	9903      	ldr	r1, [sp, #12]
 8008026:	f001 f9ff 	bl	8009428 <strncmp>
 800802a:	b980      	cbnz	r0, 800804e <__gethex+0xca>
 800802c:	b94d      	cbnz	r5, 8008042 <__gethex+0xbe>
 800802e:	eb06 050a 	add.w	r5, r6, sl
 8008032:	462a      	mov	r2, r5
 8008034:	4616      	mov	r6, r2
 8008036:	7830      	ldrb	r0, [r6, #0]
 8008038:	3201      	adds	r2, #1
 800803a:	f7ff ff8e 	bl	8007f5a <__hexdig_fun>
 800803e:	2800      	cmp	r0, #0
 8008040:	d1f8      	bne.n	8008034 <__gethex+0xb0>
 8008042:	1bad      	subs	r5, r5, r6
 8008044:	00ad      	lsls	r5, r5, #2
 8008046:	e004      	b.n	8008052 <__gethex+0xce>
 8008048:	2400      	movs	r4, #0
 800804a:	4625      	mov	r5, r4
 800804c:	e7e0      	b.n	8008010 <__gethex+0x8c>
 800804e:	2d00      	cmp	r5, #0
 8008050:	d1f7      	bne.n	8008042 <__gethex+0xbe>
 8008052:	7833      	ldrb	r3, [r6, #0]
 8008054:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008058:	2b50      	cmp	r3, #80	; 0x50
 800805a:	d139      	bne.n	80080d0 <__gethex+0x14c>
 800805c:	7873      	ldrb	r3, [r6, #1]
 800805e:	2b2b      	cmp	r3, #43	; 0x2b
 8008060:	d02a      	beq.n	80080b8 <__gethex+0x134>
 8008062:	2b2d      	cmp	r3, #45	; 0x2d
 8008064:	d02c      	beq.n	80080c0 <__gethex+0x13c>
 8008066:	f04f 0900 	mov.w	r9, #0
 800806a:	1c71      	adds	r1, r6, #1
 800806c:	7808      	ldrb	r0, [r1, #0]
 800806e:	f7ff ff74 	bl	8007f5a <__hexdig_fun>
 8008072:	1e43      	subs	r3, r0, #1
 8008074:	b2db      	uxtb	r3, r3
 8008076:	2b18      	cmp	r3, #24
 8008078:	d82a      	bhi.n	80080d0 <__gethex+0x14c>
 800807a:	f1a0 0210 	sub.w	r2, r0, #16
 800807e:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008082:	f7ff ff6a 	bl	8007f5a <__hexdig_fun>
 8008086:	1e43      	subs	r3, r0, #1
 8008088:	b2db      	uxtb	r3, r3
 800808a:	2b18      	cmp	r3, #24
 800808c:	d91b      	bls.n	80080c6 <__gethex+0x142>
 800808e:	f1b9 0f00 	cmp.w	r9, #0
 8008092:	d000      	beq.n	8008096 <__gethex+0x112>
 8008094:	4252      	negs	r2, r2
 8008096:	4415      	add	r5, r2
 8008098:	f8cb 1000 	str.w	r1, [fp]
 800809c:	b1d4      	cbz	r4, 80080d4 <__gethex+0x150>
 800809e:	9b01      	ldr	r3, [sp, #4]
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	bf14      	ite	ne
 80080a4:	2700      	movne	r7, #0
 80080a6:	2706      	moveq	r7, #6
 80080a8:	4638      	mov	r0, r7
 80080aa:	b00b      	add	sp, #44	; 0x2c
 80080ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080b0:	463e      	mov	r6, r7
 80080b2:	4625      	mov	r5, r4
 80080b4:	2401      	movs	r4, #1
 80080b6:	e7cc      	b.n	8008052 <__gethex+0xce>
 80080b8:	f04f 0900 	mov.w	r9, #0
 80080bc:	1cb1      	adds	r1, r6, #2
 80080be:	e7d5      	b.n	800806c <__gethex+0xe8>
 80080c0:	f04f 0901 	mov.w	r9, #1
 80080c4:	e7fa      	b.n	80080bc <__gethex+0x138>
 80080c6:	230a      	movs	r3, #10
 80080c8:	fb03 0202 	mla	r2, r3, r2, r0
 80080cc:	3a10      	subs	r2, #16
 80080ce:	e7d6      	b.n	800807e <__gethex+0xfa>
 80080d0:	4631      	mov	r1, r6
 80080d2:	e7e1      	b.n	8008098 <__gethex+0x114>
 80080d4:	4621      	mov	r1, r4
 80080d6:	1bf3      	subs	r3, r6, r7
 80080d8:	3b01      	subs	r3, #1
 80080da:	2b07      	cmp	r3, #7
 80080dc:	dc0a      	bgt.n	80080f4 <__gethex+0x170>
 80080de:	9802      	ldr	r0, [sp, #8]
 80080e0:	f000 fa88 	bl	80085f4 <_Balloc>
 80080e4:	4604      	mov	r4, r0
 80080e6:	b940      	cbnz	r0, 80080fa <__gethex+0x176>
 80080e8:	4602      	mov	r2, r0
 80080ea:	21de      	movs	r1, #222	; 0xde
 80080ec:	4b5b      	ldr	r3, [pc, #364]	; (800825c <__gethex+0x2d8>)
 80080ee:	485c      	ldr	r0, [pc, #368]	; (8008260 <__gethex+0x2dc>)
 80080f0:	f001 f9bc 	bl	800946c <__assert_func>
 80080f4:	3101      	adds	r1, #1
 80080f6:	105b      	asrs	r3, r3, #1
 80080f8:	e7ef      	b.n	80080da <__gethex+0x156>
 80080fa:	f04f 0b00 	mov.w	fp, #0
 80080fe:	f100 0914 	add.w	r9, r0, #20
 8008102:	f1ca 0301 	rsb	r3, sl, #1
 8008106:	f8cd 9010 	str.w	r9, [sp, #16]
 800810a:	f8cd b004 	str.w	fp, [sp, #4]
 800810e:	9308      	str	r3, [sp, #32]
 8008110:	42b7      	cmp	r7, r6
 8008112:	d33f      	bcc.n	8008194 <__gethex+0x210>
 8008114:	9f04      	ldr	r7, [sp, #16]
 8008116:	9b01      	ldr	r3, [sp, #4]
 8008118:	f847 3b04 	str.w	r3, [r7], #4
 800811c:	eba7 0709 	sub.w	r7, r7, r9
 8008120:	10bf      	asrs	r7, r7, #2
 8008122:	6127      	str	r7, [r4, #16]
 8008124:	4618      	mov	r0, r3
 8008126:	f000 fb57 	bl	80087d8 <__hi0bits>
 800812a:	017f      	lsls	r7, r7, #5
 800812c:	f8d8 6000 	ldr.w	r6, [r8]
 8008130:	1a3f      	subs	r7, r7, r0
 8008132:	42b7      	cmp	r7, r6
 8008134:	dd62      	ble.n	80081fc <__gethex+0x278>
 8008136:	1bbf      	subs	r7, r7, r6
 8008138:	4639      	mov	r1, r7
 800813a:	4620      	mov	r0, r4
 800813c:	f000 fef1 	bl	8008f22 <__any_on>
 8008140:	4682      	mov	sl, r0
 8008142:	b1a8      	cbz	r0, 8008170 <__gethex+0x1ec>
 8008144:	f04f 0a01 	mov.w	sl, #1
 8008148:	1e7b      	subs	r3, r7, #1
 800814a:	1159      	asrs	r1, r3, #5
 800814c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8008150:	f003 021f 	and.w	r2, r3, #31
 8008154:	fa0a f202 	lsl.w	r2, sl, r2
 8008158:	420a      	tst	r2, r1
 800815a:	d009      	beq.n	8008170 <__gethex+0x1ec>
 800815c:	4553      	cmp	r3, sl
 800815e:	dd05      	ble.n	800816c <__gethex+0x1e8>
 8008160:	4620      	mov	r0, r4
 8008162:	1eb9      	subs	r1, r7, #2
 8008164:	f000 fedd 	bl	8008f22 <__any_on>
 8008168:	2800      	cmp	r0, #0
 800816a:	d144      	bne.n	80081f6 <__gethex+0x272>
 800816c:	f04f 0a02 	mov.w	sl, #2
 8008170:	4639      	mov	r1, r7
 8008172:	4620      	mov	r0, r4
 8008174:	f7ff fe9e 	bl	8007eb4 <rshift>
 8008178:	443d      	add	r5, r7
 800817a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800817e:	42ab      	cmp	r3, r5
 8008180:	da4a      	bge.n	8008218 <__gethex+0x294>
 8008182:	4621      	mov	r1, r4
 8008184:	9802      	ldr	r0, [sp, #8]
 8008186:	f000 fa75 	bl	8008674 <_Bfree>
 800818a:	2300      	movs	r3, #0
 800818c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800818e:	27a3      	movs	r7, #163	; 0xa3
 8008190:	6013      	str	r3, [r2, #0]
 8008192:	e789      	b.n	80080a8 <__gethex+0x124>
 8008194:	1e73      	subs	r3, r6, #1
 8008196:	9a06      	ldr	r2, [sp, #24]
 8008198:	9307      	str	r3, [sp, #28]
 800819a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800819e:	4293      	cmp	r3, r2
 80081a0:	d019      	beq.n	80081d6 <__gethex+0x252>
 80081a2:	f1bb 0f20 	cmp.w	fp, #32
 80081a6:	d107      	bne.n	80081b8 <__gethex+0x234>
 80081a8:	9b04      	ldr	r3, [sp, #16]
 80081aa:	9a01      	ldr	r2, [sp, #4]
 80081ac:	f843 2b04 	str.w	r2, [r3], #4
 80081b0:	9304      	str	r3, [sp, #16]
 80081b2:	2300      	movs	r3, #0
 80081b4:	469b      	mov	fp, r3
 80081b6:	9301      	str	r3, [sp, #4]
 80081b8:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80081bc:	f7ff fecd 	bl	8007f5a <__hexdig_fun>
 80081c0:	9b01      	ldr	r3, [sp, #4]
 80081c2:	f000 000f 	and.w	r0, r0, #15
 80081c6:	fa00 f00b 	lsl.w	r0, r0, fp
 80081ca:	4303      	orrs	r3, r0
 80081cc:	9301      	str	r3, [sp, #4]
 80081ce:	f10b 0b04 	add.w	fp, fp, #4
 80081d2:	9b07      	ldr	r3, [sp, #28]
 80081d4:	e00d      	b.n	80081f2 <__gethex+0x26e>
 80081d6:	9a08      	ldr	r2, [sp, #32]
 80081d8:	1e73      	subs	r3, r6, #1
 80081da:	4413      	add	r3, r2
 80081dc:	42bb      	cmp	r3, r7
 80081de:	d3e0      	bcc.n	80081a2 <__gethex+0x21e>
 80081e0:	4618      	mov	r0, r3
 80081e2:	4652      	mov	r2, sl
 80081e4:	9903      	ldr	r1, [sp, #12]
 80081e6:	9309      	str	r3, [sp, #36]	; 0x24
 80081e8:	f001 f91e 	bl	8009428 <strncmp>
 80081ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80081ee:	2800      	cmp	r0, #0
 80081f0:	d1d7      	bne.n	80081a2 <__gethex+0x21e>
 80081f2:	461e      	mov	r6, r3
 80081f4:	e78c      	b.n	8008110 <__gethex+0x18c>
 80081f6:	f04f 0a03 	mov.w	sl, #3
 80081fa:	e7b9      	b.n	8008170 <__gethex+0x1ec>
 80081fc:	da09      	bge.n	8008212 <__gethex+0x28e>
 80081fe:	1bf7      	subs	r7, r6, r7
 8008200:	4621      	mov	r1, r4
 8008202:	463a      	mov	r2, r7
 8008204:	9802      	ldr	r0, [sp, #8]
 8008206:	f000 fc4d 	bl	8008aa4 <__lshift>
 800820a:	4604      	mov	r4, r0
 800820c:	1bed      	subs	r5, r5, r7
 800820e:	f100 0914 	add.w	r9, r0, #20
 8008212:	f04f 0a00 	mov.w	sl, #0
 8008216:	e7b0      	b.n	800817a <__gethex+0x1f6>
 8008218:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800821c:	42a8      	cmp	r0, r5
 800821e:	dd72      	ble.n	8008306 <__gethex+0x382>
 8008220:	1b45      	subs	r5, r0, r5
 8008222:	42ae      	cmp	r6, r5
 8008224:	dc35      	bgt.n	8008292 <__gethex+0x30e>
 8008226:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800822a:	2b02      	cmp	r3, #2
 800822c:	d029      	beq.n	8008282 <__gethex+0x2fe>
 800822e:	2b03      	cmp	r3, #3
 8008230:	d02b      	beq.n	800828a <__gethex+0x306>
 8008232:	2b01      	cmp	r3, #1
 8008234:	d11c      	bne.n	8008270 <__gethex+0x2ec>
 8008236:	42ae      	cmp	r6, r5
 8008238:	d11a      	bne.n	8008270 <__gethex+0x2ec>
 800823a:	2e01      	cmp	r6, #1
 800823c:	d112      	bne.n	8008264 <__gethex+0x2e0>
 800823e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008242:	9a05      	ldr	r2, [sp, #20]
 8008244:	2762      	movs	r7, #98	; 0x62
 8008246:	6013      	str	r3, [r2, #0]
 8008248:	2301      	movs	r3, #1
 800824a:	6123      	str	r3, [r4, #16]
 800824c:	f8c9 3000 	str.w	r3, [r9]
 8008250:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008252:	601c      	str	r4, [r3, #0]
 8008254:	e728      	b.n	80080a8 <__gethex+0x124>
 8008256:	bf00      	nop
 8008258:	0800a2f0 	.word	0x0800a2f0
 800825c:	0800a278 	.word	0x0800a278
 8008260:	0800a289 	.word	0x0800a289
 8008264:	4620      	mov	r0, r4
 8008266:	1e71      	subs	r1, r6, #1
 8008268:	f000 fe5b 	bl	8008f22 <__any_on>
 800826c:	2800      	cmp	r0, #0
 800826e:	d1e6      	bne.n	800823e <__gethex+0x2ba>
 8008270:	4621      	mov	r1, r4
 8008272:	9802      	ldr	r0, [sp, #8]
 8008274:	f000 f9fe 	bl	8008674 <_Bfree>
 8008278:	2300      	movs	r3, #0
 800827a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800827c:	2750      	movs	r7, #80	; 0x50
 800827e:	6013      	str	r3, [r2, #0]
 8008280:	e712      	b.n	80080a8 <__gethex+0x124>
 8008282:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008284:	2b00      	cmp	r3, #0
 8008286:	d1f3      	bne.n	8008270 <__gethex+0x2ec>
 8008288:	e7d9      	b.n	800823e <__gethex+0x2ba>
 800828a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800828c:	2b00      	cmp	r3, #0
 800828e:	d1d6      	bne.n	800823e <__gethex+0x2ba>
 8008290:	e7ee      	b.n	8008270 <__gethex+0x2ec>
 8008292:	1e6f      	subs	r7, r5, #1
 8008294:	f1ba 0f00 	cmp.w	sl, #0
 8008298:	d132      	bne.n	8008300 <__gethex+0x37c>
 800829a:	b127      	cbz	r7, 80082a6 <__gethex+0x322>
 800829c:	4639      	mov	r1, r7
 800829e:	4620      	mov	r0, r4
 80082a0:	f000 fe3f 	bl	8008f22 <__any_on>
 80082a4:	4682      	mov	sl, r0
 80082a6:	2101      	movs	r1, #1
 80082a8:	117b      	asrs	r3, r7, #5
 80082aa:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80082ae:	f007 071f 	and.w	r7, r7, #31
 80082b2:	fa01 f707 	lsl.w	r7, r1, r7
 80082b6:	421f      	tst	r7, r3
 80082b8:	f04f 0702 	mov.w	r7, #2
 80082bc:	4629      	mov	r1, r5
 80082be:	4620      	mov	r0, r4
 80082c0:	bf18      	it	ne
 80082c2:	f04a 0a02 	orrne.w	sl, sl, #2
 80082c6:	1b76      	subs	r6, r6, r5
 80082c8:	f7ff fdf4 	bl	8007eb4 <rshift>
 80082cc:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80082d0:	f1ba 0f00 	cmp.w	sl, #0
 80082d4:	d048      	beq.n	8008368 <__gethex+0x3e4>
 80082d6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80082da:	2b02      	cmp	r3, #2
 80082dc:	d015      	beq.n	800830a <__gethex+0x386>
 80082de:	2b03      	cmp	r3, #3
 80082e0:	d017      	beq.n	8008312 <__gethex+0x38e>
 80082e2:	2b01      	cmp	r3, #1
 80082e4:	d109      	bne.n	80082fa <__gethex+0x376>
 80082e6:	f01a 0f02 	tst.w	sl, #2
 80082ea:	d006      	beq.n	80082fa <__gethex+0x376>
 80082ec:	f8d9 0000 	ldr.w	r0, [r9]
 80082f0:	ea4a 0a00 	orr.w	sl, sl, r0
 80082f4:	f01a 0f01 	tst.w	sl, #1
 80082f8:	d10e      	bne.n	8008318 <__gethex+0x394>
 80082fa:	f047 0710 	orr.w	r7, r7, #16
 80082fe:	e033      	b.n	8008368 <__gethex+0x3e4>
 8008300:	f04f 0a01 	mov.w	sl, #1
 8008304:	e7cf      	b.n	80082a6 <__gethex+0x322>
 8008306:	2701      	movs	r7, #1
 8008308:	e7e2      	b.n	80082d0 <__gethex+0x34c>
 800830a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800830c:	f1c3 0301 	rsb	r3, r3, #1
 8008310:	9315      	str	r3, [sp, #84]	; 0x54
 8008312:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008314:	2b00      	cmp	r3, #0
 8008316:	d0f0      	beq.n	80082fa <__gethex+0x376>
 8008318:	f04f 0c00 	mov.w	ip, #0
 800831c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8008320:	f104 0314 	add.w	r3, r4, #20
 8008324:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8008328:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800832c:	4618      	mov	r0, r3
 800832e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008332:	f1b2 3fff 	cmp.w	r2, #4294967295
 8008336:	d01c      	beq.n	8008372 <__gethex+0x3ee>
 8008338:	3201      	adds	r2, #1
 800833a:	6002      	str	r2, [r0, #0]
 800833c:	2f02      	cmp	r7, #2
 800833e:	f104 0314 	add.w	r3, r4, #20
 8008342:	d13d      	bne.n	80083c0 <__gethex+0x43c>
 8008344:	f8d8 2000 	ldr.w	r2, [r8]
 8008348:	3a01      	subs	r2, #1
 800834a:	42b2      	cmp	r2, r6
 800834c:	d10a      	bne.n	8008364 <__gethex+0x3e0>
 800834e:	2201      	movs	r2, #1
 8008350:	1171      	asrs	r1, r6, #5
 8008352:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008356:	f006 061f 	and.w	r6, r6, #31
 800835a:	fa02 f606 	lsl.w	r6, r2, r6
 800835e:	421e      	tst	r6, r3
 8008360:	bf18      	it	ne
 8008362:	4617      	movne	r7, r2
 8008364:	f047 0720 	orr.w	r7, r7, #32
 8008368:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800836a:	601c      	str	r4, [r3, #0]
 800836c:	9b05      	ldr	r3, [sp, #20]
 800836e:	601d      	str	r5, [r3, #0]
 8008370:	e69a      	b.n	80080a8 <__gethex+0x124>
 8008372:	4299      	cmp	r1, r3
 8008374:	f843 cc04 	str.w	ip, [r3, #-4]
 8008378:	d8d8      	bhi.n	800832c <__gethex+0x3a8>
 800837a:	68a3      	ldr	r3, [r4, #8]
 800837c:	459b      	cmp	fp, r3
 800837e:	db17      	blt.n	80083b0 <__gethex+0x42c>
 8008380:	6861      	ldr	r1, [r4, #4]
 8008382:	9802      	ldr	r0, [sp, #8]
 8008384:	3101      	adds	r1, #1
 8008386:	f000 f935 	bl	80085f4 <_Balloc>
 800838a:	4681      	mov	r9, r0
 800838c:	b918      	cbnz	r0, 8008396 <__gethex+0x412>
 800838e:	4602      	mov	r2, r0
 8008390:	2184      	movs	r1, #132	; 0x84
 8008392:	4b19      	ldr	r3, [pc, #100]	; (80083f8 <__gethex+0x474>)
 8008394:	e6ab      	b.n	80080ee <__gethex+0x16a>
 8008396:	6922      	ldr	r2, [r4, #16]
 8008398:	f104 010c 	add.w	r1, r4, #12
 800839c:	3202      	adds	r2, #2
 800839e:	0092      	lsls	r2, r2, #2
 80083a0:	300c      	adds	r0, #12
 80083a2:	f000 f919 	bl	80085d8 <memcpy>
 80083a6:	4621      	mov	r1, r4
 80083a8:	9802      	ldr	r0, [sp, #8]
 80083aa:	f000 f963 	bl	8008674 <_Bfree>
 80083ae:	464c      	mov	r4, r9
 80083b0:	6923      	ldr	r3, [r4, #16]
 80083b2:	1c5a      	adds	r2, r3, #1
 80083b4:	6122      	str	r2, [r4, #16]
 80083b6:	2201      	movs	r2, #1
 80083b8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80083bc:	615a      	str	r2, [r3, #20]
 80083be:	e7bd      	b.n	800833c <__gethex+0x3b8>
 80083c0:	6922      	ldr	r2, [r4, #16]
 80083c2:	455a      	cmp	r2, fp
 80083c4:	dd0b      	ble.n	80083de <__gethex+0x45a>
 80083c6:	2101      	movs	r1, #1
 80083c8:	4620      	mov	r0, r4
 80083ca:	f7ff fd73 	bl	8007eb4 <rshift>
 80083ce:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80083d2:	3501      	adds	r5, #1
 80083d4:	42ab      	cmp	r3, r5
 80083d6:	f6ff aed4 	blt.w	8008182 <__gethex+0x1fe>
 80083da:	2701      	movs	r7, #1
 80083dc:	e7c2      	b.n	8008364 <__gethex+0x3e0>
 80083de:	f016 061f 	ands.w	r6, r6, #31
 80083e2:	d0fa      	beq.n	80083da <__gethex+0x456>
 80083e4:	4453      	add	r3, sl
 80083e6:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80083ea:	f000 f9f5 	bl	80087d8 <__hi0bits>
 80083ee:	f1c6 0620 	rsb	r6, r6, #32
 80083f2:	42b0      	cmp	r0, r6
 80083f4:	dbe7      	blt.n	80083c6 <__gethex+0x442>
 80083f6:	e7f0      	b.n	80083da <__gethex+0x456>
 80083f8:	0800a278 	.word	0x0800a278

080083fc <L_shift>:
 80083fc:	f1c2 0208 	rsb	r2, r2, #8
 8008400:	0092      	lsls	r2, r2, #2
 8008402:	b570      	push	{r4, r5, r6, lr}
 8008404:	f1c2 0620 	rsb	r6, r2, #32
 8008408:	6843      	ldr	r3, [r0, #4]
 800840a:	6804      	ldr	r4, [r0, #0]
 800840c:	fa03 f506 	lsl.w	r5, r3, r6
 8008410:	432c      	orrs	r4, r5
 8008412:	40d3      	lsrs	r3, r2
 8008414:	6004      	str	r4, [r0, #0]
 8008416:	f840 3f04 	str.w	r3, [r0, #4]!
 800841a:	4288      	cmp	r0, r1
 800841c:	d3f4      	bcc.n	8008408 <L_shift+0xc>
 800841e:	bd70      	pop	{r4, r5, r6, pc}

08008420 <__match>:
 8008420:	b530      	push	{r4, r5, lr}
 8008422:	6803      	ldr	r3, [r0, #0]
 8008424:	3301      	adds	r3, #1
 8008426:	f811 4b01 	ldrb.w	r4, [r1], #1
 800842a:	b914      	cbnz	r4, 8008432 <__match+0x12>
 800842c:	6003      	str	r3, [r0, #0]
 800842e:	2001      	movs	r0, #1
 8008430:	bd30      	pop	{r4, r5, pc}
 8008432:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008436:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800843a:	2d19      	cmp	r5, #25
 800843c:	bf98      	it	ls
 800843e:	3220      	addls	r2, #32
 8008440:	42a2      	cmp	r2, r4
 8008442:	d0f0      	beq.n	8008426 <__match+0x6>
 8008444:	2000      	movs	r0, #0
 8008446:	e7f3      	b.n	8008430 <__match+0x10>

08008448 <__hexnan>:
 8008448:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800844c:	2500      	movs	r5, #0
 800844e:	680b      	ldr	r3, [r1, #0]
 8008450:	4682      	mov	sl, r0
 8008452:	115e      	asrs	r6, r3, #5
 8008454:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008458:	f013 031f 	ands.w	r3, r3, #31
 800845c:	bf18      	it	ne
 800845e:	3604      	addne	r6, #4
 8008460:	1f37      	subs	r7, r6, #4
 8008462:	46b9      	mov	r9, r7
 8008464:	463c      	mov	r4, r7
 8008466:	46ab      	mov	fp, r5
 8008468:	b087      	sub	sp, #28
 800846a:	4690      	mov	r8, r2
 800846c:	6802      	ldr	r2, [r0, #0]
 800846e:	9301      	str	r3, [sp, #4]
 8008470:	f846 5c04 	str.w	r5, [r6, #-4]
 8008474:	9502      	str	r5, [sp, #8]
 8008476:	7851      	ldrb	r1, [r2, #1]
 8008478:	1c53      	adds	r3, r2, #1
 800847a:	9303      	str	r3, [sp, #12]
 800847c:	b341      	cbz	r1, 80084d0 <__hexnan+0x88>
 800847e:	4608      	mov	r0, r1
 8008480:	9205      	str	r2, [sp, #20]
 8008482:	9104      	str	r1, [sp, #16]
 8008484:	f7ff fd69 	bl	8007f5a <__hexdig_fun>
 8008488:	2800      	cmp	r0, #0
 800848a:	d14f      	bne.n	800852c <__hexnan+0xe4>
 800848c:	9904      	ldr	r1, [sp, #16]
 800848e:	9a05      	ldr	r2, [sp, #20]
 8008490:	2920      	cmp	r1, #32
 8008492:	d818      	bhi.n	80084c6 <__hexnan+0x7e>
 8008494:	9b02      	ldr	r3, [sp, #8]
 8008496:	459b      	cmp	fp, r3
 8008498:	dd13      	ble.n	80084c2 <__hexnan+0x7a>
 800849a:	454c      	cmp	r4, r9
 800849c:	d206      	bcs.n	80084ac <__hexnan+0x64>
 800849e:	2d07      	cmp	r5, #7
 80084a0:	dc04      	bgt.n	80084ac <__hexnan+0x64>
 80084a2:	462a      	mov	r2, r5
 80084a4:	4649      	mov	r1, r9
 80084a6:	4620      	mov	r0, r4
 80084a8:	f7ff ffa8 	bl	80083fc <L_shift>
 80084ac:	4544      	cmp	r4, r8
 80084ae:	d950      	bls.n	8008552 <__hexnan+0x10a>
 80084b0:	2300      	movs	r3, #0
 80084b2:	f1a4 0904 	sub.w	r9, r4, #4
 80084b6:	f844 3c04 	str.w	r3, [r4, #-4]
 80084ba:	461d      	mov	r5, r3
 80084bc:	464c      	mov	r4, r9
 80084be:	f8cd b008 	str.w	fp, [sp, #8]
 80084c2:	9a03      	ldr	r2, [sp, #12]
 80084c4:	e7d7      	b.n	8008476 <__hexnan+0x2e>
 80084c6:	2929      	cmp	r1, #41	; 0x29
 80084c8:	d156      	bne.n	8008578 <__hexnan+0x130>
 80084ca:	3202      	adds	r2, #2
 80084cc:	f8ca 2000 	str.w	r2, [sl]
 80084d0:	f1bb 0f00 	cmp.w	fp, #0
 80084d4:	d050      	beq.n	8008578 <__hexnan+0x130>
 80084d6:	454c      	cmp	r4, r9
 80084d8:	d206      	bcs.n	80084e8 <__hexnan+0xa0>
 80084da:	2d07      	cmp	r5, #7
 80084dc:	dc04      	bgt.n	80084e8 <__hexnan+0xa0>
 80084de:	462a      	mov	r2, r5
 80084e0:	4649      	mov	r1, r9
 80084e2:	4620      	mov	r0, r4
 80084e4:	f7ff ff8a 	bl	80083fc <L_shift>
 80084e8:	4544      	cmp	r4, r8
 80084ea:	d934      	bls.n	8008556 <__hexnan+0x10e>
 80084ec:	4623      	mov	r3, r4
 80084ee:	f1a8 0204 	sub.w	r2, r8, #4
 80084f2:	f853 1b04 	ldr.w	r1, [r3], #4
 80084f6:	429f      	cmp	r7, r3
 80084f8:	f842 1f04 	str.w	r1, [r2, #4]!
 80084fc:	d2f9      	bcs.n	80084f2 <__hexnan+0xaa>
 80084fe:	1b3b      	subs	r3, r7, r4
 8008500:	f023 0303 	bic.w	r3, r3, #3
 8008504:	3304      	adds	r3, #4
 8008506:	3401      	adds	r4, #1
 8008508:	3e03      	subs	r6, #3
 800850a:	42b4      	cmp	r4, r6
 800850c:	bf88      	it	hi
 800850e:	2304      	movhi	r3, #4
 8008510:	2200      	movs	r2, #0
 8008512:	4443      	add	r3, r8
 8008514:	f843 2b04 	str.w	r2, [r3], #4
 8008518:	429f      	cmp	r7, r3
 800851a:	d2fb      	bcs.n	8008514 <__hexnan+0xcc>
 800851c:	683b      	ldr	r3, [r7, #0]
 800851e:	b91b      	cbnz	r3, 8008528 <__hexnan+0xe0>
 8008520:	4547      	cmp	r7, r8
 8008522:	d127      	bne.n	8008574 <__hexnan+0x12c>
 8008524:	2301      	movs	r3, #1
 8008526:	603b      	str	r3, [r7, #0]
 8008528:	2005      	movs	r0, #5
 800852a:	e026      	b.n	800857a <__hexnan+0x132>
 800852c:	3501      	adds	r5, #1
 800852e:	2d08      	cmp	r5, #8
 8008530:	f10b 0b01 	add.w	fp, fp, #1
 8008534:	dd06      	ble.n	8008544 <__hexnan+0xfc>
 8008536:	4544      	cmp	r4, r8
 8008538:	d9c3      	bls.n	80084c2 <__hexnan+0x7a>
 800853a:	2300      	movs	r3, #0
 800853c:	2501      	movs	r5, #1
 800853e:	f844 3c04 	str.w	r3, [r4, #-4]
 8008542:	3c04      	subs	r4, #4
 8008544:	6822      	ldr	r2, [r4, #0]
 8008546:	f000 000f 	and.w	r0, r0, #15
 800854a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800854e:	6022      	str	r2, [r4, #0]
 8008550:	e7b7      	b.n	80084c2 <__hexnan+0x7a>
 8008552:	2508      	movs	r5, #8
 8008554:	e7b5      	b.n	80084c2 <__hexnan+0x7a>
 8008556:	9b01      	ldr	r3, [sp, #4]
 8008558:	2b00      	cmp	r3, #0
 800855a:	d0df      	beq.n	800851c <__hexnan+0xd4>
 800855c:	f04f 32ff 	mov.w	r2, #4294967295
 8008560:	f1c3 0320 	rsb	r3, r3, #32
 8008564:	fa22 f303 	lsr.w	r3, r2, r3
 8008568:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800856c:	401a      	ands	r2, r3
 800856e:	f846 2c04 	str.w	r2, [r6, #-4]
 8008572:	e7d3      	b.n	800851c <__hexnan+0xd4>
 8008574:	3f04      	subs	r7, #4
 8008576:	e7d1      	b.n	800851c <__hexnan+0xd4>
 8008578:	2004      	movs	r0, #4
 800857a:	b007      	add	sp, #28
 800857c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008580 <_localeconv_r>:
 8008580:	4800      	ldr	r0, [pc, #0]	; (8008584 <_localeconv_r+0x4>)
 8008582:	4770      	bx	lr
 8008584:	20000194 	.word	0x20000194

08008588 <malloc>:
 8008588:	4b02      	ldr	r3, [pc, #8]	; (8008594 <malloc+0xc>)
 800858a:	4601      	mov	r1, r0
 800858c:	6818      	ldr	r0, [r3, #0]
 800858e:	f000 bd65 	b.w	800905c <_malloc_r>
 8008592:	bf00      	nop
 8008594:	2000003c 	.word	0x2000003c

08008598 <__ascii_mbtowc>:
 8008598:	b082      	sub	sp, #8
 800859a:	b901      	cbnz	r1, 800859e <__ascii_mbtowc+0x6>
 800859c:	a901      	add	r1, sp, #4
 800859e:	b142      	cbz	r2, 80085b2 <__ascii_mbtowc+0x1a>
 80085a0:	b14b      	cbz	r3, 80085b6 <__ascii_mbtowc+0x1e>
 80085a2:	7813      	ldrb	r3, [r2, #0]
 80085a4:	600b      	str	r3, [r1, #0]
 80085a6:	7812      	ldrb	r2, [r2, #0]
 80085a8:	1e10      	subs	r0, r2, #0
 80085aa:	bf18      	it	ne
 80085ac:	2001      	movne	r0, #1
 80085ae:	b002      	add	sp, #8
 80085b0:	4770      	bx	lr
 80085b2:	4610      	mov	r0, r2
 80085b4:	e7fb      	b.n	80085ae <__ascii_mbtowc+0x16>
 80085b6:	f06f 0001 	mvn.w	r0, #1
 80085ba:	e7f8      	b.n	80085ae <__ascii_mbtowc+0x16>

080085bc <memchr>:
 80085bc:	4603      	mov	r3, r0
 80085be:	b510      	push	{r4, lr}
 80085c0:	b2c9      	uxtb	r1, r1
 80085c2:	4402      	add	r2, r0
 80085c4:	4293      	cmp	r3, r2
 80085c6:	4618      	mov	r0, r3
 80085c8:	d101      	bne.n	80085ce <memchr+0x12>
 80085ca:	2000      	movs	r0, #0
 80085cc:	e003      	b.n	80085d6 <memchr+0x1a>
 80085ce:	7804      	ldrb	r4, [r0, #0]
 80085d0:	3301      	adds	r3, #1
 80085d2:	428c      	cmp	r4, r1
 80085d4:	d1f6      	bne.n	80085c4 <memchr+0x8>
 80085d6:	bd10      	pop	{r4, pc}

080085d8 <memcpy>:
 80085d8:	440a      	add	r2, r1
 80085da:	4291      	cmp	r1, r2
 80085dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80085e0:	d100      	bne.n	80085e4 <memcpy+0xc>
 80085e2:	4770      	bx	lr
 80085e4:	b510      	push	{r4, lr}
 80085e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80085ea:	4291      	cmp	r1, r2
 80085ec:	f803 4f01 	strb.w	r4, [r3, #1]!
 80085f0:	d1f9      	bne.n	80085e6 <memcpy+0xe>
 80085f2:	bd10      	pop	{r4, pc}

080085f4 <_Balloc>:
 80085f4:	b570      	push	{r4, r5, r6, lr}
 80085f6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80085f8:	4604      	mov	r4, r0
 80085fa:	460d      	mov	r5, r1
 80085fc:	b976      	cbnz	r6, 800861c <_Balloc+0x28>
 80085fe:	2010      	movs	r0, #16
 8008600:	f7ff ffc2 	bl	8008588 <malloc>
 8008604:	4602      	mov	r2, r0
 8008606:	6260      	str	r0, [r4, #36]	; 0x24
 8008608:	b920      	cbnz	r0, 8008614 <_Balloc+0x20>
 800860a:	2166      	movs	r1, #102	; 0x66
 800860c:	4b17      	ldr	r3, [pc, #92]	; (800866c <_Balloc+0x78>)
 800860e:	4818      	ldr	r0, [pc, #96]	; (8008670 <_Balloc+0x7c>)
 8008610:	f000 ff2c 	bl	800946c <__assert_func>
 8008614:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008618:	6006      	str	r6, [r0, #0]
 800861a:	60c6      	str	r6, [r0, #12]
 800861c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800861e:	68f3      	ldr	r3, [r6, #12]
 8008620:	b183      	cbz	r3, 8008644 <_Balloc+0x50>
 8008622:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008624:	68db      	ldr	r3, [r3, #12]
 8008626:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800862a:	b9b8      	cbnz	r0, 800865c <_Balloc+0x68>
 800862c:	2101      	movs	r1, #1
 800862e:	fa01 f605 	lsl.w	r6, r1, r5
 8008632:	1d72      	adds	r2, r6, #5
 8008634:	4620      	mov	r0, r4
 8008636:	0092      	lsls	r2, r2, #2
 8008638:	f000 fc94 	bl	8008f64 <_calloc_r>
 800863c:	b160      	cbz	r0, 8008658 <_Balloc+0x64>
 800863e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008642:	e00e      	b.n	8008662 <_Balloc+0x6e>
 8008644:	2221      	movs	r2, #33	; 0x21
 8008646:	2104      	movs	r1, #4
 8008648:	4620      	mov	r0, r4
 800864a:	f000 fc8b 	bl	8008f64 <_calloc_r>
 800864e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008650:	60f0      	str	r0, [r6, #12]
 8008652:	68db      	ldr	r3, [r3, #12]
 8008654:	2b00      	cmp	r3, #0
 8008656:	d1e4      	bne.n	8008622 <_Balloc+0x2e>
 8008658:	2000      	movs	r0, #0
 800865a:	bd70      	pop	{r4, r5, r6, pc}
 800865c:	6802      	ldr	r2, [r0, #0]
 800865e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008662:	2300      	movs	r3, #0
 8008664:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008668:	e7f7      	b.n	800865a <_Balloc+0x66>
 800866a:	bf00      	nop
 800866c:	0800a206 	.word	0x0800a206
 8008670:	0800a304 	.word	0x0800a304

08008674 <_Bfree>:
 8008674:	b570      	push	{r4, r5, r6, lr}
 8008676:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008678:	4605      	mov	r5, r0
 800867a:	460c      	mov	r4, r1
 800867c:	b976      	cbnz	r6, 800869c <_Bfree+0x28>
 800867e:	2010      	movs	r0, #16
 8008680:	f7ff ff82 	bl	8008588 <malloc>
 8008684:	4602      	mov	r2, r0
 8008686:	6268      	str	r0, [r5, #36]	; 0x24
 8008688:	b920      	cbnz	r0, 8008694 <_Bfree+0x20>
 800868a:	218a      	movs	r1, #138	; 0x8a
 800868c:	4b08      	ldr	r3, [pc, #32]	; (80086b0 <_Bfree+0x3c>)
 800868e:	4809      	ldr	r0, [pc, #36]	; (80086b4 <_Bfree+0x40>)
 8008690:	f000 feec 	bl	800946c <__assert_func>
 8008694:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008698:	6006      	str	r6, [r0, #0]
 800869a:	60c6      	str	r6, [r0, #12]
 800869c:	b13c      	cbz	r4, 80086ae <_Bfree+0x3a>
 800869e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80086a0:	6862      	ldr	r2, [r4, #4]
 80086a2:	68db      	ldr	r3, [r3, #12]
 80086a4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80086a8:	6021      	str	r1, [r4, #0]
 80086aa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80086ae:	bd70      	pop	{r4, r5, r6, pc}
 80086b0:	0800a206 	.word	0x0800a206
 80086b4:	0800a304 	.word	0x0800a304

080086b8 <__multadd>:
 80086b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80086bc:	4607      	mov	r7, r0
 80086be:	460c      	mov	r4, r1
 80086c0:	461e      	mov	r6, r3
 80086c2:	2000      	movs	r0, #0
 80086c4:	690d      	ldr	r5, [r1, #16]
 80086c6:	f101 0c14 	add.w	ip, r1, #20
 80086ca:	f8dc 3000 	ldr.w	r3, [ip]
 80086ce:	3001      	adds	r0, #1
 80086d0:	b299      	uxth	r1, r3
 80086d2:	fb02 6101 	mla	r1, r2, r1, r6
 80086d6:	0c1e      	lsrs	r6, r3, #16
 80086d8:	0c0b      	lsrs	r3, r1, #16
 80086da:	fb02 3306 	mla	r3, r2, r6, r3
 80086de:	b289      	uxth	r1, r1
 80086e0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80086e4:	4285      	cmp	r5, r0
 80086e6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80086ea:	f84c 1b04 	str.w	r1, [ip], #4
 80086ee:	dcec      	bgt.n	80086ca <__multadd+0x12>
 80086f0:	b30e      	cbz	r6, 8008736 <__multadd+0x7e>
 80086f2:	68a3      	ldr	r3, [r4, #8]
 80086f4:	42ab      	cmp	r3, r5
 80086f6:	dc19      	bgt.n	800872c <__multadd+0x74>
 80086f8:	6861      	ldr	r1, [r4, #4]
 80086fa:	4638      	mov	r0, r7
 80086fc:	3101      	adds	r1, #1
 80086fe:	f7ff ff79 	bl	80085f4 <_Balloc>
 8008702:	4680      	mov	r8, r0
 8008704:	b928      	cbnz	r0, 8008712 <__multadd+0x5a>
 8008706:	4602      	mov	r2, r0
 8008708:	21b5      	movs	r1, #181	; 0xb5
 800870a:	4b0c      	ldr	r3, [pc, #48]	; (800873c <__multadd+0x84>)
 800870c:	480c      	ldr	r0, [pc, #48]	; (8008740 <__multadd+0x88>)
 800870e:	f000 fead 	bl	800946c <__assert_func>
 8008712:	6922      	ldr	r2, [r4, #16]
 8008714:	f104 010c 	add.w	r1, r4, #12
 8008718:	3202      	adds	r2, #2
 800871a:	0092      	lsls	r2, r2, #2
 800871c:	300c      	adds	r0, #12
 800871e:	f7ff ff5b 	bl	80085d8 <memcpy>
 8008722:	4621      	mov	r1, r4
 8008724:	4638      	mov	r0, r7
 8008726:	f7ff ffa5 	bl	8008674 <_Bfree>
 800872a:	4644      	mov	r4, r8
 800872c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008730:	3501      	adds	r5, #1
 8008732:	615e      	str	r6, [r3, #20]
 8008734:	6125      	str	r5, [r4, #16]
 8008736:	4620      	mov	r0, r4
 8008738:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800873c:	0800a278 	.word	0x0800a278
 8008740:	0800a304 	.word	0x0800a304

08008744 <__s2b>:
 8008744:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008748:	4615      	mov	r5, r2
 800874a:	2209      	movs	r2, #9
 800874c:	461f      	mov	r7, r3
 800874e:	3308      	adds	r3, #8
 8008750:	460c      	mov	r4, r1
 8008752:	fb93 f3f2 	sdiv	r3, r3, r2
 8008756:	4606      	mov	r6, r0
 8008758:	2201      	movs	r2, #1
 800875a:	2100      	movs	r1, #0
 800875c:	429a      	cmp	r2, r3
 800875e:	db09      	blt.n	8008774 <__s2b+0x30>
 8008760:	4630      	mov	r0, r6
 8008762:	f7ff ff47 	bl	80085f4 <_Balloc>
 8008766:	b940      	cbnz	r0, 800877a <__s2b+0x36>
 8008768:	4602      	mov	r2, r0
 800876a:	21ce      	movs	r1, #206	; 0xce
 800876c:	4b18      	ldr	r3, [pc, #96]	; (80087d0 <__s2b+0x8c>)
 800876e:	4819      	ldr	r0, [pc, #100]	; (80087d4 <__s2b+0x90>)
 8008770:	f000 fe7c 	bl	800946c <__assert_func>
 8008774:	0052      	lsls	r2, r2, #1
 8008776:	3101      	adds	r1, #1
 8008778:	e7f0      	b.n	800875c <__s2b+0x18>
 800877a:	9b08      	ldr	r3, [sp, #32]
 800877c:	2d09      	cmp	r5, #9
 800877e:	6143      	str	r3, [r0, #20]
 8008780:	f04f 0301 	mov.w	r3, #1
 8008784:	6103      	str	r3, [r0, #16]
 8008786:	dd16      	ble.n	80087b6 <__s2b+0x72>
 8008788:	f104 0909 	add.w	r9, r4, #9
 800878c:	46c8      	mov	r8, r9
 800878e:	442c      	add	r4, r5
 8008790:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008794:	4601      	mov	r1, r0
 8008796:	220a      	movs	r2, #10
 8008798:	4630      	mov	r0, r6
 800879a:	3b30      	subs	r3, #48	; 0x30
 800879c:	f7ff ff8c 	bl	80086b8 <__multadd>
 80087a0:	45a0      	cmp	r8, r4
 80087a2:	d1f5      	bne.n	8008790 <__s2b+0x4c>
 80087a4:	f1a5 0408 	sub.w	r4, r5, #8
 80087a8:	444c      	add	r4, r9
 80087aa:	1b2d      	subs	r5, r5, r4
 80087ac:	1963      	adds	r3, r4, r5
 80087ae:	42bb      	cmp	r3, r7
 80087b0:	db04      	blt.n	80087bc <__s2b+0x78>
 80087b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80087b6:	2509      	movs	r5, #9
 80087b8:	340a      	adds	r4, #10
 80087ba:	e7f6      	b.n	80087aa <__s2b+0x66>
 80087bc:	f814 3b01 	ldrb.w	r3, [r4], #1
 80087c0:	4601      	mov	r1, r0
 80087c2:	220a      	movs	r2, #10
 80087c4:	4630      	mov	r0, r6
 80087c6:	3b30      	subs	r3, #48	; 0x30
 80087c8:	f7ff ff76 	bl	80086b8 <__multadd>
 80087cc:	e7ee      	b.n	80087ac <__s2b+0x68>
 80087ce:	bf00      	nop
 80087d0:	0800a278 	.word	0x0800a278
 80087d4:	0800a304 	.word	0x0800a304

080087d8 <__hi0bits>:
 80087d8:	0c02      	lsrs	r2, r0, #16
 80087da:	0412      	lsls	r2, r2, #16
 80087dc:	4603      	mov	r3, r0
 80087de:	b9ca      	cbnz	r2, 8008814 <__hi0bits+0x3c>
 80087e0:	0403      	lsls	r3, r0, #16
 80087e2:	2010      	movs	r0, #16
 80087e4:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80087e8:	bf04      	itt	eq
 80087ea:	021b      	lsleq	r3, r3, #8
 80087ec:	3008      	addeq	r0, #8
 80087ee:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80087f2:	bf04      	itt	eq
 80087f4:	011b      	lsleq	r3, r3, #4
 80087f6:	3004      	addeq	r0, #4
 80087f8:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80087fc:	bf04      	itt	eq
 80087fe:	009b      	lsleq	r3, r3, #2
 8008800:	3002      	addeq	r0, #2
 8008802:	2b00      	cmp	r3, #0
 8008804:	db05      	blt.n	8008812 <__hi0bits+0x3a>
 8008806:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800880a:	f100 0001 	add.w	r0, r0, #1
 800880e:	bf08      	it	eq
 8008810:	2020      	moveq	r0, #32
 8008812:	4770      	bx	lr
 8008814:	2000      	movs	r0, #0
 8008816:	e7e5      	b.n	80087e4 <__hi0bits+0xc>

08008818 <__lo0bits>:
 8008818:	6803      	ldr	r3, [r0, #0]
 800881a:	4602      	mov	r2, r0
 800881c:	f013 0007 	ands.w	r0, r3, #7
 8008820:	d00b      	beq.n	800883a <__lo0bits+0x22>
 8008822:	07d9      	lsls	r1, r3, #31
 8008824:	d421      	bmi.n	800886a <__lo0bits+0x52>
 8008826:	0798      	lsls	r0, r3, #30
 8008828:	bf49      	itett	mi
 800882a:	085b      	lsrmi	r3, r3, #1
 800882c:	089b      	lsrpl	r3, r3, #2
 800882e:	2001      	movmi	r0, #1
 8008830:	6013      	strmi	r3, [r2, #0]
 8008832:	bf5c      	itt	pl
 8008834:	2002      	movpl	r0, #2
 8008836:	6013      	strpl	r3, [r2, #0]
 8008838:	4770      	bx	lr
 800883a:	b299      	uxth	r1, r3
 800883c:	b909      	cbnz	r1, 8008842 <__lo0bits+0x2a>
 800883e:	2010      	movs	r0, #16
 8008840:	0c1b      	lsrs	r3, r3, #16
 8008842:	b2d9      	uxtb	r1, r3
 8008844:	b909      	cbnz	r1, 800884a <__lo0bits+0x32>
 8008846:	3008      	adds	r0, #8
 8008848:	0a1b      	lsrs	r3, r3, #8
 800884a:	0719      	lsls	r1, r3, #28
 800884c:	bf04      	itt	eq
 800884e:	091b      	lsreq	r3, r3, #4
 8008850:	3004      	addeq	r0, #4
 8008852:	0799      	lsls	r1, r3, #30
 8008854:	bf04      	itt	eq
 8008856:	089b      	lsreq	r3, r3, #2
 8008858:	3002      	addeq	r0, #2
 800885a:	07d9      	lsls	r1, r3, #31
 800885c:	d403      	bmi.n	8008866 <__lo0bits+0x4e>
 800885e:	085b      	lsrs	r3, r3, #1
 8008860:	f100 0001 	add.w	r0, r0, #1
 8008864:	d003      	beq.n	800886e <__lo0bits+0x56>
 8008866:	6013      	str	r3, [r2, #0]
 8008868:	4770      	bx	lr
 800886a:	2000      	movs	r0, #0
 800886c:	4770      	bx	lr
 800886e:	2020      	movs	r0, #32
 8008870:	4770      	bx	lr
	...

08008874 <__i2b>:
 8008874:	b510      	push	{r4, lr}
 8008876:	460c      	mov	r4, r1
 8008878:	2101      	movs	r1, #1
 800887a:	f7ff febb 	bl	80085f4 <_Balloc>
 800887e:	4602      	mov	r2, r0
 8008880:	b928      	cbnz	r0, 800888e <__i2b+0x1a>
 8008882:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008886:	4b04      	ldr	r3, [pc, #16]	; (8008898 <__i2b+0x24>)
 8008888:	4804      	ldr	r0, [pc, #16]	; (800889c <__i2b+0x28>)
 800888a:	f000 fdef 	bl	800946c <__assert_func>
 800888e:	2301      	movs	r3, #1
 8008890:	6144      	str	r4, [r0, #20]
 8008892:	6103      	str	r3, [r0, #16]
 8008894:	bd10      	pop	{r4, pc}
 8008896:	bf00      	nop
 8008898:	0800a278 	.word	0x0800a278
 800889c:	0800a304 	.word	0x0800a304

080088a0 <__multiply>:
 80088a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088a4:	4691      	mov	r9, r2
 80088a6:	690a      	ldr	r2, [r1, #16]
 80088a8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80088ac:	460c      	mov	r4, r1
 80088ae:	429a      	cmp	r2, r3
 80088b0:	bfbe      	ittt	lt
 80088b2:	460b      	movlt	r3, r1
 80088b4:	464c      	movlt	r4, r9
 80088b6:	4699      	movlt	r9, r3
 80088b8:	6927      	ldr	r7, [r4, #16]
 80088ba:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80088be:	68a3      	ldr	r3, [r4, #8]
 80088c0:	6861      	ldr	r1, [r4, #4]
 80088c2:	eb07 060a 	add.w	r6, r7, sl
 80088c6:	42b3      	cmp	r3, r6
 80088c8:	b085      	sub	sp, #20
 80088ca:	bfb8      	it	lt
 80088cc:	3101      	addlt	r1, #1
 80088ce:	f7ff fe91 	bl	80085f4 <_Balloc>
 80088d2:	b930      	cbnz	r0, 80088e2 <__multiply+0x42>
 80088d4:	4602      	mov	r2, r0
 80088d6:	f240 115d 	movw	r1, #349	; 0x15d
 80088da:	4b43      	ldr	r3, [pc, #268]	; (80089e8 <__multiply+0x148>)
 80088dc:	4843      	ldr	r0, [pc, #268]	; (80089ec <__multiply+0x14c>)
 80088de:	f000 fdc5 	bl	800946c <__assert_func>
 80088e2:	f100 0514 	add.w	r5, r0, #20
 80088e6:	462b      	mov	r3, r5
 80088e8:	2200      	movs	r2, #0
 80088ea:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80088ee:	4543      	cmp	r3, r8
 80088f0:	d321      	bcc.n	8008936 <__multiply+0x96>
 80088f2:	f104 0314 	add.w	r3, r4, #20
 80088f6:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80088fa:	f109 0314 	add.w	r3, r9, #20
 80088fe:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008902:	9202      	str	r2, [sp, #8]
 8008904:	1b3a      	subs	r2, r7, r4
 8008906:	3a15      	subs	r2, #21
 8008908:	f022 0203 	bic.w	r2, r2, #3
 800890c:	3204      	adds	r2, #4
 800890e:	f104 0115 	add.w	r1, r4, #21
 8008912:	428f      	cmp	r7, r1
 8008914:	bf38      	it	cc
 8008916:	2204      	movcc	r2, #4
 8008918:	9201      	str	r2, [sp, #4]
 800891a:	9a02      	ldr	r2, [sp, #8]
 800891c:	9303      	str	r3, [sp, #12]
 800891e:	429a      	cmp	r2, r3
 8008920:	d80c      	bhi.n	800893c <__multiply+0x9c>
 8008922:	2e00      	cmp	r6, #0
 8008924:	dd03      	ble.n	800892e <__multiply+0x8e>
 8008926:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800892a:	2b00      	cmp	r3, #0
 800892c:	d059      	beq.n	80089e2 <__multiply+0x142>
 800892e:	6106      	str	r6, [r0, #16]
 8008930:	b005      	add	sp, #20
 8008932:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008936:	f843 2b04 	str.w	r2, [r3], #4
 800893a:	e7d8      	b.n	80088ee <__multiply+0x4e>
 800893c:	f8b3 a000 	ldrh.w	sl, [r3]
 8008940:	f1ba 0f00 	cmp.w	sl, #0
 8008944:	d023      	beq.n	800898e <__multiply+0xee>
 8008946:	46a9      	mov	r9, r5
 8008948:	f04f 0c00 	mov.w	ip, #0
 800894c:	f104 0e14 	add.w	lr, r4, #20
 8008950:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008954:	f8d9 1000 	ldr.w	r1, [r9]
 8008958:	fa1f fb82 	uxth.w	fp, r2
 800895c:	b289      	uxth	r1, r1
 800895e:	fb0a 110b 	mla	r1, sl, fp, r1
 8008962:	4461      	add	r1, ip
 8008964:	f8d9 c000 	ldr.w	ip, [r9]
 8008968:	0c12      	lsrs	r2, r2, #16
 800896a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800896e:	fb0a c202 	mla	r2, sl, r2, ip
 8008972:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008976:	b289      	uxth	r1, r1
 8008978:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800897c:	4577      	cmp	r7, lr
 800897e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008982:	f849 1b04 	str.w	r1, [r9], #4
 8008986:	d8e3      	bhi.n	8008950 <__multiply+0xb0>
 8008988:	9a01      	ldr	r2, [sp, #4]
 800898a:	f845 c002 	str.w	ip, [r5, r2]
 800898e:	9a03      	ldr	r2, [sp, #12]
 8008990:	3304      	adds	r3, #4
 8008992:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008996:	f1b9 0f00 	cmp.w	r9, #0
 800899a:	d020      	beq.n	80089de <__multiply+0x13e>
 800899c:	46ae      	mov	lr, r5
 800899e:	f04f 0a00 	mov.w	sl, #0
 80089a2:	6829      	ldr	r1, [r5, #0]
 80089a4:	f104 0c14 	add.w	ip, r4, #20
 80089a8:	f8bc b000 	ldrh.w	fp, [ip]
 80089ac:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80089b0:	b289      	uxth	r1, r1
 80089b2:	fb09 220b 	mla	r2, r9, fp, r2
 80089b6:	4492      	add	sl, r2
 80089b8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80089bc:	f84e 1b04 	str.w	r1, [lr], #4
 80089c0:	f85c 2b04 	ldr.w	r2, [ip], #4
 80089c4:	f8be 1000 	ldrh.w	r1, [lr]
 80089c8:	0c12      	lsrs	r2, r2, #16
 80089ca:	fb09 1102 	mla	r1, r9, r2, r1
 80089ce:	4567      	cmp	r7, ip
 80089d0:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80089d4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80089d8:	d8e6      	bhi.n	80089a8 <__multiply+0x108>
 80089da:	9a01      	ldr	r2, [sp, #4]
 80089dc:	50a9      	str	r1, [r5, r2]
 80089de:	3504      	adds	r5, #4
 80089e0:	e79b      	b.n	800891a <__multiply+0x7a>
 80089e2:	3e01      	subs	r6, #1
 80089e4:	e79d      	b.n	8008922 <__multiply+0x82>
 80089e6:	bf00      	nop
 80089e8:	0800a278 	.word	0x0800a278
 80089ec:	0800a304 	.word	0x0800a304

080089f0 <__pow5mult>:
 80089f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80089f4:	4615      	mov	r5, r2
 80089f6:	f012 0203 	ands.w	r2, r2, #3
 80089fa:	4606      	mov	r6, r0
 80089fc:	460f      	mov	r7, r1
 80089fe:	d007      	beq.n	8008a10 <__pow5mult+0x20>
 8008a00:	4c25      	ldr	r4, [pc, #148]	; (8008a98 <__pow5mult+0xa8>)
 8008a02:	3a01      	subs	r2, #1
 8008a04:	2300      	movs	r3, #0
 8008a06:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008a0a:	f7ff fe55 	bl	80086b8 <__multadd>
 8008a0e:	4607      	mov	r7, r0
 8008a10:	10ad      	asrs	r5, r5, #2
 8008a12:	d03d      	beq.n	8008a90 <__pow5mult+0xa0>
 8008a14:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008a16:	b97c      	cbnz	r4, 8008a38 <__pow5mult+0x48>
 8008a18:	2010      	movs	r0, #16
 8008a1a:	f7ff fdb5 	bl	8008588 <malloc>
 8008a1e:	4602      	mov	r2, r0
 8008a20:	6270      	str	r0, [r6, #36]	; 0x24
 8008a22:	b928      	cbnz	r0, 8008a30 <__pow5mult+0x40>
 8008a24:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008a28:	4b1c      	ldr	r3, [pc, #112]	; (8008a9c <__pow5mult+0xac>)
 8008a2a:	481d      	ldr	r0, [pc, #116]	; (8008aa0 <__pow5mult+0xb0>)
 8008a2c:	f000 fd1e 	bl	800946c <__assert_func>
 8008a30:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008a34:	6004      	str	r4, [r0, #0]
 8008a36:	60c4      	str	r4, [r0, #12]
 8008a38:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008a3c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008a40:	b94c      	cbnz	r4, 8008a56 <__pow5mult+0x66>
 8008a42:	f240 2171 	movw	r1, #625	; 0x271
 8008a46:	4630      	mov	r0, r6
 8008a48:	f7ff ff14 	bl	8008874 <__i2b>
 8008a4c:	2300      	movs	r3, #0
 8008a4e:	4604      	mov	r4, r0
 8008a50:	f8c8 0008 	str.w	r0, [r8, #8]
 8008a54:	6003      	str	r3, [r0, #0]
 8008a56:	f04f 0900 	mov.w	r9, #0
 8008a5a:	07eb      	lsls	r3, r5, #31
 8008a5c:	d50a      	bpl.n	8008a74 <__pow5mult+0x84>
 8008a5e:	4639      	mov	r1, r7
 8008a60:	4622      	mov	r2, r4
 8008a62:	4630      	mov	r0, r6
 8008a64:	f7ff ff1c 	bl	80088a0 <__multiply>
 8008a68:	4680      	mov	r8, r0
 8008a6a:	4639      	mov	r1, r7
 8008a6c:	4630      	mov	r0, r6
 8008a6e:	f7ff fe01 	bl	8008674 <_Bfree>
 8008a72:	4647      	mov	r7, r8
 8008a74:	106d      	asrs	r5, r5, #1
 8008a76:	d00b      	beq.n	8008a90 <__pow5mult+0xa0>
 8008a78:	6820      	ldr	r0, [r4, #0]
 8008a7a:	b938      	cbnz	r0, 8008a8c <__pow5mult+0x9c>
 8008a7c:	4622      	mov	r2, r4
 8008a7e:	4621      	mov	r1, r4
 8008a80:	4630      	mov	r0, r6
 8008a82:	f7ff ff0d 	bl	80088a0 <__multiply>
 8008a86:	6020      	str	r0, [r4, #0]
 8008a88:	f8c0 9000 	str.w	r9, [r0]
 8008a8c:	4604      	mov	r4, r0
 8008a8e:	e7e4      	b.n	8008a5a <__pow5mult+0x6a>
 8008a90:	4638      	mov	r0, r7
 8008a92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008a96:	bf00      	nop
 8008a98:	0800a450 	.word	0x0800a450
 8008a9c:	0800a206 	.word	0x0800a206
 8008aa0:	0800a304 	.word	0x0800a304

08008aa4 <__lshift>:
 8008aa4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008aa8:	460c      	mov	r4, r1
 8008aaa:	4607      	mov	r7, r0
 8008aac:	4691      	mov	r9, r2
 8008aae:	6923      	ldr	r3, [r4, #16]
 8008ab0:	6849      	ldr	r1, [r1, #4]
 8008ab2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008ab6:	68a3      	ldr	r3, [r4, #8]
 8008ab8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008abc:	f108 0601 	add.w	r6, r8, #1
 8008ac0:	42b3      	cmp	r3, r6
 8008ac2:	db0b      	blt.n	8008adc <__lshift+0x38>
 8008ac4:	4638      	mov	r0, r7
 8008ac6:	f7ff fd95 	bl	80085f4 <_Balloc>
 8008aca:	4605      	mov	r5, r0
 8008acc:	b948      	cbnz	r0, 8008ae2 <__lshift+0x3e>
 8008ace:	4602      	mov	r2, r0
 8008ad0:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008ad4:	4b29      	ldr	r3, [pc, #164]	; (8008b7c <__lshift+0xd8>)
 8008ad6:	482a      	ldr	r0, [pc, #168]	; (8008b80 <__lshift+0xdc>)
 8008ad8:	f000 fcc8 	bl	800946c <__assert_func>
 8008adc:	3101      	adds	r1, #1
 8008ade:	005b      	lsls	r3, r3, #1
 8008ae0:	e7ee      	b.n	8008ac0 <__lshift+0x1c>
 8008ae2:	2300      	movs	r3, #0
 8008ae4:	f100 0114 	add.w	r1, r0, #20
 8008ae8:	f100 0210 	add.w	r2, r0, #16
 8008aec:	4618      	mov	r0, r3
 8008aee:	4553      	cmp	r3, sl
 8008af0:	db37      	blt.n	8008b62 <__lshift+0xbe>
 8008af2:	6920      	ldr	r0, [r4, #16]
 8008af4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008af8:	f104 0314 	add.w	r3, r4, #20
 8008afc:	f019 091f 	ands.w	r9, r9, #31
 8008b00:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008b04:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8008b08:	d02f      	beq.n	8008b6a <__lshift+0xc6>
 8008b0a:	468a      	mov	sl, r1
 8008b0c:	f04f 0c00 	mov.w	ip, #0
 8008b10:	f1c9 0e20 	rsb	lr, r9, #32
 8008b14:	681a      	ldr	r2, [r3, #0]
 8008b16:	fa02 f209 	lsl.w	r2, r2, r9
 8008b1a:	ea42 020c 	orr.w	r2, r2, ip
 8008b1e:	f84a 2b04 	str.w	r2, [sl], #4
 8008b22:	f853 2b04 	ldr.w	r2, [r3], #4
 8008b26:	4298      	cmp	r0, r3
 8008b28:	fa22 fc0e 	lsr.w	ip, r2, lr
 8008b2c:	d8f2      	bhi.n	8008b14 <__lshift+0x70>
 8008b2e:	1b03      	subs	r3, r0, r4
 8008b30:	3b15      	subs	r3, #21
 8008b32:	f023 0303 	bic.w	r3, r3, #3
 8008b36:	3304      	adds	r3, #4
 8008b38:	f104 0215 	add.w	r2, r4, #21
 8008b3c:	4290      	cmp	r0, r2
 8008b3e:	bf38      	it	cc
 8008b40:	2304      	movcc	r3, #4
 8008b42:	f841 c003 	str.w	ip, [r1, r3]
 8008b46:	f1bc 0f00 	cmp.w	ip, #0
 8008b4a:	d001      	beq.n	8008b50 <__lshift+0xac>
 8008b4c:	f108 0602 	add.w	r6, r8, #2
 8008b50:	3e01      	subs	r6, #1
 8008b52:	4638      	mov	r0, r7
 8008b54:	4621      	mov	r1, r4
 8008b56:	612e      	str	r6, [r5, #16]
 8008b58:	f7ff fd8c 	bl	8008674 <_Bfree>
 8008b5c:	4628      	mov	r0, r5
 8008b5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b62:	f842 0f04 	str.w	r0, [r2, #4]!
 8008b66:	3301      	adds	r3, #1
 8008b68:	e7c1      	b.n	8008aee <__lshift+0x4a>
 8008b6a:	3904      	subs	r1, #4
 8008b6c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008b70:	4298      	cmp	r0, r3
 8008b72:	f841 2f04 	str.w	r2, [r1, #4]!
 8008b76:	d8f9      	bhi.n	8008b6c <__lshift+0xc8>
 8008b78:	e7ea      	b.n	8008b50 <__lshift+0xac>
 8008b7a:	bf00      	nop
 8008b7c:	0800a278 	.word	0x0800a278
 8008b80:	0800a304 	.word	0x0800a304

08008b84 <__mcmp>:
 8008b84:	4603      	mov	r3, r0
 8008b86:	690a      	ldr	r2, [r1, #16]
 8008b88:	6900      	ldr	r0, [r0, #16]
 8008b8a:	b530      	push	{r4, r5, lr}
 8008b8c:	1a80      	subs	r0, r0, r2
 8008b8e:	d10d      	bne.n	8008bac <__mcmp+0x28>
 8008b90:	3314      	adds	r3, #20
 8008b92:	3114      	adds	r1, #20
 8008b94:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008b98:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008b9c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008ba0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008ba4:	4295      	cmp	r5, r2
 8008ba6:	d002      	beq.n	8008bae <__mcmp+0x2a>
 8008ba8:	d304      	bcc.n	8008bb4 <__mcmp+0x30>
 8008baa:	2001      	movs	r0, #1
 8008bac:	bd30      	pop	{r4, r5, pc}
 8008bae:	42a3      	cmp	r3, r4
 8008bb0:	d3f4      	bcc.n	8008b9c <__mcmp+0x18>
 8008bb2:	e7fb      	b.n	8008bac <__mcmp+0x28>
 8008bb4:	f04f 30ff 	mov.w	r0, #4294967295
 8008bb8:	e7f8      	b.n	8008bac <__mcmp+0x28>
	...

08008bbc <__mdiff>:
 8008bbc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bc0:	460d      	mov	r5, r1
 8008bc2:	4607      	mov	r7, r0
 8008bc4:	4611      	mov	r1, r2
 8008bc6:	4628      	mov	r0, r5
 8008bc8:	4614      	mov	r4, r2
 8008bca:	f7ff ffdb 	bl	8008b84 <__mcmp>
 8008bce:	1e06      	subs	r6, r0, #0
 8008bd0:	d111      	bne.n	8008bf6 <__mdiff+0x3a>
 8008bd2:	4631      	mov	r1, r6
 8008bd4:	4638      	mov	r0, r7
 8008bd6:	f7ff fd0d 	bl	80085f4 <_Balloc>
 8008bda:	4602      	mov	r2, r0
 8008bdc:	b928      	cbnz	r0, 8008bea <__mdiff+0x2e>
 8008bde:	f240 2132 	movw	r1, #562	; 0x232
 8008be2:	4b3a      	ldr	r3, [pc, #232]	; (8008ccc <__mdiff+0x110>)
 8008be4:	483a      	ldr	r0, [pc, #232]	; (8008cd0 <__mdiff+0x114>)
 8008be6:	f000 fc41 	bl	800946c <__assert_func>
 8008bea:	2301      	movs	r3, #1
 8008bec:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8008bf0:	4610      	mov	r0, r2
 8008bf2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008bf6:	bfa4      	itt	ge
 8008bf8:	4623      	movge	r3, r4
 8008bfa:	462c      	movge	r4, r5
 8008bfc:	4638      	mov	r0, r7
 8008bfe:	6861      	ldr	r1, [r4, #4]
 8008c00:	bfa6      	itte	ge
 8008c02:	461d      	movge	r5, r3
 8008c04:	2600      	movge	r6, #0
 8008c06:	2601      	movlt	r6, #1
 8008c08:	f7ff fcf4 	bl	80085f4 <_Balloc>
 8008c0c:	4602      	mov	r2, r0
 8008c0e:	b918      	cbnz	r0, 8008c18 <__mdiff+0x5c>
 8008c10:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008c14:	4b2d      	ldr	r3, [pc, #180]	; (8008ccc <__mdiff+0x110>)
 8008c16:	e7e5      	b.n	8008be4 <__mdiff+0x28>
 8008c18:	f102 0814 	add.w	r8, r2, #20
 8008c1c:	46c2      	mov	sl, r8
 8008c1e:	f04f 0c00 	mov.w	ip, #0
 8008c22:	6927      	ldr	r7, [r4, #16]
 8008c24:	60c6      	str	r6, [r0, #12]
 8008c26:	692e      	ldr	r6, [r5, #16]
 8008c28:	f104 0014 	add.w	r0, r4, #20
 8008c2c:	f105 0914 	add.w	r9, r5, #20
 8008c30:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8008c34:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008c38:	3410      	adds	r4, #16
 8008c3a:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8008c3e:	f859 3b04 	ldr.w	r3, [r9], #4
 8008c42:	fa1f f18b 	uxth.w	r1, fp
 8008c46:	448c      	add	ip, r1
 8008c48:	b299      	uxth	r1, r3
 8008c4a:	0c1b      	lsrs	r3, r3, #16
 8008c4c:	ebac 0101 	sub.w	r1, ip, r1
 8008c50:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008c54:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8008c58:	b289      	uxth	r1, r1
 8008c5a:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8008c5e:	454e      	cmp	r6, r9
 8008c60:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8008c64:	f84a 3b04 	str.w	r3, [sl], #4
 8008c68:	d8e7      	bhi.n	8008c3a <__mdiff+0x7e>
 8008c6a:	1b73      	subs	r3, r6, r5
 8008c6c:	3b15      	subs	r3, #21
 8008c6e:	f023 0303 	bic.w	r3, r3, #3
 8008c72:	3515      	adds	r5, #21
 8008c74:	3304      	adds	r3, #4
 8008c76:	42ae      	cmp	r6, r5
 8008c78:	bf38      	it	cc
 8008c7a:	2304      	movcc	r3, #4
 8008c7c:	4418      	add	r0, r3
 8008c7e:	4443      	add	r3, r8
 8008c80:	461e      	mov	r6, r3
 8008c82:	4605      	mov	r5, r0
 8008c84:	4575      	cmp	r5, lr
 8008c86:	d30e      	bcc.n	8008ca6 <__mdiff+0xea>
 8008c88:	f10e 0103 	add.w	r1, lr, #3
 8008c8c:	1a09      	subs	r1, r1, r0
 8008c8e:	f021 0103 	bic.w	r1, r1, #3
 8008c92:	3803      	subs	r0, #3
 8008c94:	4586      	cmp	lr, r0
 8008c96:	bf38      	it	cc
 8008c98:	2100      	movcc	r1, #0
 8008c9a:	4419      	add	r1, r3
 8008c9c:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8008ca0:	b18b      	cbz	r3, 8008cc6 <__mdiff+0x10a>
 8008ca2:	6117      	str	r7, [r2, #16]
 8008ca4:	e7a4      	b.n	8008bf0 <__mdiff+0x34>
 8008ca6:	f855 8b04 	ldr.w	r8, [r5], #4
 8008caa:	fa1f f188 	uxth.w	r1, r8
 8008cae:	4461      	add	r1, ip
 8008cb0:	140c      	asrs	r4, r1, #16
 8008cb2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008cb6:	b289      	uxth	r1, r1
 8008cb8:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8008cbc:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8008cc0:	f846 1b04 	str.w	r1, [r6], #4
 8008cc4:	e7de      	b.n	8008c84 <__mdiff+0xc8>
 8008cc6:	3f01      	subs	r7, #1
 8008cc8:	e7e8      	b.n	8008c9c <__mdiff+0xe0>
 8008cca:	bf00      	nop
 8008ccc:	0800a278 	.word	0x0800a278
 8008cd0:	0800a304 	.word	0x0800a304

08008cd4 <__ulp>:
 8008cd4:	4b11      	ldr	r3, [pc, #68]	; (8008d1c <__ulp+0x48>)
 8008cd6:	400b      	ands	r3, r1
 8008cd8:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	dd02      	ble.n	8008ce6 <__ulp+0x12>
 8008ce0:	2000      	movs	r0, #0
 8008ce2:	4619      	mov	r1, r3
 8008ce4:	4770      	bx	lr
 8008ce6:	425b      	negs	r3, r3
 8008ce8:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8008cec:	f04f 0000 	mov.w	r0, #0
 8008cf0:	f04f 0100 	mov.w	r1, #0
 8008cf4:	ea4f 5223 	mov.w	r2, r3, asr #20
 8008cf8:	da04      	bge.n	8008d04 <__ulp+0x30>
 8008cfa:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8008cfe:	fa43 f102 	asr.w	r1, r3, r2
 8008d02:	4770      	bx	lr
 8008d04:	f1a2 0314 	sub.w	r3, r2, #20
 8008d08:	2b1e      	cmp	r3, #30
 8008d0a:	bfd6      	itet	le
 8008d0c:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8008d10:	2301      	movgt	r3, #1
 8008d12:	fa22 f303 	lsrle.w	r3, r2, r3
 8008d16:	4618      	mov	r0, r3
 8008d18:	4770      	bx	lr
 8008d1a:	bf00      	nop
 8008d1c:	7ff00000 	.word	0x7ff00000

08008d20 <__b2d>:
 8008d20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008d24:	6907      	ldr	r7, [r0, #16]
 8008d26:	f100 0914 	add.w	r9, r0, #20
 8008d2a:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 8008d2e:	f857 6c04 	ldr.w	r6, [r7, #-4]
 8008d32:	f1a7 0804 	sub.w	r8, r7, #4
 8008d36:	4630      	mov	r0, r6
 8008d38:	f7ff fd4e 	bl	80087d8 <__hi0bits>
 8008d3c:	f1c0 0320 	rsb	r3, r0, #32
 8008d40:	280a      	cmp	r0, #10
 8008d42:	600b      	str	r3, [r1, #0]
 8008d44:	491f      	ldr	r1, [pc, #124]	; (8008dc4 <__b2d+0xa4>)
 8008d46:	dc17      	bgt.n	8008d78 <__b2d+0x58>
 8008d48:	45c1      	cmp	r9, r8
 8008d4a:	bf28      	it	cs
 8008d4c:	2200      	movcs	r2, #0
 8008d4e:	f1c0 0c0b 	rsb	ip, r0, #11
 8008d52:	fa26 f30c 	lsr.w	r3, r6, ip
 8008d56:	bf38      	it	cc
 8008d58:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8008d5c:	ea43 0501 	orr.w	r5, r3, r1
 8008d60:	f100 0315 	add.w	r3, r0, #21
 8008d64:	fa06 f303 	lsl.w	r3, r6, r3
 8008d68:	fa22 f20c 	lsr.w	r2, r2, ip
 8008d6c:	ea43 0402 	orr.w	r4, r3, r2
 8008d70:	4620      	mov	r0, r4
 8008d72:	4629      	mov	r1, r5
 8008d74:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008d78:	45c1      	cmp	r9, r8
 8008d7a:	bf2e      	itee	cs
 8008d7c:	2200      	movcs	r2, #0
 8008d7e:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8008d82:	f1a7 0808 	subcc.w	r8, r7, #8
 8008d86:	f1b0 030b 	subs.w	r3, r0, #11
 8008d8a:	d016      	beq.n	8008dba <__b2d+0x9a>
 8008d8c:	f1c3 0720 	rsb	r7, r3, #32
 8008d90:	fa22 f107 	lsr.w	r1, r2, r7
 8008d94:	45c8      	cmp	r8, r9
 8008d96:	fa06 f603 	lsl.w	r6, r6, r3
 8008d9a:	ea46 0601 	orr.w	r6, r6, r1
 8008d9e:	bf94      	ite	ls
 8008da0:	2100      	movls	r1, #0
 8008da2:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 8008da6:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 8008daa:	fa02 f003 	lsl.w	r0, r2, r3
 8008dae:	40f9      	lsrs	r1, r7
 8008db0:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8008db4:	ea40 0401 	orr.w	r4, r0, r1
 8008db8:	e7da      	b.n	8008d70 <__b2d+0x50>
 8008dba:	4614      	mov	r4, r2
 8008dbc:	ea46 0501 	orr.w	r5, r6, r1
 8008dc0:	e7d6      	b.n	8008d70 <__b2d+0x50>
 8008dc2:	bf00      	nop
 8008dc4:	3ff00000 	.word	0x3ff00000

08008dc8 <__d2b>:
 8008dc8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8008dcc:	2101      	movs	r1, #1
 8008dce:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8008dd2:	4690      	mov	r8, r2
 8008dd4:	461d      	mov	r5, r3
 8008dd6:	f7ff fc0d 	bl	80085f4 <_Balloc>
 8008dda:	4604      	mov	r4, r0
 8008ddc:	b930      	cbnz	r0, 8008dec <__d2b+0x24>
 8008dde:	4602      	mov	r2, r0
 8008de0:	f240 310a 	movw	r1, #778	; 0x30a
 8008de4:	4b24      	ldr	r3, [pc, #144]	; (8008e78 <__d2b+0xb0>)
 8008de6:	4825      	ldr	r0, [pc, #148]	; (8008e7c <__d2b+0xb4>)
 8008de8:	f000 fb40 	bl	800946c <__assert_func>
 8008dec:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8008df0:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8008df4:	bb2d      	cbnz	r5, 8008e42 <__d2b+0x7a>
 8008df6:	9301      	str	r3, [sp, #4]
 8008df8:	f1b8 0300 	subs.w	r3, r8, #0
 8008dfc:	d026      	beq.n	8008e4c <__d2b+0x84>
 8008dfe:	4668      	mov	r0, sp
 8008e00:	9300      	str	r3, [sp, #0]
 8008e02:	f7ff fd09 	bl	8008818 <__lo0bits>
 8008e06:	9900      	ldr	r1, [sp, #0]
 8008e08:	b1f0      	cbz	r0, 8008e48 <__d2b+0x80>
 8008e0a:	9a01      	ldr	r2, [sp, #4]
 8008e0c:	f1c0 0320 	rsb	r3, r0, #32
 8008e10:	fa02 f303 	lsl.w	r3, r2, r3
 8008e14:	430b      	orrs	r3, r1
 8008e16:	40c2      	lsrs	r2, r0
 8008e18:	6163      	str	r3, [r4, #20]
 8008e1a:	9201      	str	r2, [sp, #4]
 8008e1c:	9b01      	ldr	r3, [sp, #4]
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	bf14      	ite	ne
 8008e22:	2102      	movne	r1, #2
 8008e24:	2101      	moveq	r1, #1
 8008e26:	61a3      	str	r3, [r4, #24]
 8008e28:	6121      	str	r1, [r4, #16]
 8008e2a:	b1c5      	cbz	r5, 8008e5e <__d2b+0x96>
 8008e2c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008e30:	4405      	add	r5, r0
 8008e32:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008e36:	603d      	str	r5, [r7, #0]
 8008e38:	6030      	str	r0, [r6, #0]
 8008e3a:	4620      	mov	r0, r4
 8008e3c:	b002      	add	sp, #8
 8008e3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e42:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008e46:	e7d6      	b.n	8008df6 <__d2b+0x2e>
 8008e48:	6161      	str	r1, [r4, #20]
 8008e4a:	e7e7      	b.n	8008e1c <__d2b+0x54>
 8008e4c:	a801      	add	r0, sp, #4
 8008e4e:	f7ff fce3 	bl	8008818 <__lo0bits>
 8008e52:	2101      	movs	r1, #1
 8008e54:	9b01      	ldr	r3, [sp, #4]
 8008e56:	6121      	str	r1, [r4, #16]
 8008e58:	6163      	str	r3, [r4, #20]
 8008e5a:	3020      	adds	r0, #32
 8008e5c:	e7e5      	b.n	8008e2a <__d2b+0x62>
 8008e5e:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8008e62:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008e66:	6038      	str	r0, [r7, #0]
 8008e68:	6918      	ldr	r0, [r3, #16]
 8008e6a:	f7ff fcb5 	bl	80087d8 <__hi0bits>
 8008e6e:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8008e72:	6031      	str	r1, [r6, #0]
 8008e74:	e7e1      	b.n	8008e3a <__d2b+0x72>
 8008e76:	bf00      	nop
 8008e78:	0800a278 	.word	0x0800a278
 8008e7c:	0800a304 	.word	0x0800a304

08008e80 <__ratio>:
 8008e80:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e84:	4688      	mov	r8, r1
 8008e86:	4669      	mov	r1, sp
 8008e88:	4681      	mov	r9, r0
 8008e8a:	f7ff ff49 	bl	8008d20 <__b2d>
 8008e8e:	460f      	mov	r7, r1
 8008e90:	4604      	mov	r4, r0
 8008e92:	460d      	mov	r5, r1
 8008e94:	4640      	mov	r0, r8
 8008e96:	a901      	add	r1, sp, #4
 8008e98:	f7ff ff42 	bl	8008d20 <__b2d>
 8008e9c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008ea0:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8008ea4:	468b      	mov	fp, r1
 8008ea6:	eba3 0c02 	sub.w	ip, r3, r2
 8008eaa:	e9dd 3200 	ldrd	r3, r2, [sp]
 8008eae:	1a9b      	subs	r3, r3, r2
 8008eb0:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	bfd5      	itete	le
 8008eb8:	460a      	movle	r2, r1
 8008eba:	462a      	movgt	r2, r5
 8008ebc:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008ec0:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8008ec4:	bfd8      	it	le
 8008ec6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8008eca:	465b      	mov	r3, fp
 8008ecc:	4602      	mov	r2, r0
 8008ece:	4639      	mov	r1, r7
 8008ed0:	4620      	mov	r0, r4
 8008ed2:	f7f7 fc2b 	bl	800072c <__aeabi_ddiv>
 8008ed6:	b003      	add	sp, #12
 8008ed8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008edc <__copybits>:
 8008edc:	3901      	subs	r1, #1
 8008ede:	b570      	push	{r4, r5, r6, lr}
 8008ee0:	1149      	asrs	r1, r1, #5
 8008ee2:	6914      	ldr	r4, [r2, #16]
 8008ee4:	3101      	adds	r1, #1
 8008ee6:	f102 0314 	add.w	r3, r2, #20
 8008eea:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008eee:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008ef2:	1f05      	subs	r5, r0, #4
 8008ef4:	42a3      	cmp	r3, r4
 8008ef6:	d30c      	bcc.n	8008f12 <__copybits+0x36>
 8008ef8:	1aa3      	subs	r3, r4, r2
 8008efa:	3b11      	subs	r3, #17
 8008efc:	f023 0303 	bic.w	r3, r3, #3
 8008f00:	3211      	adds	r2, #17
 8008f02:	42a2      	cmp	r2, r4
 8008f04:	bf88      	it	hi
 8008f06:	2300      	movhi	r3, #0
 8008f08:	4418      	add	r0, r3
 8008f0a:	2300      	movs	r3, #0
 8008f0c:	4288      	cmp	r0, r1
 8008f0e:	d305      	bcc.n	8008f1c <__copybits+0x40>
 8008f10:	bd70      	pop	{r4, r5, r6, pc}
 8008f12:	f853 6b04 	ldr.w	r6, [r3], #4
 8008f16:	f845 6f04 	str.w	r6, [r5, #4]!
 8008f1a:	e7eb      	b.n	8008ef4 <__copybits+0x18>
 8008f1c:	f840 3b04 	str.w	r3, [r0], #4
 8008f20:	e7f4      	b.n	8008f0c <__copybits+0x30>

08008f22 <__any_on>:
 8008f22:	f100 0214 	add.w	r2, r0, #20
 8008f26:	6900      	ldr	r0, [r0, #16]
 8008f28:	114b      	asrs	r3, r1, #5
 8008f2a:	4298      	cmp	r0, r3
 8008f2c:	b510      	push	{r4, lr}
 8008f2e:	db11      	blt.n	8008f54 <__any_on+0x32>
 8008f30:	dd0a      	ble.n	8008f48 <__any_on+0x26>
 8008f32:	f011 011f 	ands.w	r1, r1, #31
 8008f36:	d007      	beq.n	8008f48 <__any_on+0x26>
 8008f38:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008f3c:	fa24 f001 	lsr.w	r0, r4, r1
 8008f40:	fa00 f101 	lsl.w	r1, r0, r1
 8008f44:	428c      	cmp	r4, r1
 8008f46:	d10b      	bne.n	8008f60 <__any_on+0x3e>
 8008f48:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008f4c:	4293      	cmp	r3, r2
 8008f4e:	d803      	bhi.n	8008f58 <__any_on+0x36>
 8008f50:	2000      	movs	r0, #0
 8008f52:	bd10      	pop	{r4, pc}
 8008f54:	4603      	mov	r3, r0
 8008f56:	e7f7      	b.n	8008f48 <__any_on+0x26>
 8008f58:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008f5c:	2900      	cmp	r1, #0
 8008f5e:	d0f5      	beq.n	8008f4c <__any_on+0x2a>
 8008f60:	2001      	movs	r0, #1
 8008f62:	e7f6      	b.n	8008f52 <__any_on+0x30>

08008f64 <_calloc_r>:
 8008f64:	b570      	push	{r4, r5, r6, lr}
 8008f66:	fba1 5402 	umull	r5, r4, r1, r2
 8008f6a:	b934      	cbnz	r4, 8008f7a <_calloc_r+0x16>
 8008f6c:	4629      	mov	r1, r5
 8008f6e:	f000 f875 	bl	800905c <_malloc_r>
 8008f72:	4606      	mov	r6, r0
 8008f74:	b928      	cbnz	r0, 8008f82 <_calloc_r+0x1e>
 8008f76:	4630      	mov	r0, r6
 8008f78:	bd70      	pop	{r4, r5, r6, pc}
 8008f7a:	220c      	movs	r2, #12
 8008f7c:	2600      	movs	r6, #0
 8008f7e:	6002      	str	r2, [r0, #0]
 8008f80:	e7f9      	b.n	8008f76 <_calloc_r+0x12>
 8008f82:	462a      	mov	r2, r5
 8008f84:	4621      	mov	r1, r4
 8008f86:	f7fc fbf3 	bl	8005770 <memset>
 8008f8a:	e7f4      	b.n	8008f76 <_calloc_r+0x12>

08008f8c <_free_r>:
 8008f8c:	b538      	push	{r3, r4, r5, lr}
 8008f8e:	4605      	mov	r5, r0
 8008f90:	2900      	cmp	r1, #0
 8008f92:	d040      	beq.n	8009016 <_free_r+0x8a>
 8008f94:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008f98:	1f0c      	subs	r4, r1, #4
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	bfb8      	it	lt
 8008f9e:	18e4      	addlt	r4, r4, r3
 8008fa0:	f000 faae 	bl	8009500 <__malloc_lock>
 8008fa4:	4a1c      	ldr	r2, [pc, #112]	; (8009018 <_free_r+0x8c>)
 8008fa6:	6813      	ldr	r3, [r2, #0]
 8008fa8:	b933      	cbnz	r3, 8008fb8 <_free_r+0x2c>
 8008faa:	6063      	str	r3, [r4, #4]
 8008fac:	6014      	str	r4, [r2, #0]
 8008fae:	4628      	mov	r0, r5
 8008fb0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008fb4:	f000 baaa 	b.w	800950c <__malloc_unlock>
 8008fb8:	42a3      	cmp	r3, r4
 8008fba:	d908      	bls.n	8008fce <_free_r+0x42>
 8008fbc:	6820      	ldr	r0, [r4, #0]
 8008fbe:	1821      	adds	r1, r4, r0
 8008fc0:	428b      	cmp	r3, r1
 8008fc2:	bf01      	itttt	eq
 8008fc4:	6819      	ldreq	r1, [r3, #0]
 8008fc6:	685b      	ldreq	r3, [r3, #4]
 8008fc8:	1809      	addeq	r1, r1, r0
 8008fca:	6021      	streq	r1, [r4, #0]
 8008fcc:	e7ed      	b.n	8008faa <_free_r+0x1e>
 8008fce:	461a      	mov	r2, r3
 8008fd0:	685b      	ldr	r3, [r3, #4]
 8008fd2:	b10b      	cbz	r3, 8008fd8 <_free_r+0x4c>
 8008fd4:	42a3      	cmp	r3, r4
 8008fd6:	d9fa      	bls.n	8008fce <_free_r+0x42>
 8008fd8:	6811      	ldr	r1, [r2, #0]
 8008fda:	1850      	adds	r0, r2, r1
 8008fdc:	42a0      	cmp	r0, r4
 8008fde:	d10b      	bne.n	8008ff8 <_free_r+0x6c>
 8008fe0:	6820      	ldr	r0, [r4, #0]
 8008fe2:	4401      	add	r1, r0
 8008fe4:	1850      	adds	r0, r2, r1
 8008fe6:	4283      	cmp	r3, r0
 8008fe8:	6011      	str	r1, [r2, #0]
 8008fea:	d1e0      	bne.n	8008fae <_free_r+0x22>
 8008fec:	6818      	ldr	r0, [r3, #0]
 8008fee:	685b      	ldr	r3, [r3, #4]
 8008ff0:	4401      	add	r1, r0
 8008ff2:	6011      	str	r1, [r2, #0]
 8008ff4:	6053      	str	r3, [r2, #4]
 8008ff6:	e7da      	b.n	8008fae <_free_r+0x22>
 8008ff8:	d902      	bls.n	8009000 <_free_r+0x74>
 8008ffa:	230c      	movs	r3, #12
 8008ffc:	602b      	str	r3, [r5, #0]
 8008ffe:	e7d6      	b.n	8008fae <_free_r+0x22>
 8009000:	6820      	ldr	r0, [r4, #0]
 8009002:	1821      	adds	r1, r4, r0
 8009004:	428b      	cmp	r3, r1
 8009006:	bf01      	itttt	eq
 8009008:	6819      	ldreq	r1, [r3, #0]
 800900a:	685b      	ldreq	r3, [r3, #4]
 800900c:	1809      	addeq	r1, r1, r0
 800900e:	6021      	streq	r1, [r4, #0]
 8009010:	6063      	str	r3, [r4, #4]
 8009012:	6054      	str	r4, [r2, #4]
 8009014:	e7cb      	b.n	8008fae <_free_r+0x22>
 8009016:	bd38      	pop	{r3, r4, r5, pc}
 8009018:	20000418 	.word	0x20000418

0800901c <sbrk_aligned>:
 800901c:	b570      	push	{r4, r5, r6, lr}
 800901e:	4e0e      	ldr	r6, [pc, #56]	; (8009058 <sbrk_aligned+0x3c>)
 8009020:	460c      	mov	r4, r1
 8009022:	6831      	ldr	r1, [r6, #0]
 8009024:	4605      	mov	r5, r0
 8009026:	b911      	cbnz	r1, 800902e <sbrk_aligned+0x12>
 8009028:	f000 f9ee 	bl	8009408 <_sbrk_r>
 800902c:	6030      	str	r0, [r6, #0]
 800902e:	4621      	mov	r1, r4
 8009030:	4628      	mov	r0, r5
 8009032:	f000 f9e9 	bl	8009408 <_sbrk_r>
 8009036:	1c43      	adds	r3, r0, #1
 8009038:	d00a      	beq.n	8009050 <sbrk_aligned+0x34>
 800903a:	1cc4      	adds	r4, r0, #3
 800903c:	f024 0403 	bic.w	r4, r4, #3
 8009040:	42a0      	cmp	r0, r4
 8009042:	d007      	beq.n	8009054 <sbrk_aligned+0x38>
 8009044:	1a21      	subs	r1, r4, r0
 8009046:	4628      	mov	r0, r5
 8009048:	f000 f9de 	bl	8009408 <_sbrk_r>
 800904c:	3001      	adds	r0, #1
 800904e:	d101      	bne.n	8009054 <sbrk_aligned+0x38>
 8009050:	f04f 34ff 	mov.w	r4, #4294967295
 8009054:	4620      	mov	r0, r4
 8009056:	bd70      	pop	{r4, r5, r6, pc}
 8009058:	2000041c 	.word	0x2000041c

0800905c <_malloc_r>:
 800905c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009060:	1ccd      	adds	r5, r1, #3
 8009062:	f025 0503 	bic.w	r5, r5, #3
 8009066:	3508      	adds	r5, #8
 8009068:	2d0c      	cmp	r5, #12
 800906a:	bf38      	it	cc
 800906c:	250c      	movcc	r5, #12
 800906e:	2d00      	cmp	r5, #0
 8009070:	4607      	mov	r7, r0
 8009072:	db01      	blt.n	8009078 <_malloc_r+0x1c>
 8009074:	42a9      	cmp	r1, r5
 8009076:	d905      	bls.n	8009084 <_malloc_r+0x28>
 8009078:	230c      	movs	r3, #12
 800907a:	2600      	movs	r6, #0
 800907c:	603b      	str	r3, [r7, #0]
 800907e:	4630      	mov	r0, r6
 8009080:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009084:	4e2e      	ldr	r6, [pc, #184]	; (8009140 <_malloc_r+0xe4>)
 8009086:	f000 fa3b 	bl	8009500 <__malloc_lock>
 800908a:	6833      	ldr	r3, [r6, #0]
 800908c:	461c      	mov	r4, r3
 800908e:	bb34      	cbnz	r4, 80090de <_malloc_r+0x82>
 8009090:	4629      	mov	r1, r5
 8009092:	4638      	mov	r0, r7
 8009094:	f7ff ffc2 	bl	800901c <sbrk_aligned>
 8009098:	1c43      	adds	r3, r0, #1
 800909a:	4604      	mov	r4, r0
 800909c:	d14d      	bne.n	800913a <_malloc_r+0xde>
 800909e:	6834      	ldr	r4, [r6, #0]
 80090a0:	4626      	mov	r6, r4
 80090a2:	2e00      	cmp	r6, #0
 80090a4:	d140      	bne.n	8009128 <_malloc_r+0xcc>
 80090a6:	6823      	ldr	r3, [r4, #0]
 80090a8:	4631      	mov	r1, r6
 80090aa:	4638      	mov	r0, r7
 80090ac:	eb04 0803 	add.w	r8, r4, r3
 80090b0:	f000 f9aa 	bl	8009408 <_sbrk_r>
 80090b4:	4580      	cmp	r8, r0
 80090b6:	d13a      	bne.n	800912e <_malloc_r+0xd2>
 80090b8:	6821      	ldr	r1, [r4, #0]
 80090ba:	3503      	adds	r5, #3
 80090bc:	1a6d      	subs	r5, r5, r1
 80090be:	f025 0503 	bic.w	r5, r5, #3
 80090c2:	3508      	adds	r5, #8
 80090c4:	2d0c      	cmp	r5, #12
 80090c6:	bf38      	it	cc
 80090c8:	250c      	movcc	r5, #12
 80090ca:	4638      	mov	r0, r7
 80090cc:	4629      	mov	r1, r5
 80090ce:	f7ff ffa5 	bl	800901c <sbrk_aligned>
 80090d2:	3001      	adds	r0, #1
 80090d4:	d02b      	beq.n	800912e <_malloc_r+0xd2>
 80090d6:	6823      	ldr	r3, [r4, #0]
 80090d8:	442b      	add	r3, r5
 80090da:	6023      	str	r3, [r4, #0]
 80090dc:	e00e      	b.n	80090fc <_malloc_r+0xa0>
 80090de:	6822      	ldr	r2, [r4, #0]
 80090e0:	1b52      	subs	r2, r2, r5
 80090e2:	d41e      	bmi.n	8009122 <_malloc_r+0xc6>
 80090e4:	2a0b      	cmp	r2, #11
 80090e6:	d916      	bls.n	8009116 <_malloc_r+0xba>
 80090e8:	1961      	adds	r1, r4, r5
 80090ea:	42a3      	cmp	r3, r4
 80090ec:	6025      	str	r5, [r4, #0]
 80090ee:	bf18      	it	ne
 80090f0:	6059      	strne	r1, [r3, #4]
 80090f2:	6863      	ldr	r3, [r4, #4]
 80090f4:	bf08      	it	eq
 80090f6:	6031      	streq	r1, [r6, #0]
 80090f8:	5162      	str	r2, [r4, r5]
 80090fa:	604b      	str	r3, [r1, #4]
 80090fc:	4638      	mov	r0, r7
 80090fe:	f104 060b 	add.w	r6, r4, #11
 8009102:	f000 fa03 	bl	800950c <__malloc_unlock>
 8009106:	f026 0607 	bic.w	r6, r6, #7
 800910a:	1d23      	adds	r3, r4, #4
 800910c:	1af2      	subs	r2, r6, r3
 800910e:	d0b6      	beq.n	800907e <_malloc_r+0x22>
 8009110:	1b9b      	subs	r3, r3, r6
 8009112:	50a3      	str	r3, [r4, r2]
 8009114:	e7b3      	b.n	800907e <_malloc_r+0x22>
 8009116:	6862      	ldr	r2, [r4, #4]
 8009118:	42a3      	cmp	r3, r4
 800911a:	bf0c      	ite	eq
 800911c:	6032      	streq	r2, [r6, #0]
 800911e:	605a      	strne	r2, [r3, #4]
 8009120:	e7ec      	b.n	80090fc <_malloc_r+0xa0>
 8009122:	4623      	mov	r3, r4
 8009124:	6864      	ldr	r4, [r4, #4]
 8009126:	e7b2      	b.n	800908e <_malloc_r+0x32>
 8009128:	4634      	mov	r4, r6
 800912a:	6876      	ldr	r6, [r6, #4]
 800912c:	e7b9      	b.n	80090a2 <_malloc_r+0x46>
 800912e:	230c      	movs	r3, #12
 8009130:	4638      	mov	r0, r7
 8009132:	603b      	str	r3, [r7, #0]
 8009134:	f000 f9ea 	bl	800950c <__malloc_unlock>
 8009138:	e7a1      	b.n	800907e <_malloc_r+0x22>
 800913a:	6025      	str	r5, [r4, #0]
 800913c:	e7de      	b.n	80090fc <_malloc_r+0xa0>
 800913e:	bf00      	nop
 8009140:	20000418 	.word	0x20000418

08009144 <__ssputs_r>:
 8009144:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009148:	688e      	ldr	r6, [r1, #8]
 800914a:	4682      	mov	sl, r0
 800914c:	429e      	cmp	r6, r3
 800914e:	460c      	mov	r4, r1
 8009150:	4690      	mov	r8, r2
 8009152:	461f      	mov	r7, r3
 8009154:	d838      	bhi.n	80091c8 <__ssputs_r+0x84>
 8009156:	898a      	ldrh	r2, [r1, #12]
 8009158:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800915c:	d032      	beq.n	80091c4 <__ssputs_r+0x80>
 800915e:	6825      	ldr	r5, [r4, #0]
 8009160:	6909      	ldr	r1, [r1, #16]
 8009162:	3301      	adds	r3, #1
 8009164:	eba5 0901 	sub.w	r9, r5, r1
 8009168:	6965      	ldr	r5, [r4, #20]
 800916a:	444b      	add	r3, r9
 800916c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009170:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009174:	106d      	asrs	r5, r5, #1
 8009176:	429d      	cmp	r5, r3
 8009178:	bf38      	it	cc
 800917a:	461d      	movcc	r5, r3
 800917c:	0553      	lsls	r3, r2, #21
 800917e:	d531      	bpl.n	80091e4 <__ssputs_r+0xa0>
 8009180:	4629      	mov	r1, r5
 8009182:	f7ff ff6b 	bl	800905c <_malloc_r>
 8009186:	4606      	mov	r6, r0
 8009188:	b950      	cbnz	r0, 80091a0 <__ssputs_r+0x5c>
 800918a:	230c      	movs	r3, #12
 800918c:	f04f 30ff 	mov.w	r0, #4294967295
 8009190:	f8ca 3000 	str.w	r3, [sl]
 8009194:	89a3      	ldrh	r3, [r4, #12]
 8009196:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800919a:	81a3      	strh	r3, [r4, #12]
 800919c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80091a0:	464a      	mov	r2, r9
 80091a2:	6921      	ldr	r1, [r4, #16]
 80091a4:	f7ff fa18 	bl	80085d8 <memcpy>
 80091a8:	89a3      	ldrh	r3, [r4, #12]
 80091aa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80091ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80091b2:	81a3      	strh	r3, [r4, #12]
 80091b4:	6126      	str	r6, [r4, #16]
 80091b6:	444e      	add	r6, r9
 80091b8:	6026      	str	r6, [r4, #0]
 80091ba:	463e      	mov	r6, r7
 80091bc:	6165      	str	r5, [r4, #20]
 80091be:	eba5 0509 	sub.w	r5, r5, r9
 80091c2:	60a5      	str	r5, [r4, #8]
 80091c4:	42be      	cmp	r6, r7
 80091c6:	d900      	bls.n	80091ca <__ssputs_r+0x86>
 80091c8:	463e      	mov	r6, r7
 80091ca:	4632      	mov	r2, r6
 80091cc:	4641      	mov	r1, r8
 80091ce:	6820      	ldr	r0, [r4, #0]
 80091d0:	f000 f97c 	bl	80094cc <memmove>
 80091d4:	68a3      	ldr	r3, [r4, #8]
 80091d6:	2000      	movs	r0, #0
 80091d8:	1b9b      	subs	r3, r3, r6
 80091da:	60a3      	str	r3, [r4, #8]
 80091dc:	6823      	ldr	r3, [r4, #0]
 80091de:	4433      	add	r3, r6
 80091e0:	6023      	str	r3, [r4, #0]
 80091e2:	e7db      	b.n	800919c <__ssputs_r+0x58>
 80091e4:	462a      	mov	r2, r5
 80091e6:	f000 f997 	bl	8009518 <_realloc_r>
 80091ea:	4606      	mov	r6, r0
 80091ec:	2800      	cmp	r0, #0
 80091ee:	d1e1      	bne.n	80091b4 <__ssputs_r+0x70>
 80091f0:	4650      	mov	r0, sl
 80091f2:	6921      	ldr	r1, [r4, #16]
 80091f4:	f7ff feca 	bl	8008f8c <_free_r>
 80091f8:	e7c7      	b.n	800918a <__ssputs_r+0x46>
	...

080091fc <_svfiprintf_r>:
 80091fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009200:	4698      	mov	r8, r3
 8009202:	898b      	ldrh	r3, [r1, #12]
 8009204:	4607      	mov	r7, r0
 8009206:	061b      	lsls	r3, r3, #24
 8009208:	460d      	mov	r5, r1
 800920a:	4614      	mov	r4, r2
 800920c:	b09d      	sub	sp, #116	; 0x74
 800920e:	d50e      	bpl.n	800922e <_svfiprintf_r+0x32>
 8009210:	690b      	ldr	r3, [r1, #16]
 8009212:	b963      	cbnz	r3, 800922e <_svfiprintf_r+0x32>
 8009214:	2140      	movs	r1, #64	; 0x40
 8009216:	f7ff ff21 	bl	800905c <_malloc_r>
 800921a:	6028      	str	r0, [r5, #0]
 800921c:	6128      	str	r0, [r5, #16]
 800921e:	b920      	cbnz	r0, 800922a <_svfiprintf_r+0x2e>
 8009220:	230c      	movs	r3, #12
 8009222:	603b      	str	r3, [r7, #0]
 8009224:	f04f 30ff 	mov.w	r0, #4294967295
 8009228:	e0d1      	b.n	80093ce <_svfiprintf_r+0x1d2>
 800922a:	2340      	movs	r3, #64	; 0x40
 800922c:	616b      	str	r3, [r5, #20]
 800922e:	2300      	movs	r3, #0
 8009230:	9309      	str	r3, [sp, #36]	; 0x24
 8009232:	2320      	movs	r3, #32
 8009234:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009238:	2330      	movs	r3, #48	; 0x30
 800923a:	f04f 0901 	mov.w	r9, #1
 800923e:	f8cd 800c 	str.w	r8, [sp, #12]
 8009242:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80093e8 <_svfiprintf_r+0x1ec>
 8009246:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800924a:	4623      	mov	r3, r4
 800924c:	469a      	mov	sl, r3
 800924e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009252:	b10a      	cbz	r2, 8009258 <_svfiprintf_r+0x5c>
 8009254:	2a25      	cmp	r2, #37	; 0x25
 8009256:	d1f9      	bne.n	800924c <_svfiprintf_r+0x50>
 8009258:	ebba 0b04 	subs.w	fp, sl, r4
 800925c:	d00b      	beq.n	8009276 <_svfiprintf_r+0x7a>
 800925e:	465b      	mov	r3, fp
 8009260:	4622      	mov	r2, r4
 8009262:	4629      	mov	r1, r5
 8009264:	4638      	mov	r0, r7
 8009266:	f7ff ff6d 	bl	8009144 <__ssputs_r>
 800926a:	3001      	adds	r0, #1
 800926c:	f000 80aa 	beq.w	80093c4 <_svfiprintf_r+0x1c8>
 8009270:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009272:	445a      	add	r2, fp
 8009274:	9209      	str	r2, [sp, #36]	; 0x24
 8009276:	f89a 3000 	ldrb.w	r3, [sl]
 800927a:	2b00      	cmp	r3, #0
 800927c:	f000 80a2 	beq.w	80093c4 <_svfiprintf_r+0x1c8>
 8009280:	2300      	movs	r3, #0
 8009282:	f04f 32ff 	mov.w	r2, #4294967295
 8009286:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800928a:	f10a 0a01 	add.w	sl, sl, #1
 800928e:	9304      	str	r3, [sp, #16]
 8009290:	9307      	str	r3, [sp, #28]
 8009292:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009296:	931a      	str	r3, [sp, #104]	; 0x68
 8009298:	4654      	mov	r4, sl
 800929a:	2205      	movs	r2, #5
 800929c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80092a0:	4851      	ldr	r0, [pc, #324]	; (80093e8 <_svfiprintf_r+0x1ec>)
 80092a2:	f7ff f98b 	bl	80085bc <memchr>
 80092a6:	9a04      	ldr	r2, [sp, #16]
 80092a8:	b9d8      	cbnz	r0, 80092e2 <_svfiprintf_r+0xe6>
 80092aa:	06d0      	lsls	r0, r2, #27
 80092ac:	bf44      	itt	mi
 80092ae:	2320      	movmi	r3, #32
 80092b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80092b4:	0711      	lsls	r1, r2, #28
 80092b6:	bf44      	itt	mi
 80092b8:	232b      	movmi	r3, #43	; 0x2b
 80092ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80092be:	f89a 3000 	ldrb.w	r3, [sl]
 80092c2:	2b2a      	cmp	r3, #42	; 0x2a
 80092c4:	d015      	beq.n	80092f2 <_svfiprintf_r+0xf6>
 80092c6:	4654      	mov	r4, sl
 80092c8:	2000      	movs	r0, #0
 80092ca:	f04f 0c0a 	mov.w	ip, #10
 80092ce:	9a07      	ldr	r2, [sp, #28]
 80092d0:	4621      	mov	r1, r4
 80092d2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80092d6:	3b30      	subs	r3, #48	; 0x30
 80092d8:	2b09      	cmp	r3, #9
 80092da:	d94e      	bls.n	800937a <_svfiprintf_r+0x17e>
 80092dc:	b1b0      	cbz	r0, 800930c <_svfiprintf_r+0x110>
 80092de:	9207      	str	r2, [sp, #28]
 80092e0:	e014      	b.n	800930c <_svfiprintf_r+0x110>
 80092e2:	eba0 0308 	sub.w	r3, r0, r8
 80092e6:	fa09 f303 	lsl.w	r3, r9, r3
 80092ea:	4313      	orrs	r3, r2
 80092ec:	46a2      	mov	sl, r4
 80092ee:	9304      	str	r3, [sp, #16]
 80092f0:	e7d2      	b.n	8009298 <_svfiprintf_r+0x9c>
 80092f2:	9b03      	ldr	r3, [sp, #12]
 80092f4:	1d19      	adds	r1, r3, #4
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	9103      	str	r1, [sp, #12]
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	bfbb      	ittet	lt
 80092fe:	425b      	neglt	r3, r3
 8009300:	f042 0202 	orrlt.w	r2, r2, #2
 8009304:	9307      	strge	r3, [sp, #28]
 8009306:	9307      	strlt	r3, [sp, #28]
 8009308:	bfb8      	it	lt
 800930a:	9204      	strlt	r2, [sp, #16]
 800930c:	7823      	ldrb	r3, [r4, #0]
 800930e:	2b2e      	cmp	r3, #46	; 0x2e
 8009310:	d10c      	bne.n	800932c <_svfiprintf_r+0x130>
 8009312:	7863      	ldrb	r3, [r4, #1]
 8009314:	2b2a      	cmp	r3, #42	; 0x2a
 8009316:	d135      	bne.n	8009384 <_svfiprintf_r+0x188>
 8009318:	9b03      	ldr	r3, [sp, #12]
 800931a:	3402      	adds	r4, #2
 800931c:	1d1a      	adds	r2, r3, #4
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	9203      	str	r2, [sp, #12]
 8009322:	2b00      	cmp	r3, #0
 8009324:	bfb8      	it	lt
 8009326:	f04f 33ff 	movlt.w	r3, #4294967295
 800932a:	9305      	str	r3, [sp, #20]
 800932c:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 80093ec <_svfiprintf_r+0x1f0>
 8009330:	2203      	movs	r2, #3
 8009332:	4650      	mov	r0, sl
 8009334:	7821      	ldrb	r1, [r4, #0]
 8009336:	f7ff f941 	bl	80085bc <memchr>
 800933a:	b140      	cbz	r0, 800934e <_svfiprintf_r+0x152>
 800933c:	2340      	movs	r3, #64	; 0x40
 800933e:	eba0 000a 	sub.w	r0, r0, sl
 8009342:	fa03 f000 	lsl.w	r0, r3, r0
 8009346:	9b04      	ldr	r3, [sp, #16]
 8009348:	3401      	adds	r4, #1
 800934a:	4303      	orrs	r3, r0
 800934c:	9304      	str	r3, [sp, #16]
 800934e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009352:	2206      	movs	r2, #6
 8009354:	4826      	ldr	r0, [pc, #152]	; (80093f0 <_svfiprintf_r+0x1f4>)
 8009356:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800935a:	f7ff f92f 	bl	80085bc <memchr>
 800935e:	2800      	cmp	r0, #0
 8009360:	d038      	beq.n	80093d4 <_svfiprintf_r+0x1d8>
 8009362:	4b24      	ldr	r3, [pc, #144]	; (80093f4 <_svfiprintf_r+0x1f8>)
 8009364:	bb1b      	cbnz	r3, 80093ae <_svfiprintf_r+0x1b2>
 8009366:	9b03      	ldr	r3, [sp, #12]
 8009368:	3307      	adds	r3, #7
 800936a:	f023 0307 	bic.w	r3, r3, #7
 800936e:	3308      	adds	r3, #8
 8009370:	9303      	str	r3, [sp, #12]
 8009372:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009374:	4433      	add	r3, r6
 8009376:	9309      	str	r3, [sp, #36]	; 0x24
 8009378:	e767      	b.n	800924a <_svfiprintf_r+0x4e>
 800937a:	460c      	mov	r4, r1
 800937c:	2001      	movs	r0, #1
 800937e:	fb0c 3202 	mla	r2, ip, r2, r3
 8009382:	e7a5      	b.n	80092d0 <_svfiprintf_r+0xd4>
 8009384:	2300      	movs	r3, #0
 8009386:	f04f 0c0a 	mov.w	ip, #10
 800938a:	4619      	mov	r1, r3
 800938c:	3401      	adds	r4, #1
 800938e:	9305      	str	r3, [sp, #20]
 8009390:	4620      	mov	r0, r4
 8009392:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009396:	3a30      	subs	r2, #48	; 0x30
 8009398:	2a09      	cmp	r2, #9
 800939a:	d903      	bls.n	80093a4 <_svfiprintf_r+0x1a8>
 800939c:	2b00      	cmp	r3, #0
 800939e:	d0c5      	beq.n	800932c <_svfiprintf_r+0x130>
 80093a0:	9105      	str	r1, [sp, #20]
 80093a2:	e7c3      	b.n	800932c <_svfiprintf_r+0x130>
 80093a4:	4604      	mov	r4, r0
 80093a6:	2301      	movs	r3, #1
 80093a8:	fb0c 2101 	mla	r1, ip, r1, r2
 80093ac:	e7f0      	b.n	8009390 <_svfiprintf_r+0x194>
 80093ae:	ab03      	add	r3, sp, #12
 80093b0:	9300      	str	r3, [sp, #0]
 80093b2:	462a      	mov	r2, r5
 80093b4:	4638      	mov	r0, r7
 80093b6:	4b10      	ldr	r3, [pc, #64]	; (80093f8 <_svfiprintf_r+0x1fc>)
 80093b8:	a904      	add	r1, sp, #16
 80093ba:	f7fc fa7f 	bl	80058bc <_printf_float>
 80093be:	1c42      	adds	r2, r0, #1
 80093c0:	4606      	mov	r6, r0
 80093c2:	d1d6      	bne.n	8009372 <_svfiprintf_r+0x176>
 80093c4:	89ab      	ldrh	r3, [r5, #12]
 80093c6:	065b      	lsls	r3, r3, #25
 80093c8:	f53f af2c 	bmi.w	8009224 <_svfiprintf_r+0x28>
 80093cc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80093ce:	b01d      	add	sp, #116	; 0x74
 80093d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093d4:	ab03      	add	r3, sp, #12
 80093d6:	9300      	str	r3, [sp, #0]
 80093d8:	462a      	mov	r2, r5
 80093da:	4638      	mov	r0, r7
 80093dc:	4b06      	ldr	r3, [pc, #24]	; (80093f8 <_svfiprintf_r+0x1fc>)
 80093de:	a904      	add	r1, sp, #16
 80093e0:	f7fc fd08 	bl	8005df4 <_printf_i>
 80093e4:	e7eb      	b.n	80093be <_svfiprintf_r+0x1c2>
 80093e6:	bf00      	nop
 80093e8:	0800a45c 	.word	0x0800a45c
 80093ec:	0800a462 	.word	0x0800a462
 80093f0:	0800a466 	.word	0x0800a466
 80093f4:	080058bd 	.word	0x080058bd
 80093f8:	08009145 	.word	0x08009145

080093fc <nan>:
 80093fc:	2000      	movs	r0, #0
 80093fe:	4901      	ldr	r1, [pc, #4]	; (8009404 <nan+0x8>)
 8009400:	4770      	bx	lr
 8009402:	bf00      	nop
 8009404:	7ff80000 	.word	0x7ff80000

08009408 <_sbrk_r>:
 8009408:	b538      	push	{r3, r4, r5, lr}
 800940a:	2300      	movs	r3, #0
 800940c:	4d05      	ldr	r5, [pc, #20]	; (8009424 <_sbrk_r+0x1c>)
 800940e:	4604      	mov	r4, r0
 8009410:	4608      	mov	r0, r1
 8009412:	602b      	str	r3, [r5, #0]
 8009414:	f7f8 fff0 	bl	80023f8 <_sbrk>
 8009418:	1c43      	adds	r3, r0, #1
 800941a:	d102      	bne.n	8009422 <_sbrk_r+0x1a>
 800941c:	682b      	ldr	r3, [r5, #0]
 800941e:	b103      	cbz	r3, 8009422 <_sbrk_r+0x1a>
 8009420:	6023      	str	r3, [r4, #0]
 8009422:	bd38      	pop	{r3, r4, r5, pc}
 8009424:	20000420 	.word	0x20000420

08009428 <strncmp>:
 8009428:	4603      	mov	r3, r0
 800942a:	b510      	push	{r4, lr}
 800942c:	b172      	cbz	r2, 800944c <strncmp+0x24>
 800942e:	3901      	subs	r1, #1
 8009430:	1884      	adds	r4, r0, r2
 8009432:	f813 0b01 	ldrb.w	r0, [r3], #1
 8009436:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800943a:	4290      	cmp	r0, r2
 800943c:	d101      	bne.n	8009442 <strncmp+0x1a>
 800943e:	42a3      	cmp	r3, r4
 8009440:	d101      	bne.n	8009446 <strncmp+0x1e>
 8009442:	1a80      	subs	r0, r0, r2
 8009444:	bd10      	pop	{r4, pc}
 8009446:	2800      	cmp	r0, #0
 8009448:	d1f3      	bne.n	8009432 <strncmp+0xa>
 800944a:	e7fa      	b.n	8009442 <strncmp+0x1a>
 800944c:	4610      	mov	r0, r2
 800944e:	e7f9      	b.n	8009444 <strncmp+0x1c>

08009450 <__ascii_wctomb>:
 8009450:	4603      	mov	r3, r0
 8009452:	4608      	mov	r0, r1
 8009454:	b141      	cbz	r1, 8009468 <__ascii_wctomb+0x18>
 8009456:	2aff      	cmp	r2, #255	; 0xff
 8009458:	d904      	bls.n	8009464 <__ascii_wctomb+0x14>
 800945a:	228a      	movs	r2, #138	; 0x8a
 800945c:	f04f 30ff 	mov.w	r0, #4294967295
 8009460:	601a      	str	r2, [r3, #0]
 8009462:	4770      	bx	lr
 8009464:	2001      	movs	r0, #1
 8009466:	700a      	strb	r2, [r1, #0]
 8009468:	4770      	bx	lr
	...

0800946c <__assert_func>:
 800946c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800946e:	4614      	mov	r4, r2
 8009470:	461a      	mov	r2, r3
 8009472:	4b09      	ldr	r3, [pc, #36]	; (8009498 <__assert_func+0x2c>)
 8009474:	4605      	mov	r5, r0
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	68d8      	ldr	r0, [r3, #12]
 800947a:	b14c      	cbz	r4, 8009490 <__assert_func+0x24>
 800947c:	4b07      	ldr	r3, [pc, #28]	; (800949c <__assert_func+0x30>)
 800947e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009482:	9100      	str	r1, [sp, #0]
 8009484:	462b      	mov	r3, r5
 8009486:	4906      	ldr	r1, [pc, #24]	; (80094a0 <__assert_func+0x34>)
 8009488:	f000 f80e 	bl	80094a8 <fiprintf>
 800948c:	f000 fa8a 	bl	80099a4 <abort>
 8009490:	4b04      	ldr	r3, [pc, #16]	; (80094a4 <__assert_func+0x38>)
 8009492:	461c      	mov	r4, r3
 8009494:	e7f3      	b.n	800947e <__assert_func+0x12>
 8009496:	bf00      	nop
 8009498:	2000003c 	.word	0x2000003c
 800949c:	0800a46d 	.word	0x0800a46d
 80094a0:	0800a47a 	.word	0x0800a47a
 80094a4:	0800a4a8 	.word	0x0800a4a8

080094a8 <fiprintf>:
 80094a8:	b40e      	push	{r1, r2, r3}
 80094aa:	b503      	push	{r0, r1, lr}
 80094ac:	4601      	mov	r1, r0
 80094ae:	ab03      	add	r3, sp, #12
 80094b0:	4805      	ldr	r0, [pc, #20]	; (80094c8 <fiprintf+0x20>)
 80094b2:	f853 2b04 	ldr.w	r2, [r3], #4
 80094b6:	6800      	ldr	r0, [r0, #0]
 80094b8:	9301      	str	r3, [sp, #4]
 80094ba:	f000 f883 	bl	80095c4 <_vfiprintf_r>
 80094be:	b002      	add	sp, #8
 80094c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80094c4:	b003      	add	sp, #12
 80094c6:	4770      	bx	lr
 80094c8:	2000003c 	.word	0x2000003c

080094cc <memmove>:
 80094cc:	4288      	cmp	r0, r1
 80094ce:	b510      	push	{r4, lr}
 80094d0:	eb01 0402 	add.w	r4, r1, r2
 80094d4:	d902      	bls.n	80094dc <memmove+0x10>
 80094d6:	4284      	cmp	r4, r0
 80094d8:	4623      	mov	r3, r4
 80094da:	d807      	bhi.n	80094ec <memmove+0x20>
 80094dc:	1e43      	subs	r3, r0, #1
 80094de:	42a1      	cmp	r1, r4
 80094e0:	d008      	beq.n	80094f4 <memmove+0x28>
 80094e2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80094e6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80094ea:	e7f8      	b.n	80094de <memmove+0x12>
 80094ec:	4601      	mov	r1, r0
 80094ee:	4402      	add	r2, r0
 80094f0:	428a      	cmp	r2, r1
 80094f2:	d100      	bne.n	80094f6 <memmove+0x2a>
 80094f4:	bd10      	pop	{r4, pc}
 80094f6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80094fa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80094fe:	e7f7      	b.n	80094f0 <memmove+0x24>

08009500 <__malloc_lock>:
 8009500:	4801      	ldr	r0, [pc, #4]	; (8009508 <__malloc_lock+0x8>)
 8009502:	f000 bc0b 	b.w	8009d1c <__retarget_lock_acquire_recursive>
 8009506:	bf00      	nop
 8009508:	20000424 	.word	0x20000424

0800950c <__malloc_unlock>:
 800950c:	4801      	ldr	r0, [pc, #4]	; (8009514 <__malloc_unlock+0x8>)
 800950e:	f000 bc06 	b.w	8009d1e <__retarget_lock_release_recursive>
 8009512:	bf00      	nop
 8009514:	20000424 	.word	0x20000424

08009518 <_realloc_r>:
 8009518:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800951c:	4680      	mov	r8, r0
 800951e:	4614      	mov	r4, r2
 8009520:	460e      	mov	r6, r1
 8009522:	b921      	cbnz	r1, 800952e <_realloc_r+0x16>
 8009524:	4611      	mov	r1, r2
 8009526:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800952a:	f7ff bd97 	b.w	800905c <_malloc_r>
 800952e:	b92a      	cbnz	r2, 800953c <_realloc_r+0x24>
 8009530:	f7ff fd2c 	bl	8008f8c <_free_r>
 8009534:	4625      	mov	r5, r4
 8009536:	4628      	mov	r0, r5
 8009538:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800953c:	f000 fc56 	bl	8009dec <_malloc_usable_size_r>
 8009540:	4284      	cmp	r4, r0
 8009542:	4607      	mov	r7, r0
 8009544:	d802      	bhi.n	800954c <_realloc_r+0x34>
 8009546:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800954a:	d812      	bhi.n	8009572 <_realloc_r+0x5a>
 800954c:	4621      	mov	r1, r4
 800954e:	4640      	mov	r0, r8
 8009550:	f7ff fd84 	bl	800905c <_malloc_r>
 8009554:	4605      	mov	r5, r0
 8009556:	2800      	cmp	r0, #0
 8009558:	d0ed      	beq.n	8009536 <_realloc_r+0x1e>
 800955a:	42bc      	cmp	r4, r7
 800955c:	4622      	mov	r2, r4
 800955e:	4631      	mov	r1, r6
 8009560:	bf28      	it	cs
 8009562:	463a      	movcs	r2, r7
 8009564:	f7ff f838 	bl	80085d8 <memcpy>
 8009568:	4631      	mov	r1, r6
 800956a:	4640      	mov	r0, r8
 800956c:	f7ff fd0e 	bl	8008f8c <_free_r>
 8009570:	e7e1      	b.n	8009536 <_realloc_r+0x1e>
 8009572:	4635      	mov	r5, r6
 8009574:	e7df      	b.n	8009536 <_realloc_r+0x1e>

08009576 <__sfputc_r>:
 8009576:	6893      	ldr	r3, [r2, #8]
 8009578:	b410      	push	{r4}
 800957a:	3b01      	subs	r3, #1
 800957c:	2b00      	cmp	r3, #0
 800957e:	6093      	str	r3, [r2, #8]
 8009580:	da07      	bge.n	8009592 <__sfputc_r+0x1c>
 8009582:	6994      	ldr	r4, [r2, #24]
 8009584:	42a3      	cmp	r3, r4
 8009586:	db01      	blt.n	800958c <__sfputc_r+0x16>
 8009588:	290a      	cmp	r1, #10
 800958a:	d102      	bne.n	8009592 <__sfputc_r+0x1c>
 800958c:	bc10      	pop	{r4}
 800958e:	f000 b949 	b.w	8009824 <__swbuf_r>
 8009592:	6813      	ldr	r3, [r2, #0]
 8009594:	1c58      	adds	r0, r3, #1
 8009596:	6010      	str	r0, [r2, #0]
 8009598:	7019      	strb	r1, [r3, #0]
 800959a:	4608      	mov	r0, r1
 800959c:	bc10      	pop	{r4}
 800959e:	4770      	bx	lr

080095a0 <__sfputs_r>:
 80095a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095a2:	4606      	mov	r6, r0
 80095a4:	460f      	mov	r7, r1
 80095a6:	4614      	mov	r4, r2
 80095a8:	18d5      	adds	r5, r2, r3
 80095aa:	42ac      	cmp	r4, r5
 80095ac:	d101      	bne.n	80095b2 <__sfputs_r+0x12>
 80095ae:	2000      	movs	r0, #0
 80095b0:	e007      	b.n	80095c2 <__sfputs_r+0x22>
 80095b2:	463a      	mov	r2, r7
 80095b4:	4630      	mov	r0, r6
 80095b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80095ba:	f7ff ffdc 	bl	8009576 <__sfputc_r>
 80095be:	1c43      	adds	r3, r0, #1
 80095c0:	d1f3      	bne.n	80095aa <__sfputs_r+0xa>
 80095c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080095c4 <_vfiprintf_r>:
 80095c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095c8:	460d      	mov	r5, r1
 80095ca:	4614      	mov	r4, r2
 80095cc:	4698      	mov	r8, r3
 80095ce:	4606      	mov	r6, r0
 80095d0:	b09d      	sub	sp, #116	; 0x74
 80095d2:	b118      	cbz	r0, 80095dc <_vfiprintf_r+0x18>
 80095d4:	6983      	ldr	r3, [r0, #24]
 80095d6:	b90b      	cbnz	r3, 80095dc <_vfiprintf_r+0x18>
 80095d8:	f000 fb02 	bl	8009be0 <__sinit>
 80095dc:	4b89      	ldr	r3, [pc, #548]	; (8009804 <_vfiprintf_r+0x240>)
 80095de:	429d      	cmp	r5, r3
 80095e0:	d11b      	bne.n	800961a <_vfiprintf_r+0x56>
 80095e2:	6875      	ldr	r5, [r6, #4]
 80095e4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80095e6:	07d9      	lsls	r1, r3, #31
 80095e8:	d405      	bmi.n	80095f6 <_vfiprintf_r+0x32>
 80095ea:	89ab      	ldrh	r3, [r5, #12]
 80095ec:	059a      	lsls	r2, r3, #22
 80095ee:	d402      	bmi.n	80095f6 <_vfiprintf_r+0x32>
 80095f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80095f2:	f000 fb93 	bl	8009d1c <__retarget_lock_acquire_recursive>
 80095f6:	89ab      	ldrh	r3, [r5, #12]
 80095f8:	071b      	lsls	r3, r3, #28
 80095fa:	d501      	bpl.n	8009600 <_vfiprintf_r+0x3c>
 80095fc:	692b      	ldr	r3, [r5, #16]
 80095fe:	b9eb      	cbnz	r3, 800963c <_vfiprintf_r+0x78>
 8009600:	4629      	mov	r1, r5
 8009602:	4630      	mov	r0, r6
 8009604:	f000 f960 	bl	80098c8 <__swsetup_r>
 8009608:	b1c0      	cbz	r0, 800963c <_vfiprintf_r+0x78>
 800960a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800960c:	07dc      	lsls	r4, r3, #31
 800960e:	d50e      	bpl.n	800962e <_vfiprintf_r+0x6a>
 8009610:	f04f 30ff 	mov.w	r0, #4294967295
 8009614:	b01d      	add	sp, #116	; 0x74
 8009616:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800961a:	4b7b      	ldr	r3, [pc, #492]	; (8009808 <_vfiprintf_r+0x244>)
 800961c:	429d      	cmp	r5, r3
 800961e:	d101      	bne.n	8009624 <_vfiprintf_r+0x60>
 8009620:	68b5      	ldr	r5, [r6, #8]
 8009622:	e7df      	b.n	80095e4 <_vfiprintf_r+0x20>
 8009624:	4b79      	ldr	r3, [pc, #484]	; (800980c <_vfiprintf_r+0x248>)
 8009626:	429d      	cmp	r5, r3
 8009628:	bf08      	it	eq
 800962a:	68f5      	ldreq	r5, [r6, #12]
 800962c:	e7da      	b.n	80095e4 <_vfiprintf_r+0x20>
 800962e:	89ab      	ldrh	r3, [r5, #12]
 8009630:	0598      	lsls	r0, r3, #22
 8009632:	d4ed      	bmi.n	8009610 <_vfiprintf_r+0x4c>
 8009634:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009636:	f000 fb72 	bl	8009d1e <__retarget_lock_release_recursive>
 800963a:	e7e9      	b.n	8009610 <_vfiprintf_r+0x4c>
 800963c:	2300      	movs	r3, #0
 800963e:	9309      	str	r3, [sp, #36]	; 0x24
 8009640:	2320      	movs	r3, #32
 8009642:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009646:	2330      	movs	r3, #48	; 0x30
 8009648:	f04f 0901 	mov.w	r9, #1
 800964c:	f8cd 800c 	str.w	r8, [sp, #12]
 8009650:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8009810 <_vfiprintf_r+0x24c>
 8009654:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009658:	4623      	mov	r3, r4
 800965a:	469a      	mov	sl, r3
 800965c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009660:	b10a      	cbz	r2, 8009666 <_vfiprintf_r+0xa2>
 8009662:	2a25      	cmp	r2, #37	; 0x25
 8009664:	d1f9      	bne.n	800965a <_vfiprintf_r+0x96>
 8009666:	ebba 0b04 	subs.w	fp, sl, r4
 800966a:	d00b      	beq.n	8009684 <_vfiprintf_r+0xc0>
 800966c:	465b      	mov	r3, fp
 800966e:	4622      	mov	r2, r4
 8009670:	4629      	mov	r1, r5
 8009672:	4630      	mov	r0, r6
 8009674:	f7ff ff94 	bl	80095a0 <__sfputs_r>
 8009678:	3001      	adds	r0, #1
 800967a:	f000 80aa 	beq.w	80097d2 <_vfiprintf_r+0x20e>
 800967e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009680:	445a      	add	r2, fp
 8009682:	9209      	str	r2, [sp, #36]	; 0x24
 8009684:	f89a 3000 	ldrb.w	r3, [sl]
 8009688:	2b00      	cmp	r3, #0
 800968a:	f000 80a2 	beq.w	80097d2 <_vfiprintf_r+0x20e>
 800968e:	2300      	movs	r3, #0
 8009690:	f04f 32ff 	mov.w	r2, #4294967295
 8009694:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009698:	f10a 0a01 	add.w	sl, sl, #1
 800969c:	9304      	str	r3, [sp, #16]
 800969e:	9307      	str	r3, [sp, #28]
 80096a0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80096a4:	931a      	str	r3, [sp, #104]	; 0x68
 80096a6:	4654      	mov	r4, sl
 80096a8:	2205      	movs	r2, #5
 80096aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80096ae:	4858      	ldr	r0, [pc, #352]	; (8009810 <_vfiprintf_r+0x24c>)
 80096b0:	f7fe ff84 	bl	80085bc <memchr>
 80096b4:	9a04      	ldr	r2, [sp, #16]
 80096b6:	b9d8      	cbnz	r0, 80096f0 <_vfiprintf_r+0x12c>
 80096b8:	06d1      	lsls	r1, r2, #27
 80096ba:	bf44      	itt	mi
 80096bc:	2320      	movmi	r3, #32
 80096be:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80096c2:	0713      	lsls	r3, r2, #28
 80096c4:	bf44      	itt	mi
 80096c6:	232b      	movmi	r3, #43	; 0x2b
 80096c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80096cc:	f89a 3000 	ldrb.w	r3, [sl]
 80096d0:	2b2a      	cmp	r3, #42	; 0x2a
 80096d2:	d015      	beq.n	8009700 <_vfiprintf_r+0x13c>
 80096d4:	4654      	mov	r4, sl
 80096d6:	2000      	movs	r0, #0
 80096d8:	f04f 0c0a 	mov.w	ip, #10
 80096dc:	9a07      	ldr	r2, [sp, #28]
 80096de:	4621      	mov	r1, r4
 80096e0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80096e4:	3b30      	subs	r3, #48	; 0x30
 80096e6:	2b09      	cmp	r3, #9
 80096e8:	d94e      	bls.n	8009788 <_vfiprintf_r+0x1c4>
 80096ea:	b1b0      	cbz	r0, 800971a <_vfiprintf_r+0x156>
 80096ec:	9207      	str	r2, [sp, #28]
 80096ee:	e014      	b.n	800971a <_vfiprintf_r+0x156>
 80096f0:	eba0 0308 	sub.w	r3, r0, r8
 80096f4:	fa09 f303 	lsl.w	r3, r9, r3
 80096f8:	4313      	orrs	r3, r2
 80096fa:	46a2      	mov	sl, r4
 80096fc:	9304      	str	r3, [sp, #16]
 80096fe:	e7d2      	b.n	80096a6 <_vfiprintf_r+0xe2>
 8009700:	9b03      	ldr	r3, [sp, #12]
 8009702:	1d19      	adds	r1, r3, #4
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	9103      	str	r1, [sp, #12]
 8009708:	2b00      	cmp	r3, #0
 800970a:	bfbb      	ittet	lt
 800970c:	425b      	neglt	r3, r3
 800970e:	f042 0202 	orrlt.w	r2, r2, #2
 8009712:	9307      	strge	r3, [sp, #28]
 8009714:	9307      	strlt	r3, [sp, #28]
 8009716:	bfb8      	it	lt
 8009718:	9204      	strlt	r2, [sp, #16]
 800971a:	7823      	ldrb	r3, [r4, #0]
 800971c:	2b2e      	cmp	r3, #46	; 0x2e
 800971e:	d10c      	bne.n	800973a <_vfiprintf_r+0x176>
 8009720:	7863      	ldrb	r3, [r4, #1]
 8009722:	2b2a      	cmp	r3, #42	; 0x2a
 8009724:	d135      	bne.n	8009792 <_vfiprintf_r+0x1ce>
 8009726:	9b03      	ldr	r3, [sp, #12]
 8009728:	3402      	adds	r4, #2
 800972a:	1d1a      	adds	r2, r3, #4
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	9203      	str	r2, [sp, #12]
 8009730:	2b00      	cmp	r3, #0
 8009732:	bfb8      	it	lt
 8009734:	f04f 33ff 	movlt.w	r3, #4294967295
 8009738:	9305      	str	r3, [sp, #20]
 800973a:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8009814 <_vfiprintf_r+0x250>
 800973e:	2203      	movs	r2, #3
 8009740:	4650      	mov	r0, sl
 8009742:	7821      	ldrb	r1, [r4, #0]
 8009744:	f7fe ff3a 	bl	80085bc <memchr>
 8009748:	b140      	cbz	r0, 800975c <_vfiprintf_r+0x198>
 800974a:	2340      	movs	r3, #64	; 0x40
 800974c:	eba0 000a 	sub.w	r0, r0, sl
 8009750:	fa03 f000 	lsl.w	r0, r3, r0
 8009754:	9b04      	ldr	r3, [sp, #16]
 8009756:	3401      	adds	r4, #1
 8009758:	4303      	orrs	r3, r0
 800975a:	9304      	str	r3, [sp, #16]
 800975c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009760:	2206      	movs	r2, #6
 8009762:	482d      	ldr	r0, [pc, #180]	; (8009818 <_vfiprintf_r+0x254>)
 8009764:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009768:	f7fe ff28 	bl	80085bc <memchr>
 800976c:	2800      	cmp	r0, #0
 800976e:	d03f      	beq.n	80097f0 <_vfiprintf_r+0x22c>
 8009770:	4b2a      	ldr	r3, [pc, #168]	; (800981c <_vfiprintf_r+0x258>)
 8009772:	bb1b      	cbnz	r3, 80097bc <_vfiprintf_r+0x1f8>
 8009774:	9b03      	ldr	r3, [sp, #12]
 8009776:	3307      	adds	r3, #7
 8009778:	f023 0307 	bic.w	r3, r3, #7
 800977c:	3308      	adds	r3, #8
 800977e:	9303      	str	r3, [sp, #12]
 8009780:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009782:	443b      	add	r3, r7
 8009784:	9309      	str	r3, [sp, #36]	; 0x24
 8009786:	e767      	b.n	8009658 <_vfiprintf_r+0x94>
 8009788:	460c      	mov	r4, r1
 800978a:	2001      	movs	r0, #1
 800978c:	fb0c 3202 	mla	r2, ip, r2, r3
 8009790:	e7a5      	b.n	80096de <_vfiprintf_r+0x11a>
 8009792:	2300      	movs	r3, #0
 8009794:	f04f 0c0a 	mov.w	ip, #10
 8009798:	4619      	mov	r1, r3
 800979a:	3401      	adds	r4, #1
 800979c:	9305      	str	r3, [sp, #20]
 800979e:	4620      	mov	r0, r4
 80097a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80097a4:	3a30      	subs	r2, #48	; 0x30
 80097a6:	2a09      	cmp	r2, #9
 80097a8:	d903      	bls.n	80097b2 <_vfiprintf_r+0x1ee>
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d0c5      	beq.n	800973a <_vfiprintf_r+0x176>
 80097ae:	9105      	str	r1, [sp, #20]
 80097b0:	e7c3      	b.n	800973a <_vfiprintf_r+0x176>
 80097b2:	4604      	mov	r4, r0
 80097b4:	2301      	movs	r3, #1
 80097b6:	fb0c 2101 	mla	r1, ip, r1, r2
 80097ba:	e7f0      	b.n	800979e <_vfiprintf_r+0x1da>
 80097bc:	ab03      	add	r3, sp, #12
 80097be:	9300      	str	r3, [sp, #0]
 80097c0:	462a      	mov	r2, r5
 80097c2:	4630      	mov	r0, r6
 80097c4:	4b16      	ldr	r3, [pc, #88]	; (8009820 <_vfiprintf_r+0x25c>)
 80097c6:	a904      	add	r1, sp, #16
 80097c8:	f7fc f878 	bl	80058bc <_printf_float>
 80097cc:	4607      	mov	r7, r0
 80097ce:	1c78      	adds	r0, r7, #1
 80097d0:	d1d6      	bne.n	8009780 <_vfiprintf_r+0x1bc>
 80097d2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80097d4:	07d9      	lsls	r1, r3, #31
 80097d6:	d405      	bmi.n	80097e4 <_vfiprintf_r+0x220>
 80097d8:	89ab      	ldrh	r3, [r5, #12]
 80097da:	059a      	lsls	r2, r3, #22
 80097dc:	d402      	bmi.n	80097e4 <_vfiprintf_r+0x220>
 80097de:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80097e0:	f000 fa9d 	bl	8009d1e <__retarget_lock_release_recursive>
 80097e4:	89ab      	ldrh	r3, [r5, #12]
 80097e6:	065b      	lsls	r3, r3, #25
 80097e8:	f53f af12 	bmi.w	8009610 <_vfiprintf_r+0x4c>
 80097ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 80097ee:	e711      	b.n	8009614 <_vfiprintf_r+0x50>
 80097f0:	ab03      	add	r3, sp, #12
 80097f2:	9300      	str	r3, [sp, #0]
 80097f4:	462a      	mov	r2, r5
 80097f6:	4630      	mov	r0, r6
 80097f8:	4b09      	ldr	r3, [pc, #36]	; (8009820 <_vfiprintf_r+0x25c>)
 80097fa:	a904      	add	r1, sp, #16
 80097fc:	f7fc fafa 	bl	8005df4 <_printf_i>
 8009800:	e7e4      	b.n	80097cc <_vfiprintf_r+0x208>
 8009802:	bf00      	nop
 8009804:	0800a4cc 	.word	0x0800a4cc
 8009808:	0800a4ec 	.word	0x0800a4ec
 800980c:	0800a4ac 	.word	0x0800a4ac
 8009810:	0800a45c 	.word	0x0800a45c
 8009814:	0800a462 	.word	0x0800a462
 8009818:	0800a466 	.word	0x0800a466
 800981c:	080058bd 	.word	0x080058bd
 8009820:	080095a1 	.word	0x080095a1

08009824 <__swbuf_r>:
 8009824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009826:	460e      	mov	r6, r1
 8009828:	4614      	mov	r4, r2
 800982a:	4605      	mov	r5, r0
 800982c:	b118      	cbz	r0, 8009836 <__swbuf_r+0x12>
 800982e:	6983      	ldr	r3, [r0, #24]
 8009830:	b90b      	cbnz	r3, 8009836 <__swbuf_r+0x12>
 8009832:	f000 f9d5 	bl	8009be0 <__sinit>
 8009836:	4b21      	ldr	r3, [pc, #132]	; (80098bc <__swbuf_r+0x98>)
 8009838:	429c      	cmp	r4, r3
 800983a:	d12b      	bne.n	8009894 <__swbuf_r+0x70>
 800983c:	686c      	ldr	r4, [r5, #4]
 800983e:	69a3      	ldr	r3, [r4, #24]
 8009840:	60a3      	str	r3, [r4, #8]
 8009842:	89a3      	ldrh	r3, [r4, #12]
 8009844:	071a      	lsls	r2, r3, #28
 8009846:	d52f      	bpl.n	80098a8 <__swbuf_r+0x84>
 8009848:	6923      	ldr	r3, [r4, #16]
 800984a:	b36b      	cbz	r3, 80098a8 <__swbuf_r+0x84>
 800984c:	6923      	ldr	r3, [r4, #16]
 800984e:	6820      	ldr	r0, [r4, #0]
 8009850:	b2f6      	uxtb	r6, r6
 8009852:	1ac0      	subs	r0, r0, r3
 8009854:	6963      	ldr	r3, [r4, #20]
 8009856:	4637      	mov	r7, r6
 8009858:	4283      	cmp	r3, r0
 800985a:	dc04      	bgt.n	8009866 <__swbuf_r+0x42>
 800985c:	4621      	mov	r1, r4
 800985e:	4628      	mov	r0, r5
 8009860:	f000 f92a 	bl	8009ab8 <_fflush_r>
 8009864:	bb30      	cbnz	r0, 80098b4 <__swbuf_r+0x90>
 8009866:	68a3      	ldr	r3, [r4, #8]
 8009868:	3001      	adds	r0, #1
 800986a:	3b01      	subs	r3, #1
 800986c:	60a3      	str	r3, [r4, #8]
 800986e:	6823      	ldr	r3, [r4, #0]
 8009870:	1c5a      	adds	r2, r3, #1
 8009872:	6022      	str	r2, [r4, #0]
 8009874:	701e      	strb	r6, [r3, #0]
 8009876:	6963      	ldr	r3, [r4, #20]
 8009878:	4283      	cmp	r3, r0
 800987a:	d004      	beq.n	8009886 <__swbuf_r+0x62>
 800987c:	89a3      	ldrh	r3, [r4, #12]
 800987e:	07db      	lsls	r3, r3, #31
 8009880:	d506      	bpl.n	8009890 <__swbuf_r+0x6c>
 8009882:	2e0a      	cmp	r6, #10
 8009884:	d104      	bne.n	8009890 <__swbuf_r+0x6c>
 8009886:	4621      	mov	r1, r4
 8009888:	4628      	mov	r0, r5
 800988a:	f000 f915 	bl	8009ab8 <_fflush_r>
 800988e:	b988      	cbnz	r0, 80098b4 <__swbuf_r+0x90>
 8009890:	4638      	mov	r0, r7
 8009892:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009894:	4b0a      	ldr	r3, [pc, #40]	; (80098c0 <__swbuf_r+0x9c>)
 8009896:	429c      	cmp	r4, r3
 8009898:	d101      	bne.n	800989e <__swbuf_r+0x7a>
 800989a:	68ac      	ldr	r4, [r5, #8]
 800989c:	e7cf      	b.n	800983e <__swbuf_r+0x1a>
 800989e:	4b09      	ldr	r3, [pc, #36]	; (80098c4 <__swbuf_r+0xa0>)
 80098a0:	429c      	cmp	r4, r3
 80098a2:	bf08      	it	eq
 80098a4:	68ec      	ldreq	r4, [r5, #12]
 80098a6:	e7ca      	b.n	800983e <__swbuf_r+0x1a>
 80098a8:	4621      	mov	r1, r4
 80098aa:	4628      	mov	r0, r5
 80098ac:	f000 f80c 	bl	80098c8 <__swsetup_r>
 80098b0:	2800      	cmp	r0, #0
 80098b2:	d0cb      	beq.n	800984c <__swbuf_r+0x28>
 80098b4:	f04f 37ff 	mov.w	r7, #4294967295
 80098b8:	e7ea      	b.n	8009890 <__swbuf_r+0x6c>
 80098ba:	bf00      	nop
 80098bc:	0800a4cc 	.word	0x0800a4cc
 80098c0:	0800a4ec 	.word	0x0800a4ec
 80098c4:	0800a4ac 	.word	0x0800a4ac

080098c8 <__swsetup_r>:
 80098c8:	4b32      	ldr	r3, [pc, #200]	; (8009994 <__swsetup_r+0xcc>)
 80098ca:	b570      	push	{r4, r5, r6, lr}
 80098cc:	681d      	ldr	r5, [r3, #0]
 80098ce:	4606      	mov	r6, r0
 80098d0:	460c      	mov	r4, r1
 80098d2:	b125      	cbz	r5, 80098de <__swsetup_r+0x16>
 80098d4:	69ab      	ldr	r3, [r5, #24]
 80098d6:	b913      	cbnz	r3, 80098de <__swsetup_r+0x16>
 80098d8:	4628      	mov	r0, r5
 80098da:	f000 f981 	bl	8009be0 <__sinit>
 80098de:	4b2e      	ldr	r3, [pc, #184]	; (8009998 <__swsetup_r+0xd0>)
 80098e0:	429c      	cmp	r4, r3
 80098e2:	d10f      	bne.n	8009904 <__swsetup_r+0x3c>
 80098e4:	686c      	ldr	r4, [r5, #4]
 80098e6:	89a3      	ldrh	r3, [r4, #12]
 80098e8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80098ec:	0719      	lsls	r1, r3, #28
 80098ee:	d42c      	bmi.n	800994a <__swsetup_r+0x82>
 80098f0:	06dd      	lsls	r5, r3, #27
 80098f2:	d411      	bmi.n	8009918 <__swsetup_r+0x50>
 80098f4:	2309      	movs	r3, #9
 80098f6:	6033      	str	r3, [r6, #0]
 80098f8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80098fc:	f04f 30ff 	mov.w	r0, #4294967295
 8009900:	81a3      	strh	r3, [r4, #12]
 8009902:	e03e      	b.n	8009982 <__swsetup_r+0xba>
 8009904:	4b25      	ldr	r3, [pc, #148]	; (800999c <__swsetup_r+0xd4>)
 8009906:	429c      	cmp	r4, r3
 8009908:	d101      	bne.n	800990e <__swsetup_r+0x46>
 800990a:	68ac      	ldr	r4, [r5, #8]
 800990c:	e7eb      	b.n	80098e6 <__swsetup_r+0x1e>
 800990e:	4b24      	ldr	r3, [pc, #144]	; (80099a0 <__swsetup_r+0xd8>)
 8009910:	429c      	cmp	r4, r3
 8009912:	bf08      	it	eq
 8009914:	68ec      	ldreq	r4, [r5, #12]
 8009916:	e7e6      	b.n	80098e6 <__swsetup_r+0x1e>
 8009918:	0758      	lsls	r0, r3, #29
 800991a:	d512      	bpl.n	8009942 <__swsetup_r+0x7a>
 800991c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800991e:	b141      	cbz	r1, 8009932 <__swsetup_r+0x6a>
 8009920:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009924:	4299      	cmp	r1, r3
 8009926:	d002      	beq.n	800992e <__swsetup_r+0x66>
 8009928:	4630      	mov	r0, r6
 800992a:	f7ff fb2f 	bl	8008f8c <_free_r>
 800992e:	2300      	movs	r3, #0
 8009930:	6363      	str	r3, [r4, #52]	; 0x34
 8009932:	89a3      	ldrh	r3, [r4, #12]
 8009934:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009938:	81a3      	strh	r3, [r4, #12]
 800993a:	2300      	movs	r3, #0
 800993c:	6063      	str	r3, [r4, #4]
 800993e:	6923      	ldr	r3, [r4, #16]
 8009940:	6023      	str	r3, [r4, #0]
 8009942:	89a3      	ldrh	r3, [r4, #12]
 8009944:	f043 0308 	orr.w	r3, r3, #8
 8009948:	81a3      	strh	r3, [r4, #12]
 800994a:	6923      	ldr	r3, [r4, #16]
 800994c:	b94b      	cbnz	r3, 8009962 <__swsetup_r+0x9a>
 800994e:	89a3      	ldrh	r3, [r4, #12]
 8009950:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009954:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009958:	d003      	beq.n	8009962 <__swsetup_r+0x9a>
 800995a:	4621      	mov	r1, r4
 800995c:	4630      	mov	r0, r6
 800995e:	f000 fa05 	bl	8009d6c <__smakebuf_r>
 8009962:	89a0      	ldrh	r0, [r4, #12]
 8009964:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009968:	f010 0301 	ands.w	r3, r0, #1
 800996c:	d00a      	beq.n	8009984 <__swsetup_r+0xbc>
 800996e:	2300      	movs	r3, #0
 8009970:	60a3      	str	r3, [r4, #8]
 8009972:	6963      	ldr	r3, [r4, #20]
 8009974:	425b      	negs	r3, r3
 8009976:	61a3      	str	r3, [r4, #24]
 8009978:	6923      	ldr	r3, [r4, #16]
 800997a:	b943      	cbnz	r3, 800998e <__swsetup_r+0xc6>
 800997c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009980:	d1ba      	bne.n	80098f8 <__swsetup_r+0x30>
 8009982:	bd70      	pop	{r4, r5, r6, pc}
 8009984:	0781      	lsls	r1, r0, #30
 8009986:	bf58      	it	pl
 8009988:	6963      	ldrpl	r3, [r4, #20]
 800998a:	60a3      	str	r3, [r4, #8]
 800998c:	e7f4      	b.n	8009978 <__swsetup_r+0xb0>
 800998e:	2000      	movs	r0, #0
 8009990:	e7f7      	b.n	8009982 <__swsetup_r+0xba>
 8009992:	bf00      	nop
 8009994:	2000003c 	.word	0x2000003c
 8009998:	0800a4cc 	.word	0x0800a4cc
 800999c:	0800a4ec 	.word	0x0800a4ec
 80099a0:	0800a4ac 	.word	0x0800a4ac

080099a4 <abort>:
 80099a4:	2006      	movs	r0, #6
 80099a6:	b508      	push	{r3, lr}
 80099a8:	f000 fa50 	bl	8009e4c <raise>
 80099ac:	2001      	movs	r0, #1
 80099ae:	f7f8 fcb0 	bl	8002312 <_exit>
	...

080099b4 <__sflush_r>:
 80099b4:	898a      	ldrh	r2, [r1, #12]
 80099b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099b8:	4605      	mov	r5, r0
 80099ba:	0710      	lsls	r0, r2, #28
 80099bc:	460c      	mov	r4, r1
 80099be:	d457      	bmi.n	8009a70 <__sflush_r+0xbc>
 80099c0:	684b      	ldr	r3, [r1, #4]
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	dc04      	bgt.n	80099d0 <__sflush_r+0x1c>
 80099c6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	dc01      	bgt.n	80099d0 <__sflush_r+0x1c>
 80099cc:	2000      	movs	r0, #0
 80099ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80099d0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80099d2:	2e00      	cmp	r6, #0
 80099d4:	d0fa      	beq.n	80099cc <__sflush_r+0x18>
 80099d6:	2300      	movs	r3, #0
 80099d8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80099dc:	682f      	ldr	r7, [r5, #0]
 80099de:	602b      	str	r3, [r5, #0]
 80099e0:	d032      	beq.n	8009a48 <__sflush_r+0x94>
 80099e2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80099e4:	89a3      	ldrh	r3, [r4, #12]
 80099e6:	075a      	lsls	r2, r3, #29
 80099e8:	d505      	bpl.n	80099f6 <__sflush_r+0x42>
 80099ea:	6863      	ldr	r3, [r4, #4]
 80099ec:	1ac0      	subs	r0, r0, r3
 80099ee:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80099f0:	b10b      	cbz	r3, 80099f6 <__sflush_r+0x42>
 80099f2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80099f4:	1ac0      	subs	r0, r0, r3
 80099f6:	2300      	movs	r3, #0
 80099f8:	4602      	mov	r2, r0
 80099fa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80099fc:	4628      	mov	r0, r5
 80099fe:	6a21      	ldr	r1, [r4, #32]
 8009a00:	47b0      	blx	r6
 8009a02:	1c43      	adds	r3, r0, #1
 8009a04:	89a3      	ldrh	r3, [r4, #12]
 8009a06:	d106      	bne.n	8009a16 <__sflush_r+0x62>
 8009a08:	6829      	ldr	r1, [r5, #0]
 8009a0a:	291d      	cmp	r1, #29
 8009a0c:	d82c      	bhi.n	8009a68 <__sflush_r+0xb4>
 8009a0e:	4a29      	ldr	r2, [pc, #164]	; (8009ab4 <__sflush_r+0x100>)
 8009a10:	40ca      	lsrs	r2, r1
 8009a12:	07d6      	lsls	r6, r2, #31
 8009a14:	d528      	bpl.n	8009a68 <__sflush_r+0xb4>
 8009a16:	2200      	movs	r2, #0
 8009a18:	6062      	str	r2, [r4, #4]
 8009a1a:	6922      	ldr	r2, [r4, #16]
 8009a1c:	04d9      	lsls	r1, r3, #19
 8009a1e:	6022      	str	r2, [r4, #0]
 8009a20:	d504      	bpl.n	8009a2c <__sflush_r+0x78>
 8009a22:	1c42      	adds	r2, r0, #1
 8009a24:	d101      	bne.n	8009a2a <__sflush_r+0x76>
 8009a26:	682b      	ldr	r3, [r5, #0]
 8009a28:	b903      	cbnz	r3, 8009a2c <__sflush_r+0x78>
 8009a2a:	6560      	str	r0, [r4, #84]	; 0x54
 8009a2c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009a2e:	602f      	str	r7, [r5, #0]
 8009a30:	2900      	cmp	r1, #0
 8009a32:	d0cb      	beq.n	80099cc <__sflush_r+0x18>
 8009a34:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009a38:	4299      	cmp	r1, r3
 8009a3a:	d002      	beq.n	8009a42 <__sflush_r+0x8e>
 8009a3c:	4628      	mov	r0, r5
 8009a3e:	f7ff faa5 	bl	8008f8c <_free_r>
 8009a42:	2000      	movs	r0, #0
 8009a44:	6360      	str	r0, [r4, #52]	; 0x34
 8009a46:	e7c2      	b.n	80099ce <__sflush_r+0x1a>
 8009a48:	6a21      	ldr	r1, [r4, #32]
 8009a4a:	2301      	movs	r3, #1
 8009a4c:	4628      	mov	r0, r5
 8009a4e:	47b0      	blx	r6
 8009a50:	1c41      	adds	r1, r0, #1
 8009a52:	d1c7      	bne.n	80099e4 <__sflush_r+0x30>
 8009a54:	682b      	ldr	r3, [r5, #0]
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d0c4      	beq.n	80099e4 <__sflush_r+0x30>
 8009a5a:	2b1d      	cmp	r3, #29
 8009a5c:	d001      	beq.n	8009a62 <__sflush_r+0xae>
 8009a5e:	2b16      	cmp	r3, #22
 8009a60:	d101      	bne.n	8009a66 <__sflush_r+0xb2>
 8009a62:	602f      	str	r7, [r5, #0]
 8009a64:	e7b2      	b.n	80099cc <__sflush_r+0x18>
 8009a66:	89a3      	ldrh	r3, [r4, #12]
 8009a68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009a6c:	81a3      	strh	r3, [r4, #12]
 8009a6e:	e7ae      	b.n	80099ce <__sflush_r+0x1a>
 8009a70:	690f      	ldr	r7, [r1, #16]
 8009a72:	2f00      	cmp	r7, #0
 8009a74:	d0aa      	beq.n	80099cc <__sflush_r+0x18>
 8009a76:	0793      	lsls	r3, r2, #30
 8009a78:	bf18      	it	ne
 8009a7a:	2300      	movne	r3, #0
 8009a7c:	680e      	ldr	r6, [r1, #0]
 8009a7e:	bf08      	it	eq
 8009a80:	694b      	ldreq	r3, [r1, #20]
 8009a82:	1bf6      	subs	r6, r6, r7
 8009a84:	600f      	str	r7, [r1, #0]
 8009a86:	608b      	str	r3, [r1, #8]
 8009a88:	2e00      	cmp	r6, #0
 8009a8a:	dd9f      	ble.n	80099cc <__sflush_r+0x18>
 8009a8c:	4633      	mov	r3, r6
 8009a8e:	463a      	mov	r2, r7
 8009a90:	4628      	mov	r0, r5
 8009a92:	6a21      	ldr	r1, [r4, #32]
 8009a94:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8009a98:	47e0      	blx	ip
 8009a9a:	2800      	cmp	r0, #0
 8009a9c:	dc06      	bgt.n	8009aac <__sflush_r+0xf8>
 8009a9e:	89a3      	ldrh	r3, [r4, #12]
 8009aa0:	f04f 30ff 	mov.w	r0, #4294967295
 8009aa4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009aa8:	81a3      	strh	r3, [r4, #12]
 8009aaa:	e790      	b.n	80099ce <__sflush_r+0x1a>
 8009aac:	4407      	add	r7, r0
 8009aae:	1a36      	subs	r6, r6, r0
 8009ab0:	e7ea      	b.n	8009a88 <__sflush_r+0xd4>
 8009ab2:	bf00      	nop
 8009ab4:	20400001 	.word	0x20400001

08009ab8 <_fflush_r>:
 8009ab8:	b538      	push	{r3, r4, r5, lr}
 8009aba:	690b      	ldr	r3, [r1, #16]
 8009abc:	4605      	mov	r5, r0
 8009abe:	460c      	mov	r4, r1
 8009ac0:	b913      	cbnz	r3, 8009ac8 <_fflush_r+0x10>
 8009ac2:	2500      	movs	r5, #0
 8009ac4:	4628      	mov	r0, r5
 8009ac6:	bd38      	pop	{r3, r4, r5, pc}
 8009ac8:	b118      	cbz	r0, 8009ad2 <_fflush_r+0x1a>
 8009aca:	6983      	ldr	r3, [r0, #24]
 8009acc:	b90b      	cbnz	r3, 8009ad2 <_fflush_r+0x1a>
 8009ace:	f000 f887 	bl	8009be0 <__sinit>
 8009ad2:	4b14      	ldr	r3, [pc, #80]	; (8009b24 <_fflush_r+0x6c>)
 8009ad4:	429c      	cmp	r4, r3
 8009ad6:	d11b      	bne.n	8009b10 <_fflush_r+0x58>
 8009ad8:	686c      	ldr	r4, [r5, #4]
 8009ada:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d0ef      	beq.n	8009ac2 <_fflush_r+0xa>
 8009ae2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009ae4:	07d0      	lsls	r0, r2, #31
 8009ae6:	d404      	bmi.n	8009af2 <_fflush_r+0x3a>
 8009ae8:	0599      	lsls	r1, r3, #22
 8009aea:	d402      	bmi.n	8009af2 <_fflush_r+0x3a>
 8009aec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009aee:	f000 f915 	bl	8009d1c <__retarget_lock_acquire_recursive>
 8009af2:	4628      	mov	r0, r5
 8009af4:	4621      	mov	r1, r4
 8009af6:	f7ff ff5d 	bl	80099b4 <__sflush_r>
 8009afa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009afc:	4605      	mov	r5, r0
 8009afe:	07da      	lsls	r2, r3, #31
 8009b00:	d4e0      	bmi.n	8009ac4 <_fflush_r+0xc>
 8009b02:	89a3      	ldrh	r3, [r4, #12]
 8009b04:	059b      	lsls	r3, r3, #22
 8009b06:	d4dd      	bmi.n	8009ac4 <_fflush_r+0xc>
 8009b08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009b0a:	f000 f908 	bl	8009d1e <__retarget_lock_release_recursive>
 8009b0e:	e7d9      	b.n	8009ac4 <_fflush_r+0xc>
 8009b10:	4b05      	ldr	r3, [pc, #20]	; (8009b28 <_fflush_r+0x70>)
 8009b12:	429c      	cmp	r4, r3
 8009b14:	d101      	bne.n	8009b1a <_fflush_r+0x62>
 8009b16:	68ac      	ldr	r4, [r5, #8]
 8009b18:	e7df      	b.n	8009ada <_fflush_r+0x22>
 8009b1a:	4b04      	ldr	r3, [pc, #16]	; (8009b2c <_fflush_r+0x74>)
 8009b1c:	429c      	cmp	r4, r3
 8009b1e:	bf08      	it	eq
 8009b20:	68ec      	ldreq	r4, [r5, #12]
 8009b22:	e7da      	b.n	8009ada <_fflush_r+0x22>
 8009b24:	0800a4cc 	.word	0x0800a4cc
 8009b28:	0800a4ec 	.word	0x0800a4ec
 8009b2c:	0800a4ac 	.word	0x0800a4ac

08009b30 <std>:
 8009b30:	2300      	movs	r3, #0
 8009b32:	b510      	push	{r4, lr}
 8009b34:	4604      	mov	r4, r0
 8009b36:	e9c0 3300 	strd	r3, r3, [r0]
 8009b3a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009b3e:	6083      	str	r3, [r0, #8]
 8009b40:	8181      	strh	r1, [r0, #12]
 8009b42:	6643      	str	r3, [r0, #100]	; 0x64
 8009b44:	81c2      	strh	r2, [r0, #14]
 8009b46:	6183      	str	r3, [r0, #24]
 8009b48:	4619      	mov	r1, r3
 8009b4a:	2208      	movs	r2, #8
 8009b4c:	305c      	adds	r0, #92	; 0x5c
 8009b4e:	f7fb fe0f 	bl	8005770 <memset>
 8009b52:	4b05      	ldr	r3, [pc, #20]	; (8009b68 <std+0x38>)
 8009b54:	6224      	str	r4, [r4, #32]
 8009b56:	6263      	str	r3, [r4, #36]	; 0x24
 8009b58:	4b04      	ldr	r3, [pc, #16]	; (8009b6c <std+0x3c>)
 8009b5a:	62a3      	str	r3, [r4, #40]	; 0x28
 8009b5c:	4b04      	ldr	r3, [pc, #16]	; (8009b70 <std+0x40>)
 8009b5e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009b60:	4b04      	ldr	r3, [pc, #16]	; (8009b74 <std+0x44>)
 8009b62:	6323      	str	r3, [r4, #48]	; 0x30
 8009b64:	bd10      	pop	{r4, pc}
 8009b66:	bf00      	nop
 8009b68:	08009e85 	.word	0x08009e85
 8009b6c:	08009ea7 	.word	0x08009ea7
 8009b70:	08009edf 	.word	0x08009edf
 8009b74:	08009f03 	.word	0x08009f03

08009b78 <_cleanup_r>:
 8009b78:	4901      	ldr	r1, [pc, #4]	; (8009b80 <_cleanup_r+0x8>)
 8009b7a:	f000 b8af 	b.w	8009cdc <_fwalk_reent>
 8009b7e:	bf00      	nop
 8009b80:	08009ab9 	.word	0x08009ab9

08009b84 <__sfmoreglue>:
 8009b84:	2268      	movs	r2, #104	; 0x68
 8009b86:	b570      	push	{r4, r5, r6, lr}
 8009b88:	1e4d      	subs	r5, r1, #1
 8009b8a:	4355      	muls	r5, r2
 8009b8c:	460e      	mov	r6, r1
 8009b8e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009b92:	f7ff fa63 	bl	800905c <_malloc_r>
 8009b96:	4604      	mov	r4, r0
 8009b98:	b140      	cbz	r0, 8009bac <__sfmoreglue+0x28>
 8009b9a:	2100      	movs	r1, #0
 8009b9c:	e9c0 1600 	strd	r1, r6, [r0]
 8009ba0:	300c      	adds	r0, #12
 8009ba2:	60a0      	str	r0, [r4, #8]
 8009ba4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009ba8:	f7fb fde2 	bl	8005770 <memset>
 8009bac:	4620      	mov	r0, r4
 8009bae:	bd70      	pop	{r4, r5, r6, pc}

08009bb0 <__sfp_lock_acquire>:
 8009bb0:	4801      	ldr	r0, [pc, #4]	; (8009bb8 <__sfp_lock_acquire+0x8>)
 8009bb2:	f000 b8b3 	b.w	8009d1c <__retarget_lock_acquire_recursive>
 8009bb6:	bf00      	nop
 8009bb8:	20000425 	.word	0x20000425

08009bbc <__sfp_lock_release>:
 8009bbc:	4801      	ldr	r0, [pc, #4]	; (8009bc4 <__sfp_lock_release+0x8>)
 8009bbe:	f000 b8ae 	b.w	8009d1e <__retarget_lock_release_recursive>
 8009bc2:	bf00      	nop
 8009bc4:	20000425 	.word	0x20000425

08009bc8 <__sinit_lock_acquire>:
 8009bc8:	4801      	ldr	r0, [pc, #4]	; (8009bd0 <__sinit_lock_acquire+0x8>)
 8009bca:	f000 b8a7 	b.w	8009d1c <__retarget_lock_acquire_recursive>
 8009bce:	bf00      	nop
 8009bd0:	20000426 	.word	0x20000426

08009bd4 <__sinit_lock_release>:
 8009bd4:	4801      	ldr	r0, [pc, #4]	; (8009bdc <__sinit_lock_release+0x8>)
 8009bd6:	f000 b8a2 	b.w	8009d1e <__retarget_lock_release_recursive>
 8009bda:	bf00      	nop
 8009bdc:	20000426 	.word	0x20000426

08009be0 <__sinit>:
 8009be0:	b510      	push	{r4, lr}
 8009be2:	4604      	mov	r4, r0
 8009be4:	f7ff fff0 	bl	8009bc8 <__sinit_lock_acquire>
 8009be8:	69a3      	ldr	r3, [r4, #24]
 8009bea:	b11b      	cbz	r3, 8009bf4 <__sinit+0x14>
 8009bec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009bf0:	f7ff bff0 	b.w	8009bd4 <__sinit_lock_release>
 8009bf4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009bf8:	6523      	str	r3, [r4, #80]	; 0x50
 8009bfa:	4b13      	ldr	r3, [pc, #76]	; (8009c48 <__sinit+0x68>)
 8009bfc:	4a13      	ldr	r2, [pc, #76]	; (8009c4c <__sinit+0x6c>)
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	62a2      	str	r2, [r4, #40]	; 0x28
 8009c02:	42a3      	cmp	r3, r4
 8009c04:	bf08      	it	eq
 8009c06:	2301      	moveq	r3, #1
 8009c08:	4620      	mov	r0, r4
 8009c0a:	bf08      	it	eq
 8009c0c:	61a3      	streq	r3, [r4, #24]
 8009c0e:	f000 f81f 	bl	8009c50 <__sfp>
 8009c12:	6060      	str	r0, [r4, #4]
 8009c14:	4620      	mov	r0, r4
 8009c16:	f000 f81b 	bl	8009c50 <__sfp>
 8009c1a:	60a0      	str	r0, [r4, #8]
 8009c1c:	4620      	mov	r0, r4
 8009c1e:	f000 f817 	bl	8009c50 <__sfp>
 8009c22:	2200      	movs	r2, #0
 8009c24:	2104      	movs	r1, #4
 8009c26:	60e0      	str	r0, [r4, #12]
 8009c28:	6860      	ldr	r0, [r4, #4]
 8009c2a:	f7ff ff81 	bl	8009b30 <std>
 8009c2e:	2201      	movs	r2, #1
 8009c30:	2109      	movs	r1, #9
 8009c32:	68a0      	ldr	r0, [r4, #8]
 8009c34:	f7ff ff7c 	bl	8009b30 <std>
 8009c38:	2202      	movs	r2, #2
 8009c3a:	2112      	movs	r1, #18
 8009c3c:	68e0      	ldr	r0, [r4, #12]
 8009c3e:	f7ff ff77 	bl	8009b30 <std>
 8009c42:	2301      	movs	r3, #1
 8009c44:	61a3      	str	r3, [r4, #24]
 8009c46:	e7d1      	b.n	8009bec <__sinit+0xc>
 8009c48:	0800a068 	.word	0x0800a068
 8009c4c:	08009b79 	.word	0x08009b79

08009c50 <__sfp>:
 8009c50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c52:	4607      	mov	r7, r0
 8009c54:	f7ff ffac 	bl	8009bb0 <__sfp_lock_acquire>
 8009c58:	4b1e      	ldr	r3, [pc, #120]	; (8009cd4 <__sfp+0x84>)
 8009c5a:	681e      	ldr	r6, [r3, #0]
 8009c5c:	69b3      	ldr	r3, [r6, #24]
 8009c5e:	b913      	cbnz	r3, 8009c66 <__sfp+0x16>
 8009c60:	4630      	mov	r0, r6
 8009c62:	f7ff ffbd 	bl	8009be0 <__sinit>
 8009c66:	3648      	adds	r6, #72	; 0x48
 8009c68:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009c6c:	3b01      	subs	r3, #1
 8009c6e:	d503      	bpl.n	8009c78 <__sfp+0x28>
 8009c70:	6833      	ldr	r3, [r6, #0]
 8009c72:	b30b      	cbz	r3, 8009cb8 <__sfp+0x68>
 8009c74:	6836      	ldr	r6, [r6, #0]
 8009c76:	e7f7      	b.n	8009c68 <__sfp+0x18>
 8009c78:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009c7c:	b9d5      	cbnz	r5, 8009cb4 <__sfp+0x64>
 8009c7e:	4b16      	ldr	r3, [pc, #88]	; (8009cd8 <__sfp+0x88>)
 8009c80:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009c84:	60e3      	str	r3, [r4, #12]
 8009c86:	6665      	str	r5, [r4, #100]	; 0x64
 8009c88:	f000 f847 	bl	8009d1a <__retarget_lock_init_recursive>
 8009c8c:	f7ff ff96 	bl	8009bbc <__sfp_lock_release>
 8009c90:	2208      	movs	r2, #8
 8009c92:	4629      	mov	r1, r5
 8009c94:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009c98:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009c9c:	6025      	str	r5, [r4, #0]
 8009c9e:	61a5      	str	r5, [r4, #24]
 8009ca0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009ca4:	f7fb fd64 	bl	8005770 <memset>
 8009ca8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009cac:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009cb0:	4620      	mov	r0, r4
 8009cb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009cb4:	3468      	adds	r4, #104	; 0x68
 8009cb6:	e7d9      	b.n	8009c6c <__sfp+0x1c>
 8009cb8:	2104      	movs	r1, #4
 8009cba:	4638      	mov	r0, r7
 8009cbc:	f7ff ff62 	bl	8009b84 <__sfmoreglue>
 8009cc0:	4604      	mov	r4, r0
 8009cc2:	6030      	str	r0, [r6, #0]
 8009cc4:	2800      	cmp	r0, #0
 8009cc6:	d1d5      	bne.n	8009c74 <__sfp+0x24>
 8009cc8:	f7ff ff78 	bl	8009bbc <__sfp_lock_release>
 8009ccc:	230c      	movs	r3, #12
 8009cce:	603b      	str	r3, [r7, #0]
 8009cd0:	e7ee      	b.n	8009cb0 <__sfp+0x60>
 8009cd2:	bf00      	nop
 8009cd4:	0800a068 	.word	0x0800a068
 8009cd8:	ffff0001 	.word	0xffff0001

08009cdc <_fwalk_reent>:
 8009cdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009ce0:	4606      	mov	r6, r0
 8009ce2:	4688      	mov	r8, r1
 8009ce4:	2700      	movs	r7, #0
 8009ce6:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009cea:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009cee:	f1b9 0901 	subs.w	r9, r9, #1
 8009cf2:	d505      	bpl.n	8009d00 <_fwalk_reent+0x24>
 8009cf4:	6824      	ldr	r4, [r4, #0]
 8009cf6:	2c00      	cmp	r4, #0
 8009cf8:	d1f7      	bne.n	8009cea <_fwalk_reent+0xe>
 8009cfa:	4638      	mov	r0, r7
 8009cfc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009d00:	89ab      	ldrh	r3, [r5, #12]
 8009d02:	2b01      	cmp	r3, #1
 8009d04:	d907      	bls.n	8009d16 <_fwalk_reent+0x3a>
 8009d06:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009d0a:	3301      	adds	r3, #1
 8009d0c:	d003      	beq.n	8009d16 <_fwalk_reent+0x3a>
 8009d0e:	4629      	mov	r1, r5
 8009d10:	4630      	mov	r0, r6
 8009d12:	47c0      	blx	r8
 8009d14:	4307      	orrs	r7, r0
 8009d16:	3568      	adds	r5, #104	; 0x68
 8009d18:	e7e9      	b.n	8009cee <_fwalk_reent+0x12>

08009d1a <__retarget_lock_init_recursive>:
 8009d1a:	4770      	bx	lr

08009d1c <__retarget_lock_acquire_recursive>:
 8009d1c:	4770      	bx	lr

08009d1e <__retarget_lock_release_recursive>:
 8009d1e:	4770      	bx	lr

08009d20 <__swhatbuf_r>:
 8009d20:	b570      	push	{r4, r5, r6, lr}
 8009d22:	460e      	mov	r6, r1
 8009d24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d28:	4614      	mov	r4, r2
 8009d2a:	2900      	cmp	r1, #0
 8009d2c:	461d      	mov	r5, r3
 8009d2e:	b096      	sub	sp, #88	; 0x58
 8009d30:	da08      	bge.n	8009d44 <__swhatbuf_r+0x24>
 8009d32:	2200      	movs	r2, #0
 8009d34:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009d38:	602a      	str	r2, [r5, #0]
 8009d3a:	061a      	lsls	r2, r3, #24
 8009d3c:	d410      	bmi.n	8009d60 <__swhatbuf_r+0x40>
 8009d3e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009d42:	e00e      	b.n	8009d62 <__swhatbuf_r+0x42>
 8009d44:	466a      	mov	r2, sp
 8009d46:	f000 f903 	bl	8009f50 <_fstat_r>
 8009d4a:	2800      	cmp	r0, #0
 8009d4c:	dbf1      	blt.n	8009d32 <__swhatbuf_r+0x12>
 8009d4e:	9a01      	ldr	r2, [sp, #4]
 8009d50:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009d54:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009d58:	425a      	negs	r2, r3
 8009d5a:	415a      	adcs	r2, r3
 8009d5c:	602a      	str	r2, [r5, #0]
 8009d5e:	e7ee      	b.n	8009d3e <__swhatbuf_r+0x1e>
 8009d60:	2340      	movs	r3, #64	; 0x40
 8009d62:	2000      	movs	r0, #0
 8009d64:	6023      	str	r3, [r4, #0]
 8009d66:	b016      	add	sp, #88	; 0x58
 8009d68:	bd70      	pop	{r4, r5, r6, pc}
	...

08009d6c <__smakebuf_r>:
 8009d6c:	898b      	ldrh	r3, [r1, #12]
 8009d6e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009d70:	079d      	lsls	r5, r3, #30
 8009d72:	4606      	mov	r6, r0
 8009d74:	460c      	mov	r4, r1
 8009d76:	d507      	bpl.n	8009d88 <__smakebuf_r+0x1c>
 8009d78:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009d7c:	6023      	str	r3, [r4, #0]
 8009d7e:	6123      	str	r3, [r4, #16]
 8009d80:	2301      	movs	r3, #1
 8009d82:	6163      	str	r3, [r4, #20]
 8009d84:	b002      	add	sp, #8
 8009d86:	bd70      	pop	{r4, r5, r6, pc}
 8009d88:	466a      	mov	r2, sp
 8009d8a:	ab01      	add	r3, sp, #4
 8009d8c:	f7ff ffc8 	bl	8009d20 <__swhatbuf_r>
 8009d90:	9900      	ldr	r1, [sp, #0]
 8009d92:	4605      	mov	r5, r0
 8009d94:	4630      	mov	r0, r6
 8009d96:	f7ff f961 	bl	800905c <_malloc_r>
 8009d9a:	b948      	cbnz	r0, 8009db0 <__smakebuf_r+0x44>
 8009d9c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009da0:	059a      	lsls	r2, r3, #22
 8009da2:	d4ef      	bmi.n	8009d84 <__smakebuf_r+0x18>
 8009da4:	f023 0303 	bic.w	r3, r3, #3
 8009da8:	f043 0302 	orr.w	r3, r3, #2
 8009dac:	81a3      	strh	r3, [r4, #12]
 8009dae:	e7e3      	b.n	8009d78 <__smakebuf_r+0xc>
 8009db0:	4b0d      	ldr	r3, [pc, #52]	; (8009de8 <__smakebuf_r+0x7c>)
 8009db2:	62b3      	str	r3, [r6, #40]	; 0x28
 8009db4:	89a3      	ldrh	r3, [r4, #12]
 8009db6:	6020      	str	r0, [r4, #0]
 8009db8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009dbc:	81a3      	strh	r3, [r4, #12]
 8009dbe:	9b00      	ldr	r3, [sp, #0]
 8009dc0:	6120      	str	r0, [r4, #16]
 8009dc2:	6163      	str	r3, [r4, #20]
 8009dc4:	9b01      	ldr	r3, [sp, #4]
 8009dc6:	b15b      	cbz	r3, 8009de0 <__smakebuf_r+0x74>
 8009dc8:	4630      	mov	r0, r6
 8009dca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009dce:	f000 f8d1 	bl	8009f74 <_isatty_r>
 8009dd2:	b128      	cbz	r0, 8009de0 <__smakebuf_r+0x74>
 8009dd4:	89a3      	ldrh	r3, [r4, #12]
 8009dd6:	f023 0303 	bic.w	r3, r3, #3
 8009dda:	f043 0301 	orr.w	r3, r3, #1
 8009dde:	81a3      	strh	r3, [r4, #12]
 8009de0:	89a0      	ldrh	r0, [r4, #12]
 8009de2:	4305      	orrs	r5, r0
 8009de4:	81a5      	strh	r5, [r4, #12]
 8009de6:	e7cd      	b.n	8009d84 <__smakebuf_r+0x18>
 8009de8:	08009b79 	.word	0x08009b79

08009dec <_malloc_usable_size_r>:
 8009dec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009df0:	1f18      	subs	r0, r3, #4
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	bfbc      	itt	lt
 8009df6:	580b      	ldrlt	r3, [r1, r0]
 8009df8:	18c0      	addlt	r0, r0, r3
 8009dfa:	4770      	bx	lr

08009dfc <_raise_r>:
 8009dfc:	291f      	cmp	r1, #31
 8009dfe:	b538      	push	{r3, r4, r5, lr}
 8009e00:	4604      	mov	r4, r0
 8009e02:	460d      	mov	r5, r1
 8009e04:	d904      	bls.n	8009e10 <_raise_r+0x14>
 8009e06:	2316      	movs	r3, #22
 8009e08:	6003      	str	r3, [r0, #0]
 8009e0a:	f04f 30ff 	mov.w	r0, #4294967295
 8009e0e:	bd38      	pop	{r3, r4, r5, pc}
 8009e10:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009e12:	b112      	cbz	r2, 8009e1a <_raise_r+0x1e>
 8009e14:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009e18:	b94b      	cbnz	r3, 8009e2e <_raise_r+0x32>
 8009e1a:	4620      	mov	r0, r4
 8009e1c:	f000 f830 	bl	8009e80 <_getpid_r>
 8009e20:	462a      	mov	r2, r5
 8009e22:	4601      	mov	r1, r0
 8009e24:	4620      	mov	r0, r4
 8009e26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009e2a:	f000 b817 	b.w	8009e5c <_kill_r>
 8009e2e:	2b01      	cmp	r3, #1
 8009e30:	d00a      	beq.n	8009e48 <_raise_r+0x4c>
 8009e32:	1c59      	adds	r1, r3, #1
 8009e34:	d103      	bne.n	8009e3e <_raise_r+0x42>
 8009e36:	2316      	movs	r3, #22
 8009e38:	6003      	str	r3, [r0, #0]
 8009e3a:	2001      	movs	r0, #1
 8009e3c:	e7e7      	b.n	8009e0e <_raise_r+0x12>
 8009e3e:	2400      	movs	r4, #0
 8009e40:	4628      	mov	r0, r5
 8009e42:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009e46:	4798      	blx	r3
 8009e48:	2000      	movs	r0, #0
 8009e4a:	e7e0      	b.n	8009e0e <_raise_r+0x12>

08009e4c <raise>:
 8009e4c:	4b02      	ldr	r3, [pc, #8]	; (8009e58 <raise+0xc>)
 8009e4e:	4601      	mov	r1, r0
 8009e50:	6818      	ldr	r0, [r3, #0]
 8009e52:	f7ff bfd3 	b.w	8009dfc <_raise_r>
 8009e56:	bf00      	nop
 8009e58:	2000003c 	.word	0x2000003c

08009e5c <_kill_r>:
 8009e5c:	b538      	push	{r3, r4, r5, lr}
 8009e5e:	2300      	movs	r3, #0
 8009e60:	4d06      	ldr	r5, [pc, #24]	; (8009e7c <_kill_r+0x20>)
 8009e62:	4604      	mov	r4, r0
 8009e64:	4608      	mov	r0, r1
 8009e66:	4611      	mov	r1, r2
 8009e68:	602b      	str	r3, [r5, #0]
 8009e6a:	f7f8 fa42 	bl	80022f2 <_kill>
 8009e6e:	1c43      	adds	r3, r0, #1
 8009e70:	d102      	bne.n	8009e78 <_kill_r+0x1c>
 8009e72:	682b      	ldr	r3, [r5, #0]
 8009e74:	b103      	cbz	r3, 8009e78 <_kill_r+0x1c>
 8009e76:	6023      	str	r3, [r4, #0]
 8009e78:	bd38      	pop	{r3, r4, r5, pc}
 8009e7a:	bf00      	nop
 8009e7c:	20000420 	.word	0x20000420

08009e80 <_getpid_r>:
 8009e80:	f7f8 ba30 	b.w	80022e4 <_getpid>

08009e84 <__sread>:
 8009e84:	b510      	push	{r4, lr}
 8009e86:	460c      	mov	r4, r1
 8009e88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e8c:	f000 f894 	bl	8009fb8 <_read_r>
 8009e90:	2800      	cmp	r0, #0
 8009e92:	bfab      	itete	ge
 8009e94:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009e96:	89a3      	ldrhlt	r3, [r4, #12]
 8009e98:	181b      	addge	r3, r3, r0
 8009e9a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009e9e:	bfac      	ite	ge
 8009ea0:	6563      	strge	r3, [r4, #84]	; 0x54
 8009ea2:	81a3      	strhlt	r3, [r4, #12]
 8009ea4:	bd10      	pop	{r4, pc}

08009ea6 <__swrite>:
 8009ea6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009eaa:	461f      	mov	r7, r3
 8009eac:	898b      	ldrh	r3, [r1, #12]
 8009eae:	4605      	mov	r5, r0
 8009eb0:	05db      	lsls	r3, r3, #23
 8009eb2:	460c      	mov	r4, r1
 8009eb4:	4616      	mov	r6, r2
 8009eb6:	d505      	bpl.n	8009ec4 <__swrite+0x1e>
 8009eb8:	2302      	movs	r3, #2
 8009eba:	2200      	movs	r2, #0
 8009ebc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ec0:	f000 f868 	bl	8009f94 <_lseek_r>
 8009ec4:	89a3      	ldrh	r3, [r4, #12]
 8009ec6:	4632      	mov	r2, r6
 8009ec8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009ecc:	81a3      	strh	r3, [r4, #12]
 8009ece:	4628      	mov	r0, r5
 8009ed0:	463b      	mov	r3, r7
 8009ed2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009ed6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009eda:	f000 b817 	b.w	8009f0c <_write_r>

08009ede <__sseek>:
 8009ede:	b510      	push	{r4, lr}
 8009ee0:	460c      	mov	r4, r1
 8009ee2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ee6:	f000 f855 	bl	8009f94 <_lseek_r>
 8009eea:	1c43      	adds	r3, r0, #1
 8009eec:	89a3      	ldrh	r3, [r4, #12]
 8009eee:	bf15      	itete	ne
 8009ef0:	6560      	strne	r0, [r4, #84]	; 0x54
 8009ef2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009ef6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009efa:	81a3      	strheq	r3, [r4, #12]
 8009efc:	bf18      	it	ne
 8009efe:	81a3      	strhne	r3, [r4, #12]
 8009f00:	bd10      	pop	{r4, pc}

08009f02 <__sclose>:
 8009f02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f06:	f000 b813 	b.w	8009f30 <_close_r>
	...

08009f0c <_write_r>:
 8009f0c:	b538      	push	{r3, r4, r5, lr}
 8009f0e:	4604      	mov	r4, r0
 8009f10:	4608      	mov	r0, r1
 8009f12:	4611      	mov	r1, r2
 8009f14:	2200      	movs	r2, #0
 8009f16:	4d05      	ldr	r5, [pc, #20]	; (8009f2c <_write_r+0x20>)
 8009f18:	602a      	str	r2, [r5, #0]
 8009f1a:	461a      	mov	r2, r3
 8009f1c:	f7f8 fa20 	bl	8002360 <_write>
 8009f20:	1c43      	adds	r3, r0, #1
 8009f22:	d102      	bne.n	8009f2a <_write_r+0x1e>
 8009f24:	682b      	ldr	r3, [r5, #0]
 8009f26:	b103      	cbz	r3, 8009f2a <_write_r+0x1e>
 8009f28:	6023      	str	r3, [r4, #0]
 8009f2a:	bd38      	pop	{r3, r4, r5, pc}
 8009f2c:	20000420 	.word	0x20000420

08009f30 <_close_r>:
 8009f30:	b538      	push	{r3, r4, r5, lr}
 8009f32:	2300      	movs	r3, #0
 8009f34:	4d05      	ldr	r5, [pc, #20]	; (8009f4c <_close_r+0x1c>)
 8009f36:	4604      	mov	r4, r0
 8009f38:	4608      	mov	r0, r1
 8009f3a:	602b      	str	r3, [r5, #0]
 8009f3c:	f7f8 fa2c 	bl	8002398 <_close>
 8009f40:	1c43      	adds	r3, r0, #1
 8009f42:	d102      	bne.n	8009f4a <_close_r+0x1a>
 8009f44:	682b      	ldr	r3, [r5, #0]
 8009f46:	b103      	cbz	r3, 8009f4a <_close_r+0x1a>
 8009f48:	6023      	str	r3, [r4, #0]
 8009f4a:	bd38      	pop	{r3, r4, r5, pc}
 8009f4c:	20000420 	.word	0x20000420

08009f50 <_fstat_r>:
 8009f50:	b538      	push	{r3, r4, r5, lr}
 8009f52:	2300      	movs	r3, #0
 8009f54:	4d06      	ldr	r5, [pc, #24]	; (8009f70 <_fstat_r+0x20>)
 8009f56:	4604      	mov	r4, r0
 8009f58:	4608      	mov	r0, r1
 8009f5a:	4611      	mov	r1, r2
 8009f5c:	602b      	str	r3, [r5, #0]
 8009f5e:	f7f8 fa26 	bl	80023ae <_fstat>
 8009f62:	1c43      	adds	r3, r0, #1
 8009f64:	d102      	bne.n	8009f6c <_fstat_r+0x1c>
 8009f66:	682b      	ldr	r3, [r5, #0]
 8009f68:	b103      	cbz	r3, 8009f6c <_fstat_r+0x1c>
 8009f6a:	6023      	str	r3, [r4, #0]
 8009f6c:	bd38      	pop	{r3, r4, r5, pc}
 8009f6e:	bf00      	nop
 8009f70:	20000420 	.word	0x20000420

08009f74 <_isatty_r>:
 8009f74:	b538      	push	{r3, r4, r5, lr}
 8009f76:	2300      	movs	r3, #0
 8009f78:	4d05      	ldr	r5, [pc, #20]	; (8009f90 <_isatty_r+0x1c>)
 8009f7a:	4604      	mov	r4, r0
 8009f7c:	4608      	mov	r0, r1
 8009f7e:	602b      	str	r3, [r5, #0]
 8009f80:	f7f8 fa24 	bl	80023cc <_isatty>
 8009f84:	1c43      	adds	r3, r0, #1
 8009f86:	d102      	bne.n	8009f8e <_isatty_r+0x1a>
 8009f88:	682b      	ldr	r3, [r5, #0]
 8009f8a:	b103      	cbz	r3, 8009f8e <_isatty_r+0x1a>
 8009f8c:	6023      	str	r3, [r4, #0]
 8009f8e:	bd38      	pop	{r3, r4, r5, pc}
 8009f90:	20000420 	.word	0x20000420

08009f94 <_lseek_r>:
 8009f94:	b538      	push	{r3, r4, r5, lr}
 8009f96:	4604      	mov	r4, r0
 8009f98:	4608      	mov	r0, r1
 8009f9a:	4611      	mov	r1, r2
 8009f9c:	2200      	movs	r2, #0
 8009f9e:	4d05      	ldr	r5, [pc, #20]	; (8009fb4 <_lseek_r+0x20>)
 8009fa0:	602a      	str	r2, [r5, #0]
 8009fa2:	461a      	mov	r2, r3
 8009fa4:	f7f8 fa1c 	bl	80023e0 <_lseek>
 8009fa8:	1c43      	adds	r3, r0, #1
 8009faa:	d102      	bne.n	8009fb2 <_lseek_r+0x1e>
 8009fac:	682b      	ldr	r3, [r5, #0]
 8009fae:	b103      	cbz	r3, 8009fb2 <_lseek_r+0x1e>
 8009fb0:	6023      	str	r3, [r4, #0]
 8009fb2:	bd38      	pop	{r3, r4, r5, pc}
 8009fb4:	20000420 	.word	0x20000420

08009fb8 <_read_r>:
 8009fb8:	b538      	push	{r3, r4, r5, lr}
 8009fba:	4604      	mov	r4, r0
 8009fbc:	4608      	mov	r0, r1
 8009fbe:	4611      	mov	r1, r2
 8009fc0:	2200      	movs	r2, #0
 8009fc2:	4d05      	ldr	r5, [pc, #20]	; (8009fd8 <_read_r+0x20>)
 8009fc4:	602a      	str	r2, [r5, #0]
 8009fc6:	461a      	mov	r2, r3
 8009fc8:	f7f8 f9ad 	bl	8002326 <_read>
 8009fcc:	1c43      	adds	r3, r0, #1
 8009fce:	d102      	bne.n	8009fd6 <_read_r+0x1e>
 8009fd0:	682b      	ldr	r3, [r5, #0]
 8009fd2:	b103      	cbz	r3, 8009fd6 <_read_r+0x1e>
 8009fd4:	6023      	str	r3, [r4, #0]
 8009fd6:	bd38      	pop	{r3, r4, r5, pc}
 8009fd8:	20000420 	.word	0x20000420

08009fdc <_init>:
 8009fdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fde:	bf00      	nop
 8009fe0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009fe2:	bc08      	pop	{r3}
 8009fe4:	469e      	mov	lr, r3
 8009fe6:	4770      	bx	lr

08009fe8 <_fini>:
 8009fe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fea:	bf00      	nop
 8009fec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009fee:	bc08      	pop	{r3}
 8009ff0:	469e      	mov	lr, r3
 8009ff2:	4770      	bx	lr
